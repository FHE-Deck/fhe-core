#include <bitset>
#include <cassert>
#include <iostream>

#include "fhe_context.h"

using namespace fhe_deck;

long
compose(const std::vector<long>& bits)
{
    long out = 0;
    for (int i = 0; i < bits.size(); ++i)
        out = (out << 1) | bits[bits.size() - i - 1];
    return out;
}

std::vector<long>
test_add4_boolean(FHEContext& ctx, uint8_t a, uint8_t b)
{
    long ct_a0_clear = (a >> 0) & 1;
    long ct_a1_clear = (a >> 1) & 1;
    long ct_a2_clear = (a >> 2) & 1;
    long ct_a3_clear = (a >> 3) & 1;
    long ct_b0_clear = (b >> 0) & 1;
    long ct_b1_clear = (b >> 1) & 1;
    long ct_b2_clear = (b >> 2) & 1;
    long ct_b3_clear = (b >> 3) & 1;

    auto fand2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 0;
            case 1:  return 0;
            case 2:  return 0;
            case 3:  return 1;
            default: assert(0);
        }
    };
    RotationPoly and2 = ctx.genrate_lut(fand2);

    auto fnand2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 1;
            case 1:  return 1;
            case 2:  return 1;
            case 3:  return 0;
            default: assert(0);
        }
    };
    RotationPoly nand2 = ctx.genrate_lut(fnand2);

    auto for2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 0;
            case 1:  return 1;
            case 2:  return 1;
            case 3:  return 1;
            default: assert(0);
        }
    };
    RotationPoly or2 = ctx.genrate_lut(for2);

    auto fnor2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 1;
            case 1:  return 0;
            case 2:  return 0;
            case 3:  return 0;
            default: assert(0);
        }
    };
    RotationPoly nor2 = ctx.genrate_lut(fnor2);

    auto fxor2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 0;
            case 1:  return 1;
            case 2:  return 1;
            case 3:  return 0;
            default: assert(0);
        }
    };
    RotationPoly xor2 = ctx.genrate_lut(fxor2);

    auto fxnor2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 1;
            case 1:  return 0;
            case 2:  return 0;
            case 3:  return 1;
            default: assert(0);
        }
    };
    RotationPoly xnor2 = ctx.genrate_lut(fxnor2);

    std::cerr << "\rLUT0   ";
    auto gin0_clear = 2 * ct_a2_clear + ct_b2_clear;
    auto gout0_clear = fnand2(gin0_clear, 4);
    std::cerr << "\rLUT1   ";
    auto gin1_clear = 2 * ct_a0_clear + ct_b0_clear;
    auto gout1_clear = fand2(gin1_clear, 4);
    std::cerr << "\rLUT2   ";
    auto gin2_clear = 2 * ct_a0_clear + ct_b0_clear;
    auto gout2_clear = fxor2(gin2_clear, 4);
    std::cerr << "\rLUT3   ";
    auto gin3_clear = 2 * ct_a3_clear + ct_b3_clear;
    auto gout3_clear = fxor2(gin3_clear, 4);
    std::cerr << "\rLUT4   ";
    auto gin4_clear = 2 * ct_a1_clear + ct_b1_clear;
    auto gout4_clear = fnand2(gin4_clear, 4);
    std::cerr << "\rLUT5   ";
    auto gin5_clear = 2 * ct_a1_clear + ct_b1_clear;
    auto gout5_clear = fxor2(gin5_clear, 4);
    std::cerr << "\rLUT6   ";
    auto gin6_clear = 2 * gout1_clear + gout5_clear;
    auto gout6_clear = fxor2(gin6_clear, 4);
    std::cerr << "\rLUT7   ";
    auto gin7_clear = 2 * ct_a2_clear + ct_b2_clear;
    auto gout7_clear = fxor2(gin7_clear, 4);
    std::cerr << "\rLUT8   ";
    auto gin8_clear = 2 * ct_a3_clear + ct_b3_clear;
    auto gout8_clear = fnand2(gin8_clear, 4);
    std::cerr << "\rLUT9   ";
    auto gin9_clear = 2 * gout1_clear + gout5_clear;
    auto gout9_clear = fnand2(gin9_clear, 4);
    std::cerr << "\rLUT10   ";
    auto gin10_clear = 2 * gout4_clear + gout9_clear;
    auto gout10_clear = fnand2(gin10_clear, 4);
    std::cerr << "\rLUT11   ";
    auto gin11_clear = 2 * gout10_clear + gout7_clear;
    auto gout11_clear = fxor2(gin11_clear, 4);
    std::cerr << "\rLUT12   ";
    auto gin12_clear = 2 * gout10_clear + gout7_clear;
    auto gout12_clear = fnand2(gin12_clear, 4);
    std::cerr << "\rLUT13   ";
    auto gin13_clear = 2 * gout0_clear + gout12_clear;
    auto gout13_clear = fnand2(gin13_clear, 4);
    std::cerr << "\rLUT14   ";
    auto gin14_clear = 2 * gout13_clear + gout3_clear;
    auto gout14_clear = fxor2(gin14_clear, 4);
    std::cerr << "\rLUT15   ";
    auto gin15_clear = 2 * gout13_clear + gout3_clear;
    auto gout15_clear = fnand2(gin15_clear, 4);
    std::cerr << "\rLUT16   ";
    auto gin16_clear = 2 * gout8_clear + gout15_clear;
    auto gout16_clear = fnand2(gin16_clear, 4);

    std::cerr << "\r          \r";
    std::vector<long> out;
    out.push_back(gout2_clear); /* out0 */
    out.push_back(gout6_clear); /* out1 */
    out.push_back(gout11_clear); /* out2 */
    out.push_back(gout14_clear); /* out3 */
    out.push_back(gout16_clear); /* out4 */
    return out;
}

std::vector<long>
test_calculator_boolean(FHEContext& ctx, uint8_t op, uint16_t x, uint16_t y)
{
    long ct_op0_clear = (op >> 0) & 1;
    long ct_op1_clear = (op >> 1) & 1;
    long ct_op2_clear = (op >> 2) & 1;
    long ct_op3_clear = (op >> 3) & 1;
    long ct_op4_clear = (op >> 4) & 1;
    long ct_op5_clear = (op >> 5) & 1;
    long ct_op6_clear = (op >> 6) & 1;
    long ct_op7_clear = (op >> 7) & 1;
    long ct_x0_clear = (x >> 0) & 1;
    long ct_x1_clear = (x >> 1) & 1;
    long ct_x2_clear = (x >> 2) & 1;
    long ct_x3_clear = (x >> 3) & 1;
    long ct_x4_clear = (x >> 4) & 1;
    long ct_x5_clear = (x >> 5) & 1;
    long ct_x6_clear = (x >> 6) & 1;
    long ct_x7_clear = (x >> 7) & 1;
    long ct_x8_clear = (x >> 8) & 1;
    long ct_x9_clear = (x >> 9) & 1;
    long ct_x10_clear = (x >> 10) & 1;
    long ct_x11_clear = (x >> 11) & 1;
    long ct_x12_clear = (x >> 12) & 1;
    long ct_x13_clear = (x >> 13) & 1;
    long ct_x14_clear = (x >> 14) & 1;
    long ct_x15_clear = (x >> 15) & 1;
    long ct_y0_clear = (y >> 0) & 1;
    long ct_y1_clear = (y >> 1) & 1;
    long ct_y2_clear = (y >> 2) & 1;
    long ct_y3_clear = (y >> 3) & 1;
    long ct_y4_clear = (y >> 4) & 1;
    long ct_y5_clear = (y >> 5) & 1;
    long ct_y6_clear = (y >> 6) & 1;
    long ct_y7_clear = (y >> 7) & 1;
    long ct_y8_clear = (y >> 8) & 1;
    long ct_y9_clear = (y >> 9) & 1;
    long ct_y10_clear = (y >> 10) & 1;
    long ct_y11_clear = (y >> 11) & 1;
    long ct_y12_clear = (y >> 12) & 1;
    long ct_y13_clear = (y >> 13) & 1;
    long ct_y14_clear = (y >> 14) & 1;
    long ct_y15_clear = (y >> 15) & 1;

    auto fand2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 0;
            case 1:  return 0;
            case 2:  return 0;
            case 3:  return 1;
            default: assert(0);
        }
    };
    RotationPoly and2 = ctx.genrate_lut(fand2);

    auto fnand2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 1;
            case 1:  return 1;
            case 2:  return 1;
            case 3:  return 0;
            default: assert(0);
        }
    };
    RotationPoly nand2 = ctx.genrate_lut(fnand2);

    auto for2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 0;
            case 1:  return 1;
            case 2:  return 1;
            case 3:  return 1;
            default: assert(0);
        }
    };
    RotationPoly or2 = ctx.genrate_lut(for2);

    auto fnor2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 1;
            case 1:  return 0;
            case 2:  return 0;
            case 3:  return 0;
            default: assert(0);
        }
    };
    RotationPoly nor2 = ctx.genrate_lut(fnor2);

    auto fxor2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 0;
            case 1:  return 1;
            case 2:  return 1;
            case 3:  return 0;
            default: assert(0);
        }
    };
    RotationPoly xor2 = ctx.genrate_lut(fxor2);

    auto fxnor2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 1;
            case 1:  return 0;
            case 2:  return 0;
            case 3:  return 1;
            default: assert(0);
        }
    };
    RotationPoly xnor2 = ctx.genrate_lut(fxnor2);

    std::cerr << "\rLUT0   ";
    auto gin0_clear = 2 * (1 - ct_op2_clear) + ct_op1_clear;
    auto gout0_clear = fand2(gin0_clear, 4);
    std::cerr << "\rLUT1   ";
    auto gin1_clear = 2 * ct_y2_clear + ct_x6_clear;
    auto gout1_clear = fand2(gin1_clear, 4);
    std::cerr << "\rLUT2   ";
    auto gin2_clear = 2 * ct_y4_clear + ct_x9_clear;
    auto gout2_clear = fand2(gin2_clear, 4);
    std::cerr << "\rLUT3   ";
    auto gin3_clear = 2 * ct_op6_clear + ct_op7_clear;
    auto gout3_clear = fnor2(gin3_clear, 4);
    std::cerr << "\rLUT4   ";
    auto gin4_clear = 2 * ct_y10_clear + ct_x3_clear;
    auto gout4_clear = fand2(gin4_clear, 4);
    std::cerr << "\rLUT5   ";
    auto gin5_clear = 2 * ct_y3_clear + ct_x3_clear;
    auto gout5_clear = fand2(gin5_clear, 4);
    std::cerr << "\rLUT6   ";
    auto gin6_clear = 2 * ct_y5_clear + ct_x5_clear;
    auto gout6_clear = fand2(gin6_clear, 4);
    std::cerr << "\rLUT7   ";
    auto gin7_clear = 2 * ct_y3_clear + ct_x6_clear;
    auto gout7_clear = fand2(gin7_clear, 4);
    std::cerr << "\rLUT8   ";
    auto gin8_clear = 2 * ct_y6_clear + ct_x1_clear;
    auto gout8_clear = fnand2(gin8_clear, 4);
    std::cerr << "\rLUT9   ";
    auto gin9_clear = 2 * ct_y5_clear + ct_x7_clear;
    auto gout9_clear = fand2(gin9_clear, 4);
    std::cerr << "\rLUT10   ";
    auto gin10_clear = 2 * ct_y9_clear + ct_x3_clear;
    auto gout10_clear = fand2(gin10_clear, 4);
    std::cerr << "\rLUT11   ";
    auto gin11_clear = 2 * ct_y1_clear + ct_x1_clear;
    auto gout11_clear = fnand2(gin11_clear, 4);
    std::cerr << "\rLUT12   ";
    auto gin12_clear = 2 * ct_y2_clear + ct_x8_clear;
    auto gout12_clear = fand2(gin12_clear, 4);
    std::cerr << "\rLUT13   ";
    auto gin13_clear = 2 * ct_y6_clear + ct_x8_clear;
    auto gout13_clear = fand2(gin13_clear, 4);
    std::cerr << "\rLUT14   ";
    auto gin14_clear = 2 * ct_y11_clear + ct_x4_clear;
    auto gout14_clear = fand2(gin14_clear, 4);
    std::cerr << "\rLUT15   ";
    auto gin15_clear = 2 * ct_y1_clear + ct_x11_clear;
    auto gout15_clear = fand2(gin15_clear, 4);
    std::cerr << "\rLUT16   ";
    auto gin16_clear = 2 * ct_y0_clear + ct_x10_clear;
    auto gout16_clear = fnand2(gin16_clear, 4);
    std::cerr << "\rINV17   ";
    long gout17_clear = 1 - ct_x14_clear;

    std::cerr << "\rLUT18   ";
    auto gin18_clear = 2 * ct_y0_clear + ct_x12_clear;
    auto gout18_clear = fand2(gin18_clear, 4);
    std::cerr << "\rLUT19   ";
    auto gin19_clear = 2 * ct_y3_clear + ct_x11_clear;
    auto gout19_clear = fnand2(gin19_clear, 4);
    std::cerr << "\rLUT20   ";
    auto gin20_clear = 2 * ct_y0_clear + ct_x8_clear;
    auto gout20_clear = fnand2(gin20_clear, 4);
    std::cerr << "\rLUT21   ";
    auto gin21_clear = 2 * ct_y0_clear + ct_x7_clear;
    auto gout21_clear = fnand2(gin21_clear, 4);
    std::cerr << "\rLUT22   ";
    auto gin22_clear = 2 * ct_y10_clear + ct_x2_clear;
    auto gout22_clear = fand2(gin22_clear, 4);
    std::cerr << "\rLUT23   ";
    auto gin23_clear = 2 * ct_y8_clear + ct_x3_clear;
    auto gout23_clear = fand2(gin23_clear, 4);
    std::cerr << "\rLUT24   ";
    auto gin24_clear = 2 * ct_y7_clear + ct_x8_clear;
    auto gout24_clear = fand2(gin24_clear, 4);
    std::cerr << "\rLUT25   ";
    auto gin25_clear = 2 * ct_y0_clear + ct_x1_clear;
    auto gout25_clear = fand2(gin25_clear, 4);
    std::cerr << "\rLUT26   ";
    auto gin26_clear = 2 * ct_y1_clear + ct_x4_clear;
    auto gout26_clear = fand2(gin26_clear, 4);
    std::cerr << "\rINV27   ";
    long gout27_clear = 1 - ct_y8_clear;

    std::cerr << "\rLUT28   ";
    auto gin28_clear = 2 * ct_y0_clear + ct_x0_clear;
    auto gout28_clear = fxnor2(gin28_clear, 4);
    std::cerr << "\rLUT29   ";
    auto gin29_clear = 2 * ct_y14_clear + ct_x0_clear;
    auto gout29_clear = fand2(gin29_clear, 4);
    std::cerr << "\rLUT30   ";
    auto gin30_clear = 2 * gout22_clear + gout10_clear;
    auto gout30_clear = fnand2(gin30_clear, 4);
    std::cerr << "\rLUT31   ";
    auto gin31_clear = 2 * ct_y1_clear + ct_x6_clear;
    auto gout31_clear = fand2(gin31_clear, 4);
    std::cerr << "\rLUT32   ";
    auto gin32_clear = 2 * ct_y3_clear + ct_x0_clear;
    auto gout32_clear = fnand2(gin32_clear, 4);
    std::cerr << "\rINV33   ";
    long gout33_clear = 1 - ct_y7_clear;

    std::cerr << "\rINV34   ";
    long gout34_clear = 1 - ct_x1_clear;

    std::cerr << "\rLUT35   ";
    auto gin35_clear = 2 * ct_op3_clear + gout0_clear;
    auto gout35_clear = fand2(gin35_clear, 4);
    std::cerr << "\rLUT36   ";
    auto gin36_clear = 2 * ct_y1_clear + ct_x8_clear;
    auto gout36_clear = fand2(gin36_clear, 4);
    std::cerr << "\rLUT37   ";
    auto gin37_clear = 2 * ct_y2_clear + ct_x4_clear;
    auto gout37_clear = fand2(gin37_clear, 4);
    std::cerr << "\rINV38   ";
    long gout38_clear = 1 - ct_x10_clear;

    std::cerr << "\rLUT39   ";
    auto gin39_clear = 2 * ct_y9_clear + ct_x0_clear;
    auto gout39_clear = fand2(gin39_clear, 4);
    std::cerr << "\rINV40   ";
    long gout40_clear = 1 - ct_y10_clear;

    std::cerr << "\rLUT41   ";
    auto gin41_clear = 2 * ct_y1_clear + ct_x0_clear;
    auto gout41_clear = fand2(gin41_clear, 4);
    std::cerr << "\rLUT42   ";
    auto gin42_clear = 2 * ct_y8_clear + ct_x2_clear;
    auto gout42_clear = fand2(gin42_clear, 4);
    std::cerr << "\rLUT43   ";
    auto gin43_clear = 2 * ct_y0_clear + ct_x15_clear;
    auto gout43_clear = fand2(gin43_clear, 4);
    std::cerr << "\rLUT44   ";
    auto gin44_clear = 2 * ct_y5_clear + ct_x0_clear;
    auto gout44_clear = fand2(gin44_clear, 4);
    std::cerr << "\rLUT45   ";
    auto gin45_clear = 2 * ct_y8_clear + ct_x6_clear;
    auto gout45_clear = fand2(gin45_clear, 4);
    std::cerr << "\rLUT46   ";
    auto gin46_clear = 2 * ct_y2_clear + ct_x1_clear;
    auto gout46_clear = fand2(gin46_clear, 4);
    std::cerr << "\rINV47   ";
    long gout47_clear = 1 - ct_x7_clear;

    std::cerr << "\rLUT48   ";
    auto gin48_clear = 2 * (1 - ct_op1_clear) + ct_op0_clear;
    auto gout48_clear = fand2(gin48_clear, 4);
    std::cerr << "\rINV49   ";
    long gout49_clear = 1 - ct_x6_clear;

    std::cerr << "\rLUT50   ";
    auto gin50_clear = 2 * ct_y9_clear + ct_x6_clear;
    auto gout50_clear = fand2(gin50_clear, 4);
    std::cerr << "\rLUT51   ";
    auto gin51_clear = 2 * ct_y4_clear + ct_x11_clear;
    auto gout51_clear = fand2(gin51_clear, 4);
    std::cerr << "\rINV52   ";
    long gout52_clear = 1 - ct_y9_clear;

    std::cerr << "\rLUT53   ";
    auto gin53_clear = 2 * ct_y6_clear + ct_x4_clear;
    auto gout53_clear = fand2(gin53_clear, 4);
    std::cerr << "\rLUT54   ";
    auto gin54_clear = 2 * ct_y5_clear + ct_x9_clear;
    auto gout54_clear = fand2(gin54_clear, 4);
    std::cerr << "\rLUT55   ";
    auto gin55_clear = 2 * ct_y0_clear + ct_x6_clear;
    auto gout55_clear = fnand2(gin55_clear, 4);
    std::cerr << "\rLUT56   ";
    auto gin56_clear = 2 * gout46_clear + gout32_clear;
    auto gout56_clear = fxnor2(gin56_clear, 4);
    std::cerr << "\rLUT57   ";
    auto gin57_clear = 2 * ct_y1_clear + ct_x10_clear;
    auto gout57_clear = fand2(gin57_clear, 4);
    std::cerr << "\rLUT58   ";
    auto gin58_clear = 2 * (1 - ct_op4_clear) + ct_op5_clear;
    auto gout58_clear = fand2(gin58_clear, 4);
    std::cerr << "\rLUT59   ";
    auto gin59_clear = 2 * ct_y1_clear + ct_x9_clear;
    auto gout59_clear = fand2(gin59_clear, 4);
    std::cerr << "\rLUT60   ";
    auto gin60_clear = 2 * ct_y6_clear + ct_x0_clear;
    auto gout60_clear = fand2(gin60_clear, 4);
    std::cerr << "\rLUT61   ";
    auto gin61_clear = 2 * ct_y6_clear + ct_x2_clear;
    auto gout61_clear = fand2(gin61_clear, 4);
    std::cerr << "\rINV62   ";
    long gout62_clear = 1 - ct_y4_clear;

    std::cerr << "\rINV63   ";
    long gout63_clear = 1 - ct_x5_clear;

    std::cerr << "\rLUT64   ";
    auto gin64_clear = 2 * ct_y7_clear + ct_x4_clear;
    auto gout64_clear = fand2(gin64_clear, 4);
    std::cerr << "\rLUT65   ";
    auto gin65_clear = 2 * ct_y4_clear + ct_x2_clear;
    auto gout65_clear = fand2(gin65_clear, 4);
    std::cerr << "\rLUT66   ";
    auto gin66_clear = 2 * ct_y0_clear + ct_x14_clear;
    auto gout66_clear = fand2(gin66_clear, 4);
    std::cerr << "\rLUT67   ";
    auto gin67_clear = 2 * ct_y13_clear + ct_x2_clear;
    auto gout67_clear = fand2(gin67_clear, 4);
    std::cerr << "\rLUT68   ";
    auto gin68_clear = 2 * ct_y2_clear + ct_x12_clear;
    auto gout68_clear = fand2(gin68_clear, 4);
    std::cerr << "\rLUT69   ";
    auto gin69_clear = 2 * ct_op2_clear + ct_op3_clear;
    auto gout69_clear = fand2(gin69_clear, 4);
    std::cerr << "\rLUT70   ";
    auto gin70_clear = 2 * (1 - ct_x0_clear) + ct_y15_clear;
    auto gout70_clear = fand2(gin70_clear, 4);
    std::cerr << "\rINV71   ";
    long gout71_clear = 1 - ct_x2_clear;

    std::cerr << "\rLUT72   ";
    auto gin72_clear = 2 * ct_y1_clear + ct_x2_clear;
    auto gout72_clear = fand2(gin72_clear, 4);
    std::cerr << "\rLUT73   ";
    auto gin73_clear = 2 * ct_y5_clear + ct_x2_clear;
    auto gout73_clear = fand2(gin73_clear, 4);
    std::cerr << "\rLUT74   ";
    auto gin74_clear = 2 * ct_y4_clear + ct_x5_clear;
    auto gout74_clear = fand2(gin74_clear, 4);
    std::cerr << "\rLUT75   ";
    auto gin75_clear = 2 * ct_y2_clear + ct_x10_clear;
    auto gout75_clear = fand2(gin75_clear, 4);
    std::cerr << "\rINV76   ";
    long gout76_clear = 1 - ct_y3_clear;

    std::cerr << "\rLUT77   ";
    auto gin77_clear = 2 * ct_y7_clear + ct_x2_clear;
    auto gout77_clear = fand2(gin77_clear, 4);
    std::cerr << "\rLUT78   ";
    auto gin78_clear = 2 * ct_y9_clear + ct_x1_clear;
    auto gout78_clear = fnand2(gin78_clear, 4);
    std::cerr << "\rINV79   ";
    long gout79_clear = 1 - ct_x11_clear;

    std::cerr << "\rLUT80   ";
    auto gin80_clear = 2 * ct_y4_clear + ct_x3_clear;
    auto gout80_clear = fand2(gin80_clear, 4);
    std::cerr << "\rLUT81   ";
    auto gin81_clear = 2 * ct_y5_clear + ct_x3_clear;
    auto gout81_clear = fand2(gin81_clear, 4);
    std::cerr << "\rLUT82   ";
    auto gin82_clear = 2 * ct_y10_clear + ct_x4_clear;
    auto gout82_clear = fnand2(gin82_clear, 4);
    std::cerr << "\rLUT83   ";
    auto gin83_clear = 2 * ct_y5_clear + ct_x4_clear;
    auto gout83_clear = fand2(gin83_clear, 4);
    std::cerr << "\rLUT84   ";
    auto gin84_clear = 2 * ct_y11_clear + ct_x2_clear;
    auto gout84_clear = fand2(gin84_clear, 4);
    std::cerr << "\rLUT85   ";
    auto gin85_clear = 2 * gout5_clear + gout37_clear;
    auto gout85_clear = fxor2(gin85_clear, 4);
    std::cerr << "\rLUT86   ";
    auto gin86_clear = 2 * ct_y4_clear + ct_x7_clear;
    auto gout86_clear = fand2(gin86_clear, 4);
    std::cerr << "\rLUT87   ";
    auto gin87_clear = 2 * ct_y7_clear + ct_x3_clear;
    auto gout87_clear = fand2(gin87_clear, 4);
    std::cerr << "\rLUT88   ";
    auto gin88_clear = 2 * ct_y3_clear + ct_x7_clear;
    auto gout88_clear = fand2(gin88_clear, 4);
    std::cerr << "\rLUT89   ";
    auto gin89_clear = 2 * ct_y2_clear + ct_x3_clear;
    auto gout89_clear = fand2(gin89_clear, 4);
    std::cerr << "\rLUT90   ";
    auto gin90_clear = 2 * ct_y4_clear + ct_x0_clear;
    auto gout90_clear = fand2(gin90_clear, 4);
    std::cerr << "\rLUT91   ";
    auto gin91_clear = 2 * ct_y3_clear + ct_x4_clear;
    auto gout91_clear = fand2(gin91_clear, 4);
    std::cerr << "\rLUT92   ";
    auto gin92_clear = 2 * ct_y3_clear + ct_x1_clear;
    auto gout92_clear = fnand2(gin92_clear, 4);
    std::cerr << "\rLUT93   ";
    auto gin93_clear = 2 * ct_y6_clear + ct_x6_clear;
    auto gout93_clear = fand2(gin93_clear, 4);
    std::cerr << "\rLUT94   ";
    auto gin94_clear = 2 * ct_y0_clear + ct_x11_clear;
    auto gout94_clear = fnand2(gin94_clear, 4);
    std::cerr << "\rLUT95   ";
    auto gin95_clear = 2 * ct_y0_clear + ct_x0_clear;
    auto gout95_clear = fand2(gin95_clear, 4);
    std::cerr << "\rLUT96   ";
    auto gin96_clear = 2 * ct_y13_clear + ct_x1_clear;
    auto gout96_clear = fand2(gin96_clear, 4);
    std::cerr << "\rLUT97   ";
    auto gin97_clear = 2 * ct_y6_clear + ct_x3_clear;
    auto gout97_clear = fand2(gin97_clear, 4);
    std::cerr << "\rLUT98   ";
    auto gin98_clear = 2 * ct_y2_clear + ct_x9_clear;
    auto gout98_clear = fand2(gin98_clear, 4);
    std::cerr << "\rLUT99   ";
    auto gin99_clear = 2 * ct_y7_clear + ct_x1_clear;
    auto gout99_clear = fand2(gin99_clear, 4);
    std::cerr << "\rLUT100   ";
    auto gin100_clear = 2 * ct_y5_clear + ct_x8_clear;
    auto gout100_clear = fand2(gin100_clear, 4);
    std::cerr << "\rLUT101   ";
    auto gin101_clear = 2 * gout87_clear + gout53_clear;
    auto gout101_clear = fxor2(gin101_clear, 4);
    std::cerr << "\rLUT102   ";
    auto gin102_clear = 2 * gout87_clear + gout53_clear;
    auto gout102_clear = fnand2(gin102_clear, 4);
    std::cerr << "\rLUT103   ";
    auto gin103_clear = 2 * ct_y6_clear + ct_x9_clear;
    auto gout103_clear = fand2(gin103_clear, 4);
    std::cerr << "\rLUT104   ";
    auto gin104_clear = 2 * ct_y7_clear + ct_x6_clear;
    auto gout104_clear = fand2(gin104_clear, 4);
    std::cerr << "\rLUT105   ";
    auto gin105_clear = 2 * ct_y2_clear + ct_x11_clear;
    auto gout105_clear = fand2(gin105_clear, 4);
    std::cerr << "\rLUT106   ";
    auto gin106_clear = 2 * ct_y6_clear + ct_x5_clear;
    auto gout106_clear = fand2(gin106_clear, 4);
    std::cerr << "\rLUT107   ";
    auto gin107_clear = 2 * gout77_clear + gout97_clear;
    auto gout107_clear = fnand2(gin107_clear, 4);
    std::cerr << "\rLUT108   ";
    auto gin108_clear = 2 * ct_y9_clear + ct_x2_clear;
    auto gout108_clear = fand2(gin108_clear, 4);
    std::cerr << "\rLUT109   ";
    auto gin109_clear = 2 * ct_y3_clear + ct_x12_clear;
    auto gout109_clear = fand2(gin109_clear, 4);
    std::cerr << "\rLUT110   ";
    auto gin110_clear = 2 * ct_y0_clear + ct_x13_clear;
    auto gout110_clear = fand2(gin110_clear, 4);
    std::cerr << "\rLUT111   ";
    auto gin111_clear = 2 * gout21_clear + (1 - gout51_clear);
    auto gout111_clear = for2(gin111_clear, 4);
    std::cerr << "\rLUT112   ";
    auto gin112_clear = 2 * ct_y8_clear + ct_x1_clear;
    auto gout112_clear = fand2(gin112_clear, 4);
    std::cerr << "\rLUT113   ";
    auto gin113_clear = 2 * ct_y10_clear + ct_x5_clear;
    auto gout113_clear = fand2(gin113_clear, 4);
    std::cerr << "\rLUT114   ";
    auto gin114_clear = 2 * ct_y3_clear + ct_x8_clear;
    auto gout114_clear = fand2(gin114_clear, 4);
    std::cerr << "\rLUT115   ";
    auto gin115_clear = 2 * ct_y0_clear + ct_x3_clear;
    auto gout115_clear = fand2(gin115_clear, 4);
    std::cerr << "\rLUT116   ";
    auto gin116_clear = 2 * ct_y3_clear + ct_x10_clear;
    auto gout116_clear = fand2(gin116_clear, 4);
    std::cerr << "\rINV117   ";
    long gout117_clear = 1 - ct_y1_clear;

    std::cerr << "\rLUT118   ";
    auto gin118_clear = 2 * ct_y10_clear + ct_x0_clear;
    auto gout118_clear = fand2(gin118_clear, 4);
    std::cerr << "\rLUT119   ";
    auto gin119_clear = 2 * ct_y7_clear + ct_x5_clear;
    auto gout119_clear = fand2(gin119_clear, 4);
    std::cerr << "\rINV120   ";
    long gout120_clear = 1 - ct_x3_clear;

    std::cerr << "\rLUT121   ";
    auto gin121_clear = 2 * ct_y14_clear + ct_x1_clear;
    auto gout121_clear = fand2(gin121_clear, 4);
    std::cerr << "\rLUT122   ";
    auto gin122_clear = 2 * gout99_clear + gout61_clear;
    auto gout122_clear = fxor2(gin122_clear, 4);
    std::cerr << "\rLUT123   ";
    auto gin123_clear = 2 * ct_y4_clear + ct_x10_clear;
    auto gout123_clear = fand2(gin123_clear, 4);
    std::cerr << "\rLUT124   ";
    auto gin124_clear = 2 * gout64_clear + gout106_clear;
    auto gout124_clear = fxor2(gin124_clear, 4);
    std::cerr << "\rLUT125   ";
    auto gin125_clear = 2 * ct_y12_clear + ct_x2_clear;
    auto gout125_clear = fnand2(gin125_clear, 4);
    std::cerr << "\rLUT126   ";
    auto gin126_clear = 2 * gout5_clear + gout37_clear;
    auto gout126_clear = fnand2(gin126_clear, 4);
    std::cerr << "\rINV127   ";
    long gout127_clear = 1 - ct_y6_clear;

    std::cerr << "\rLUT128   ";
    auto gin128_clear = 2 * ct_y4_clear + ct_x8_clear;
    auto gout128_clear = fand2(gin128_clear, 4);
    std::cerr << "\rINV129   ";
    long gout129_clear = 1 - ct_y15_clear;

    std::cerr << "\rLUT130   ";
    auto gin130_clear = 2 * ct_y11_clear + ct_x1_clear;
    auto gout130_clear = fand2(gin130_clear, 4);
    std::cerr << "\rLUT131   ";
    auto gin131_clear = 2 * ct_y1_clear + ct_y0_clear;
    auto gout131_clear = fnor2(gin131_clear, 4);
    std::cerr << "\rLUT132   ";
    auto gin132_clear = 2 * ct_y2_clear + ct_x0_clear;
    auto gout132_clear = fand2(gin132_clear, 4);
    std::cerr << "\rINV133   ";
    long gout133_clear = 1 - ct_y14_clear;

    std::cerr << "\rLUT134   ";
    auto gin134_clear = 2 * ct_y2_clear + ct_x5_clear;
    auto gout134_clear = fand2(gin134_clear, 4);
    std::cerr << "\rLUT135   ";
    auto gin135_clear = 2 * ct_y2_clear + ct_x2_clear;
    auto gout135_clear = fand2(gin135_clear, 4);
    std::cerr << "\rLUT136   ";
    auto gin136_clear = 2 * gout58_clear + gout3_clear;
    auto gout136_clear = fand2(gin136_clear, 4);
    std::cerr << "\rLUT137   ";
    auto gin137_clear = 2 * ct_y7_clear + ct_x0_clear;
    auto gout137_clear = fand2(gin137_clear, 4);
    std::cerr << "\rLUT138   ";
    auto gin138_clear = 2 * ct_y15_clear + ct_x15_clear;
    auto gout138_clear = fxor2(gin138_clear, 4);
    std::cerr << "\rINV139   ";
    long gout139_clear = 1 - ct_x8_clear;

    std::cerr << "\rLUT140   ";
    auto gin140_clear = 2 * ct_y1_clear + ct_x14_clear;
    auto gout140_clear = fand2(gin140_clear, 4);
    std::cerr << "\rLUT141   ";
    auto gin141_clear = 2 * ct_y8_clear + ct_x4_clear;
    auto gout141_clear = fand2(gin141_clear, 4);
    std::cerr << "\rINV142   ";
    long gout142_clear = 1 - ct_y5_clear;

    std::cerr << "\rLUT143   ";
    auto gin143_clear = 2 * ct_y3_clear + ct_x2_clear;
    auto gout143_clear = fand2(gin143_clear, 4);
    std::cerr << "\rLUT144   ";
    auto gin144_clear = 2 * gout8_clear + gout137_clear;
    auto gout144_clear = fxnor2(gin144_clear, 4);
    std::cerr << "\rLUT145   ";
    auto gin145_clear = 2 * ct_y8_clear + ct_x7_clear;
    auto gout145_clear = fand2(gin145_clear, 4);
    std::cerr << "\rLUT146   ";
    auto gin146_clear = 2 * ct_y6_clear + ct_x7_clear;
    auto gout146_clear = fand2(gin146_clear, 4);
    std::cerr << "\rLUT147   ";
    auto gin147_clear = 2 * ct_y8_clear + ct_x0_clear;
    auto gout147_clear = fand2(gin147_clear, 4);
    std::cerr << "\rLUT148   ";
    auto gin148_clear = 2 * ct_y13_clear + ct_x0_clear;
    auto gout148_clear = fand2(gin148_clear, 4);
    std::cerr << "\rLUT149   ";
    auto gin149_clear = 2 * ct_y0_clear + ct_x2_clear;
    auto gout149_clear = fand2(gin149_clear, 4);
    std::cerr << "\rLUT150   ";
    auto gin150_clear = 2 * gout41_clear + gout46_clear;
    auto gout150_clear = fand2(gin150_clear, 4);
    std::cerr << "\rLUT151   ";
    auto gin151_clear = 2 * gout145_clear + gout50_clear;
    auto gout151_clear = fxnor2(gin151_clear, 4);
    std::cerr << "\rLUT152   ";
    auto gin152_clear = 2 * ct_y1_clear + ct_x7_clear;
    auto gout152_clear = fand2(gin152_clear, 4);
    std::cerr << "\rLUT153   ";
    auto gin153_clear = 2 * ct_y3_clear + ct_x9_clear;
    auto gout153_clear = fand2(gin153_clear, 4);
    std::cerr << "\rLUT154   ";
    auto gin154_clear = 2 * gout119_clear + gout93_clear;
    auto gout154_clear = fxor2(gin154_clear, 4);
    std::cerr << "\rLUT155   ";
    auto gin155_clear = 2 * gout72_clear + gout56_clear;
    auto gout155_clear = fxor2(gin155_clear, 4);
    std::cerr << "\rLUT156   ";
    auto gin156_clear = 2 * gout153_clear + gout75_clear;
    auto gout156_clear = fnand2(gin156_clear, 4);
    std::cerr << "\rLUT157   ";
    auto gin157_clear = 2 * ct_y5_clear + ct_x10_clear;
    auto gout157_clear = fand2(gin157_clear, 4);
    std::cerr << "\rLUT158   ";
    auto gin158_clear = 2 * ct_y1_clear + ct_x12_clear;
    auto gout158_clear = fand2(gin158_clear, 4);
    std::cerr << "\rLUT159   ";
    auto gin159_clear = 2 * ct_y1_clear + ct_x13_clear;
    auto gout159_clear = fand2(gin159_clear, 4);
    std::cerr << "\rLUT160   ";
    auto gin160_clear = 2 * gout23_clear + gout124_clear;
    auto gout160_clear = fnand2(gin160_clear, 4);
    std::cerr << "\rLUT161   ";
    auto gin161_clear = 2 * gout72_clear + gout56_clear;
    auto gout161_clear = fnand2(gin161_clear, 4);
    std::cerr << "\rLUT162   ";
    auto gin162_clear = 2 * gout88_clear + gout12_clear;
    auto gout162_clear = fxor2(gin162_clear, 4);
    std::cerr << "\rINV163   ";
    long gout163_clear = 1 - ct_x13_clear;

    std::cerr << "\rLUT164   ";
    auto gin164_clear = 2 * ct_y4_clear + ct_x1_clear;
    auto gout164_clear = fand2(gin164_clear, 4);
    std::cerr << "\rLUT165   ";
    auto gin165_clear = 2 * ct_y7_clear + ct_x7_clear;
    auto gout165_clear = fnand2(gin165_clear, 4);
    std::cerr << "\rLUT166   ";
    auto gin166_clear = 2 * gout153_clear + gout75_clear;
    auto gout166_clear = fxor2(gin166_clear, 4);
    std::cerr << "\rINV167   ";
    long gout167_clear = 1 - ct_x4_clear;

    std::cerr << "\rLUT168   ";
    auto gin168_clear = 2 * ct_y11_clear + ct_x0_clear;
    auto gout168_clear = fand2(gin168_clear, 4);
    std::cerr << "\rLUT169   ";
    auto gin169_clear = 2 * ct_y9_clear + ct_x5_clear;
    auto gout169_clear = fand2(gin169_clear, 4);
    std::cerr << "\rLUT170   ";
    auto gin170_clear = 2 * gout99_clear + gout61_clear;
    auto gout170_clear = fnand2(gin170_clear, 4);
    std::cerr << "\rINV171   ";
    long gout171_clear = 1 - gout115_clear;

    std::cerr << "\rLUT172   ";
    auto gin172_clear = 2 * ct_y12_clear + ct_x1_clear;
    auto gout172_clear = fnand2(gin172_clear, 4);
    std::cerr << "\rLUT173   ";
    auto gin173_clear = 2 * ct_y0_clear + ct_x4_clear;
    auto gout173_clear = fnand2(gin173_clear, 4);
    std::cerr << "\rLUT174   ";
    auto gin174_clear = 2 * gout22_clear + gout10_clear;
    auto gout174_clear = fxor2(gin174_clear, 4);
    std::cerr << "\rLUT175   ";
    auto gin175_clear = 2 * gout123_clear + gout66_clear;
    auto gout175_clear = fnand2(gin175_clear, 4);
    std::cerr << "\rLUT176   ";
    auto gin176_clear = 2 * gout25_clear + gout74_clear;
    auto gout176_clear = fnand2(gin176_clear, 4);
    std::cerr << "\rLUT177   ";
    auto gin177_clear = 2 * gout64_clear + gout106_clear;
    auto gout177_clear = fnand2(gin177_clear, 4);
    std::cerr << "\rLUT178   ";
    auto gin178_clear = 2 * gout123_clear + gout66_clear;
    auto gout178_clear = fxor2(gin178_clear, 4);
    std::cerr << "\rLUT179   ";
    auto gin179_clear = 2 * ct_y9_clear + ct_x4_clear;
    auto gout179_clear = fand2(gin179_clear, 4);
    std::cerr << "\rLUT180   ";
    auto gin180_clear = 2 * gout60_clear + gout99_clear;
    auto gout180_clear = fand2(gin180_clear, 4);
    std::cerr << "\rLUT181   ";
    auto gin181_clear = 2 * ct_y10_clear + ct_x1_clear;
    auto gout181_clear = fand2(gin181_clear, 4);
    std::cerr << "\rINV182   ";
    long gout182_clear = 1 - ct_x12_clear;

    std::cerr << "\rLUT183   ";
    auto gin183_clear = 2 * ct_y4_clear + ct_x6_clear;
    auto gout183_clear = fand2(gin183_clear, 4);
    std::cerr << "\rLUT184   ";
    auto gin184_clear = 2 * gout41_clear + gout25_clear;
    auto gout184_clear = fxor2(gin184_clear, 4);
    std::cerr << "\rLUT185   ";
    auto gin185_clear = 2 * ct_y12_clear + ct_x3_clear;
    auto gout185_clear = fand2(gin185_clear, 4);
    std::cerr << "\rLUT186   ";
    auto gin186_clear = 2 * gout70_clear + gout121_clear;
    auto gout186_clear = fxnor2(gin186_clear, 4);
    std::cerr << "\rLUT187   ";
    auto gin187_clear = 2 * ct_y12_clear + ct_x0_clear;
    auto gout187_clear = fand2(gin187_clear, 4);
    std::cerr << "\rLUT188   ";
    auto gin188_clear = 2 * ct_y5_clear + ct_x1_clear;
    auto gout188_clear = fand2(gin188_clear, 4);
    std::cerr << "\rLUT189   ";
    auto gin189_clear = 2 * gout143_clear + gout89_clear;
    auto gout189_clear = fxor2(gin189_clear, 4);
    std::cerr << "\rLUT190   ";
    auto gin190_clear = 2 * gout129_clear + gout109_clear;
    auto gout190_clear = fxnor2(gin190_clear, 4);
    std::cerr << "\rLUT191   ";
    auto gin191_clear = 2 * ct_y1_clear + ct_x5_clear;
    auto gout191_clear = fand2(gin191_clear, 4);
    std::cerr << "\rINV192   ";
    long gout192_clear = 1 - ct_x9_clear;

    std::cerr << "\rLUT193   ";
    auto gin193_clear = 2 * ct_y1_clear + ct_x3_clear;
    auto gout193_clear = fand2(gin193_clear, 4);
    std::cerr << "\rLUT194   ";
    auto gin194_clear = 2 * ct_y3_clear + ct_x5_clear;
    auto gout194_clear = fand2(gin194_clear, 4);
    std::cerr << "\rLUT195   ";
    auto gin195_clear = 2 * ct_y2_clear + ct_x7_clear;
    auto gout195_clear = fand2(gin195_clear, 4);
    std::cerr << "\rLUT196   ";
    auto gin196_clear = 2 * ct_y8_clear + ct_x5_clear;
    auto gout196_clear = fand2(gin196_clear, 4);
    std::cerr << "\rLUT197   ";
    auto gin197_clear = 2 * gout54_clear + gout178_clear;
    auto gout197_clear = fxor2(gin197_clear, 4);
    std::cerr << "\rLUT198   ";
    auto gin198_clear = 2 * gout7_clear + gout195_clear;
    auto gout198_clear = fnand2(gin198_clear, 4);
    std::cerr << "\rLUT199   ";
    auto gin199_clear = 2 * ct_y5_clear + ct_x6_clear;
    auto gout199_clear = fand2(gin199_clear, 4);
    std::cerr << "\rLUT200   ";
    auto gin200_clear = 2 * gout115_clear + gout86_clear;
    auto gout200_clear = fnand2(gin200_clear, 4);
    std::cerr << "\rLUT201   ";
    auto gin201_clear = 2 * gout105_clear + gout109_clear;
    auto gout201_clear = fnand2(gin201_clear, 4);
    std::cerr << "\rLUT202   ";
    auto gin202_clear = 2 * gout26_clear + gout189_clear;
    auto gout202_clear = fnand2(gin202_clear, 4);
    std::cerr << "\rLUT203   ";
    auto gin203_clear = 2 * ct_y0_clear + ct_x9_clear;
    auto gout203_clear = fnand2(gin203_clear, 4);
    std::cerr << "\rLUT204   ";
    auto gin204_clear = 2 * gout55_clear + (1 - gout123_clear);
    auto gout204_clear = for2(gin204_clear, 4);
    std::cerr << "\rINV205   ";
    long gout205_clear = 1 - ct_y2_clear;

    std::cerr << "\rLUT206   ";
    auto gin206_clear = 2 * gout194_clear + gout1_clear;
    auto gout206_clear = fxor2(gin206_clear, 4);
    std::cerr << "\rINV207   ";
    long gout207_clear = 1 - ct_op0_clear;

    std::cerr << "\rLUT208   ";
    auto gin208_clear = 2 * ct_y4_clear + ct_x4_clear;
    auto gout208_clear = fand2(gin208_clear, 4);
    std::cerr << "\rLUT209   ";
    auto gin209_clear = 2 * ct_y0_clear + ct_x5_clear;
    auto gout209_clear = fnand2(gin209_clear, 4);
    std::cerr << "\rLUT210   ";
    auto gin210_clear = 2 * gout114_clear + gout98_clear;
    auto gout210_clear = fxor2(gin210_clear, 4);
    std::cerr << "\rLUT211   ";
    auto gin211_clear = 2 * gout114_clear + gout98_clear;
    auto gout211_clear = fnand2(gin211_clear, 4);
    std::cerr << "\rLUT212   ";
    auto gin212_clear = 2 * ct_y11_clear + ct_x3_clear;
    auto gout212_clear = fand2(gin212_clear, 4);
    std::cerr << "\rLUT213   ";
    auto gin213_clear = 2 * gout173_clear + (1 - gout128_clear);
    auto gout213_clear = for2(gin213_clear, 4);
    std::cerr << "\rLUT214   ";
    auto gin214_clear = 2 * ct_y2_clear + ct_x13_clear;
    auto gout214_clear = fand2(gin214_clear, 4);
    std::cerr << "\rLUT215   ";
    auto gin215_clear = 2 * gout150_clear + gout155_clear;
    auto gout215_clear = fnand2(gin215_clear, 4);
    std::cerr << "\rLUT216   ";
    auto gin216_clear = 2 * gout59_clear + gout162_clear;
    auto gout216_clear = fxor2(gin216_clear, 4);
    std::cerr << "\rLUT217   ";
    auto gin217_clear = 2 * gout15_clear + gout166_clear;
    auto gout217_clear = fxor2(gin217_clear, 4);
    std::cerr << "\rLUT218   ";
    auto gin218_clear = 2 * gout147_clear + gout122_clear;
    auto gout218_clear = fxor2(gin218_clear, 4);
    std::cerr << "\rLUT219   ";
    auto gin219_clear = 2 * gout130_clear + gout174_clear;
    auto gout219_clear = fxor2(gin219_clear, 4);
    std::cerr << "\rLUT220   ";
    auto gin220_clear = 2 * gout209_clear + (1 - gout2_clear);
    auto gout220_clear = for2(gin220_clear, 4);
    std::cerr << "\rLUT221   ";
    auto gin221_clear = 2 * gout78_clear + gout118_clear;
    auto gout221_clear = fxnor2(gin221_clear, 4);
    std::cerr << "\rLUT222   ";
    auto gin222_clear = 2 * gout119_clear + gout93_clear;
    auto gout222_clear = fnand2(gin222_clear, 4);
    std::cerr << "\rLUT223   ";
    auto gin223_clear = 2 * gout14_clear + gout185_clear;
    auto gout223_clear = fxnor2(gin223_clear, 4);
    std::cerr << "\rLUT224   ";
    auto gin224_clear = 2 * gout128_clear + gout18_clear;
    auto gout224_clear = fxor2(gin224_clear, 4);
    std::cerr << "\rLUT225   ";
    auto gin225_clear = 2 * gout55_clear + gout65_clear;
    auto gout225_clear = fxnor2(gin225_clear, 4);
    std::cerr << "\rLUT226   ";
    auto gin226_clear = 2 * gout181_clear + gout108_clear;
    auto gout226_clear = fxor2(gin226_clear, 4);
    std::cerr << "\rLUT227   ";
    auto gin227_clear = 2 * gout95_clear + (1 - gout11_clear);
    auto gout227_clear = fand2(gin227_clear, 4);
    std::cerr << "\rLUT228   ";
    auto gin228_clear = 2 * gout91_clear + gout134_clear;
    auto gout228_clear = fnand2(gin228_clear, 4);
    std::cerr << "\rINV229   ";
    long gout229_clear = 1 - gout187_clear;

    std::cerr << "\rLUT230   ";
    auto gin230_clear = 2 * gout88_clear + gout12_clear;
    auto gout230_clear = fnand2(gin230_clear, 4);
    std::cerr << "\rLUT231   ";
    auto gin231_clear = 2 * gout21_clear + gout80_clear;
    auto gout231_clear = fxnor2(gin231_clear, 4);
    std::cerr << "\rLUT232   ";
    auto gin232_clear = 2 * gout19_clear + gout68_clear;
    auto gout232_clear = fxnor2(gin232_clear, 4);
    std::cerr << "\rINV233   ";
    long gout233_clear = 1 - gout131_clear;

    std::cerr << "\rLUT234   ";
    auto gin234_clear = 2 * gout143_clear + gout89_clear;
    auto gout234_clear = fnand2(gin234_clear, 4);
    std::cerr << "\rLUT235   ";
    auto gin235_clear = 2 * gout150_clear + gout155_clear;
    auto gout235_clear = fxor2(gin235_clear, 4);
    std::cerr << "\rLUT236   ";
    auto gin236_clear = 2 * gout91_clear + gout134_clear;
    auto gout236_clear = fxor2(gin236_clear, 4);
    std::cerr << "\rLUT237   ";
    auto gin237_clear = 2 * gout152_clear + gout206_clear;
    auto gout237_clear = fxor2(gin237_clear, 4);
    std::cerr << "\rLUT238   ";
    auto gin238_clear = 2 * gout165_clear + gout13_clear;
    auto gout238_clear = fxnor2(gin238_clear, 4);
    std::cerr << "\rLUT239   ";
    auto gin239_clear = 2 * gout168_clear + gout226_clear;
    auto gout239_clear = fxor2(gin239_clear, 4);
    std::cerr << "\rLUT240   ";
    auto gin240_clear = 2 * gout191_clear + gout85_clear;
    auto gout240_clear = fnand2(gin240_clear, 4);
    std::cerr << "\rLUT241   ";
    auto gin241_clear = 2 * gout57_clear + gout210_clear;
    auto gout241_clear = fxor2(gin241_clear, 4);
    std::cerr << "\rLUT242   ";
    auto gin242_clear = 2 * gout7_clear + gout195_clear;
    auto gout242_clear = fxor2(gin242_clear, 4);
    std::cerr << "\rLUT243   ";
    auto gin243_clear = 2 * gout57_clear + gout210_clear;
    auto gout243_clear = fnand2(gin243_clear, 4);
    std::cerr << "\rLUT244   ";
    auto gin244_clear = 2 * gout194_clear + gout1_clear;
    auto gout244_clear = fnand2(gin244_clear, 4);
    std::cerr << "\rLUT245   ";
    auto gin245_clear = 2 * gout26_clear + gout189_clear;
    auto gout245_clear = fxor2(gin245_clear, 4);
    std::cerr << "\rINV246   ";
    long gout246_clear = 1 - gout95_clear;

    std::cerr << "\rLUT247   ";
    auto gin247_clear = 2 * gout191_clear + gout85_clear;
    auto gout247_clear = fxor2(gin247_clear, 4);
    std::cerr << "\rLUT248   ";
    auto gin248_clear = 2 * gout11_clear + gout132_clear;
    auto gout248_clear = fxnor2(gin248_clear, 4);
    std::cerr << "\rLUT249   ";
    auto gin249_clear = 2 * gout39_clear + gout181_clear;
    auto gout249_clear = fand2(gin249_clear, 4);
    std::cerr << "\rLUT250   ";
    auto gin250_clear = 2 * gout147_clear + gout122_clear;
    auto gout250_clear = fnand2(gin250_clear, 4);
    std::cerr << "\rLUT251   ";
    auto gin251_clear = 2 * gout92_clear + gout135_clear;
    auto gout251_clear = fxnor2(gin251_clear, 4);
    std::cerr << "\rLUT252   ";
    auto gin252_clear = 2 * gout141_clear + gout154_clear;
    auto gout252_clear = fnand2(gin252_clear, 4);
    std::cerr << "\rLUT253   ";
    auto gin253_clear = 2 * gout128_clear + gout18_clear;
    auto gout253_clear = fnand2(gin253_clear, 4);
    std::cerr << "\rLUT254   ";
    auto gin254_clear = 2 * gout159_clear + gout232_clear;
    auto gout254_clear = fnand2(gin254_clear, 4);
    std::cerr << "\rLUT255   ";
    auto gin255_clear = 2 * gout249_clear + gout239_clear;
    auto gout255_clear = fand2(gin255_clear, 4);
    std::cerr << "\rLUT256   ";
    auto gin256_clear = 2 * gout177_clear + gout160_clear;
    auto gout256_clear = fnand2(gin256_clear, 4);
    std::cerr << "\rLUT257   ";
    auto gin257_clear = 2 * gout23_clear + gout124_clear;
    auto gout257_clear = fxor2(gin257_clear, 4);
    std::cerr << "\rLUT258   ";
    auto gin258_clear = 2 * gout146_clear + gout24_clear;
    auto gout258_clear = fnand2(gin258_clear, 4);
    std::cerr << "\rLUT259   ";
    auto gin259_clear = 2 * gout181_clear + gout108_clear;
    auto gout259_clear = fnand2(gin259_clear, 4);
    std::cerr << "\rLUT260   ";
    auto gin260_clear = 2 * gout48_clear + gout69_clear;
    auto gout260_clear = fand2(gin260_clear, 4);
    std::cerr << "\rLUT261   ";
    auto gin261_clear = 2 * gout159_clear + gout232_clear;
    auto gout261_clear = fxor2(gin261_clear, 4);
    std::cerr << "\rLUT262   ";
    auto gin262_clear = 2 * gout116_clear + gout105_clear;
    auto gout262_clear = fxor2(gin262_clear, 4);
    std::cerr << "\rLUT263   ";
    auto gin263_clear = 2 * gout59_clear + gout162_clear;
    auto gout263_clear = fnand2(gin263_clear, 4);
    std::cerr << "\rLUT264   ";
    auto gin264_clear = 2 * gout77_clear + gout97_clear;
    auto gout264_clear = fxor2(gin264_clear, 4);
    std::cerr << "\rLUT265   ";
    auto gin265_clear = 2 * gout172_clear + gout148_clear;
    auto gout265_clear = fxnor2(gin265_clear, 4);
    std::cerr << "\rLUT266   ";
    auto gin266_clear = 2 * gout130_clear + gout174_clear;
    auto gout266_clear = fnand2(gin266_clear, 4);
    std::cerr << "\rLUT267   ";
    auto gin267_clear = 2 * gout31_clear + gout236_clear;
    auto gout267_clear = fxor2(gin267_clear, 4);
    std::cerr << "\rLUT268   ";
    auto gin268_clear = 2 * gout31_clear + gout236_clear;
    auto gout268_clear = fnand2(gin268_clear, 4);
    std::cerr << "\rLUT269   ";
    auto gin269_clear = 2 * gout209_clear + gout164_clear;
    auto gout269_clear = fxnor2(gin269_clear, 4);
    std::cerr << "\rLUT270   ";
    auto gin270_clear = 2 * gout86_clear + gout94_clear;
    auto gout270_clear = fxnor2(gin270_clear, 4);
    std::cerr << "\rLUT271   ";
    auto gin271_clear = 2 * gout73_clear + gout231_clear;
    auto gout271_clear = fnand2(gin271_clear, 4);
    std::cerr << "\rLUT272   ";
    auto gin272_clear = 2 * gout9_clear + gout224_clear;
    auto gout272_clear = fnand2(gin272_clear, 4);
    std::cerr << "\rLUT273   ";
    auto gin273_clear = 2 * gout36_clear + gout242_clear;
    auto gout273_clear = fxor2(gin273_clear, 4);
    std::cerr << "\rLUT274   ";
    auto gin274_clear = 2 * gout152_clear + gout206_clear;
    auto gout274_clear = fnand2(gin274_clear, 4);
    std::cerr << "\rLUT275   ";
    auto gin275_clear = 2 * gout73_clear + gout231_clear;
    auto gout275_clear = fxor2(gin275_clear, 4);
    std::cerr << "\rLUT276   ";
    auto gin276_clear = 2 * gout82_clear + gout169_clear;
    auto gout276_clear = fxnor2(gin276_clear, 4);
    std::cerr << "\rLUT277   ";
    auto gin277_clear = 2 * gout9_clear + gout224_clear;
    auto gout277_clear = fxor2(gin277_clear, 4);
    std::cerr << "\rLUT278   ";
    auto gin278_clear = 2 * gout149_clear + gout183_clear;
    auto gout278_clear = fnand2(gin278_clear, 4);
    std::cerr << "\rLUT279   ";
    auto gin279_clear = 2 * gout228_clear + gout268_clear;
    auto gout279_clear = fnand2(gin279_clear, 4);
    std::cerr << "\rLUT280   ";
    auto gin280_clear = 2 * (1 - gout132_clear) + gout92_clear;
    auto gout280_clear = for2(gin280_clear, 4);
    std::cerr << "\rLUT281   ";
    auto gin281_clear = 2 * gout42_clear + gout101_clear;
    auto gout281_clear = fnand2(gin281_clear, 4);
    std::cerr << "\rLUT282   ";
    auto gin282_clear = 2 * gout188_clear + gout225_clear;
    auto gout282_clear = fxor2(gin282_clear, 4);
    std::cerr << "\rLUT283   ";
    auto gin283_clear = 2 * gout157_clear + gout103_clear;
    auto gout283_clear = fxnor2(gin283_clear, 4);
    std::cerr << "\rLUT284   ";
    auto gin284_clear = 2 * gout151_clear + gout223_clear;
    auto gout284_clear = fxnor2(gin284_clear, 4);
    std::cerr << "\rLUT285   ";
    auto gin285_clear = 2 * gout158_clear + gout262_clear;
    auto gout285_clear = fxor2(gin285_clear, 4);
    std::cerr << "\rINV286   ";
    long gout286_clear = 1 - gout249_clear;

    std::cerr << "\rLUT287   ";
    auto gin287_clear = 2 * gout42_clear + gout101_clear;
    auto gout287_clear = fxor2(gin287_clear, 4);
    std::cerr << "\rLUT288   ";
    auto gin288_clear = 2 * gout2_clear + gout110_clear;
    auto gout288_clear = fnand2(gin288_clear, 4);
    std::cerr << "\rLUT289   ";
    auto gin289_clear = 2 * gout104_clear + gout146_clear;
    auto gout289_clear = fxor2(gin289_clear, 4);
    std::cerr << "\rLUT290   ";
    auto gin290_clear = 2 * gout179_clear + gout113_clear;
    auto gout290_clear = fnand2(gin290_clear, 4);
    std::cerr << "\rLUT291   ";
    auto gin291_clear = 2 * gout173_clear + gout90_clear;
    auto gout291_clear = fxnor2(gin291_clear, 4);
    std::cerr << "\rLUT292   ";
    auto gin292_clear = 2 * gout2_clear + gout110_clear;
    auto gout292_clear = fxor2(gin292_clear, 4);
    std::cerr << "\rLUT293   ";
    auto gin293_clear = 2 * gout104_clear + gout146_clear;
    auto gout293_clear = fnand2(gin293_clear, 4);
    std::cerr << "\rLUT294   ";
    auto gin294_clear = 2 * gout158_clear + gout262_clear;
    auto gout294_clear = fnand2(gin294_clear, 4);
    std::cerr << "\rLUT295   ";
    auto gin295_clear = 2 * gout116_clear + gout105_clear;
    auto gout295_clear = fnand2(gin295_clear, 4);
    std::cerr << "\rLUT296   ";
    auto gin296_clear = 2 * gout112_clear + gout264_clear;
    auto gout296_clear = fxor2(gin296_clear, 4);
    std::cerr << "\rLUT297   ";
    auto gin297_clear = 2 * gout112_clear + gout264_clear;
    auto gout297_clear = fnand2(gin297_clear, 4);
    std::cerr << "\rLUT298   ";
    auto gin298_clear = 2 * gout199_clear + gout270_clear;
    auto gout298_clear = fxor2(gin298_clear, 4);
    std::cerr << "\rLUT299   ";
    auto gin299_clear = 2 * gout95_clear + gout208_clear;
    auto gout299_clear = fand2(gin299_clear, 4);
    std::cerr << "\rLUT300   ";
    auto gin300_clear = 2 * gout172_clear + (1 - gout67_clear);
    auto gout300_clear = for2(gin300_clear, 4);
    std::cerr << "\rLUT301   ";
    auto gin301_clear = 2 * gout4_clear + gout179_clear;
    auto gout301_clear = fnand2(gin301_clear, 4);
    std::cerr << "\rLUT302   ";
    auto gin302_clear = 2 * gout96_clear + gout125_clear;
    auto gout302_clear = fxnor2(gin302_clear, 4);
    std::cerr << "\rLUT303   ";
    auto gin303_clear = 2 * gout100_clear + gout292_clear;
    auto gout303_clear = fnand2(gin303_clear, 4);
    std::cerr << "\rINV304   ";
    long gout304_clear = 1 - gout149_clear;

    std::cerr << "\rLUT305   ";
    auto gin305_clear = 2 * gout45_clear + gout238_clear;
    auto gout305_clear = fxor2(gin305_clear, 4);
    std::cerr << "\rLUT306   ";
    auto gin306_clear = 2 * gout136_clear + gout35_clear;
    auto gout306_clear = fand2(gin306_clear, 4);
    std::cerr << "\rLUT307   ";
    auto gin307_clear = 2 * gout295_clear + gout294_clear;
    auto gout307_clear = fnand2(gin307_clear, 4);
    std::cerr << "\rLUT308   ";
    auto gin308_clear = 2 * gout45_clear + gout238_clear;
    auto gout308_clear = fnand2(gin308_clear, 4);
    std::cerr << "\rLUT309   ";
    auto gin309_clear = 2 * gout4_clear + gout179_clear;
    auto gout309_clear = fxor2(gin309_clear, 4);
    std::cerr << "\rLUT310   ";
    auto gin310_clear = 2 * gout100_clear + gout292_clear;
    auto gout310_clear = fxor2(gin310_clear, 4);
    std::cerr << "\rLUT311   ";
    auto gin311_clear = 2 * gout304_clear + gout248_clear;
    auto gout311_clear = fxnor2(gin311_clear, 4);
    std::cerr << "\rLUT312   ";
    auto gin312_clear = 2 * gout46_clear + gout143_clear;
    auto gout312_clear = fnand2(gin312_clear, 4);
    std::cerr << "\rLUT313   ";
    auto gin313_clear = 2 * gout149_clear + gout248_clear;
    auto gout313_clear = fand2(gin313_clear, 4);
    std::cerr << "\rLUT314   ";
    auto gin314_clear = 2 * gout113_clear + gout284_clear;
    auto gout314_clear = fxnor2(gin314_clear, 4);
    std::cerr << "\rLUT315   ";
    auto gin315_clear = 2 * gout54_clear + gout178_clear;
    auto gout315_clear = fnand2(gin315_clear, 4);
    std::cerr << "\rLUT316   ";
    auto gin316_clear = 2 * gout140_clear + gout43_clear;
    auto gout316_clear = fxnor2(gin316_clear, 4);
    std::cerr << "\rLUT317   ";
    auto gin317_clear = 2 * gout168_clear + gout226_clear;
    auto gout317_clear = fnand2(gin317_clear, 4);
    std::cerr << "\rLUT318   ";
    auto gin318_clear = 2 * gout244_clear + gout274_clear;
    auto gout318_clear = fnand2(gin318_clear, 4);
    std::cerr << "\rLUT319   ";
    auto gin319_clear = 2 * gout201_clear + gout254_clear;
    auto gout319_clear = fand2(gin319_clear, 4);
    std::cerr << "\rLUT320   ";
    auto gin320_clear = 2 * gout205_clear + gout131_clear;
    auto gout320_clear = fand2(gin320_clear, 4);
    std::cerr << "\rLUT321   ";
    auto gin321_clear = 2 * gout288_clear + gout303_clear;
    auto gout321_clear = fnand2(gin321_clear, 4);
    std::cerr << "\rLUT322   ";
    auto gin322_clear = 2 * gout107_clear + gout297_clear;
    auto gout322_clear = fnand2(gin322_clear, 4);
    std::cerr << "\rLUT323   ";
    auto gin323_clear = 2 * gout187_clear + gout96_clear;
    auto gout323_clear = fand2(gin323_clear, 4);
    std::cerr << "\rLUT324   ";
    auto gin324_clear = 2 * gout126_clear + gout240_clear;
    auto gout324_clear = fnand2(gin324_clear, 4);
    std::cerr << "\rLUT325   ";
    auto gin325_clear = 2 * gout321_clear + gout305_clear;
    auto gout325_clear = fnand2(gin325_clear, 4);
    std::cerr << "\rLUT326   ";
    auto gin326_clear = 2 * gout258_clear + gout308_clear;
    auto gout326_clear = fand2(gin326_clear, 4);
    std::cerr << "\rLUT327   ";
    auto gin327_clear = 2 * gout44_clear + gout269_clear;
    auto gout327_clear = fnand2(gin327_clear, 4);
    std::cerr << "\rLUT328   ";
    auto gin328_clear = 2 * gout188_clear + gout225_clear;
    auto gout328_clear = fnand2(gin328_clear, 4);
    std::cerr << "\rLUT329   ";
    auto gin329_clear = 2 * gout183_clear + gout16_clear;
    auto gout329_clear = fxnor2(gin329_clear, 4);
    std::cerr << "\rLUT330   ";
    auto gin330_clear = 2 * gout200_clear + gout271_clear;
    auto gout330_clear = fnand2(gin330_clear, 4);
    std::cerr << "\rLUT331   ";
    auto gin331_clear = 2 * gout196_clear + gout289_clear;
    auto gout331_clear = fxor2(gin331_clear, 4);
    std::cerr << "\rLUT332   ";
    auto gin332_clear = 2 * gout141_clear + gout154_clear;
    auto gout332_clear = fxor2(gin332_clear, 4);
    std::cerr << "\rLUT333   ";
    auto gin333_clear = 2 * gout15_clear + gout166_clear;
    auto gout333_clear = fnand2(gin333_clear, 4);
    std::cerr << "\rLUT334   ";
    auto gin334_clear = 2 * gout321_clear + gout305_clear;
    auto gout334_clear = fxor2(gin334_clear, 4);
    std::cerr << "\rLUT335   ";
    auto gin335_clear = 2 * gout207_clear + gout306_clear;
    auto gout335_clear = fand2(gin335_clear, 4);
    std::cerr << "\rLUT336   ";
    auto gin336_clear = 2 * gout230_clear + gout263_clear;
    auto gout336_clear = fnand2(gin336_clear, 4);
    std::cerr << "\rLUT337   ";
    auto gin337_clear = 2 * gout208_clear + gout20_clear;
    auto gout337_clear = fxnor2(gin337_clear, 4);
    std::cerr << "\rLUT338   ";
    auto gin338_clear = 2 * gout44_clear + gout269_clear;
    auto gout338_clear = fxor2(gin338_clear, 4);
    std::cerr << "\rLUT339   ";
    auto gin339_clear = 2 * gout29_clear + gout302_clear;
    auto gout339_clear = fnand2(gin339_clear, 4);
    std::cerr << "\rLUT340   ";
    auto gin340_clear = 2 * gout84_clear + gout309_clear;
    auto gout340_clear = fnand2(gin340_clear, 4);
    std::cerr << "\rLUT341   ";
    auto gin341_clear = 2 * gout279_clear + gout237_clear;
    auto gout341_clear = fxnor2(gin341_clear, 4);
    std::cerr << "\rLUT342   ";
    auto gin342_clear = 2 * gout199_clear + gout270_clear;
    auto gout342_clear = fnand2(gin342_clear, 4);
    std::cerr << "\rLUT343   ";
    auto gin343_clear = 2 * gout176_clear + gout327_clear;
    auto gout343_clear = fnand2(gin343_clear, 4);
    std::cerr << "\rLUT344   ";
    auto gin344_clear = 2 * gout279_clear + gout237_clear;
    auto gout344_clear = fand2(gin344_clear, 4);
    std::cerr << "\rLUT345   ";
    auto gin345_clear = 2 * gout330_clear + gout218_clear;
    auto gout345_clear = fxor2(gin345_clear, 4);
    std::cerr << "\rLUT346   ";
    auto gin346_clear = 2 * gout84_clear + gout309_clear;
    auto gout346_clear = fxor2(gin346_clear, 4);
    std::cerr << "\rLUT347   ";
    auto gin347_clear = 2 * gout74_clear + gout203_clear;
    auto gout347_clear = fxnor2(gin347_clear, 4);
    std::cerr << "\rLUT348   ";
    auto gin348_clear = 2 * gout102_clear + gout281_clear;
    auto gout348_clear = fnand2(gin348_clear, 4);
    std::cerr << "\rLUT349   ";
    auto gin349_clear = 2 * gout227_clear + gout311_clear;
    auto gout349_clear = fand2(gin349_clear, 4);
    std::cerr << "\rLUT350   ";
    auto gin350_clear = 2 * gout212_clear + gout276_clear;
    auto gout350_clear = fnand2(gin350_clear, 4);
    std::cerr << "\rLUT351   ";
    auto gin351_clear = 2 * gout259_clear + gout317_clear;
    auto gout351_clear = fnand2(gin351_clear, 4);
    std::cerr << "\rLUT352   ";
    auto gin352_clear = 2 * gout6_clear + gout329_clear;
    auto gout352_clear = fnand2(gin352_clear, 4);
    std::cerr << "\rLUT353   ";
    auto gin353_clear = 2 * gout214_clear + gout190_clear;
    auto gout353_clear = fxnor2(gin353_clear, 4);
    std::cerr << "\rLUT354   ";
    auto gin354_clear = 2 * gout335_clear + gout28_clear;
    auto gout354_clear = for2(gin354_clear, 4);
    std::cerr << "\rLUT355   ";
    auto gin355_clear = 2 * gout335_clear + gout95_clear;
    auto gout355_clear = fnand2(gin355_clear, 4);
    std::cerr << "\rLUT356   ";
    auto gin356_clear = 2 * gout253_clear + gout272_clear;
    auto gout356_clear = fnand2(gin356_clear, 4);
    std::cerr << "\rLUT357   ";
    auto gin357_clear = 2 * gout30_clear + gout266_clear;
    auto gout357_clear = fnand2(gin357_clear, 4);
    std::cerr << "\rLUT358   ";
    auto gin358_clear = 2 * gout6_clear + gout329_clear;
    auto gout358_clear = fxor2(gin358_clear, 4);
    std::cerr << "\rLUT359   ";
    auto gin359_clear = 2 * gout356_clear + gout331_clear;
    auto gout359_clear = fxor2(gin359_clear, 4);
    std::cerr << "\rLUT360   ";
    auto gin360_clear = 2 * gout170_clear + gout250_clear;
    auto gout360_clear = fnand2(gin360_clear, 4);
    std::cerr << "\rLUT361   ";
    auto gin361_clear = 2 * gout222_clear + gout252_clear;
    auto gout361_clear = fnand2(gin361_clear, 4);
    std::cerr << "\rLUT362   ";
    auto gin362_clear = 2 * gout111_clear + gout342_clear;
    auto gout362_clear = fnand2(gin362_clear, 4);
    std::cerr << "\rLUT363   ";
    auto gin363_clear = 2 * gout115_clear + gout235_clear;
    auto gout363_clear = fnand2(gin363_clear, 4);
    std::cerr << "\rLUT364   ";
    auto gin364_clear = 2 * gout357_clear + gout346_clear;
    auto gout364_clear = fxnor2(gin364_clear, 4);
    std::cerr << "\rLUT365   ";
    auto gin365_clear = 2 * gout81_clear + gout337_clear;
    auto gout365_clear = fxor2(gin365_clear, 4);
    std::cerr << "\rLUT366   ";
    auto gin366_clear = 2 * gout171_clear + gout235_clear;
    auto gout366_clear = fxnor2(gin366_clear, 4);
    std::cerr << "\rLUT367   ";
    auto gin367_clear = 2 * gout234_clear + gout202_clear;
    auto gout367_clear = fnand2(gin367_clear, 4);
    std::cerr << "\rLUT368   ";
    auto gin368_clear = 2 * gout136_clear + gout260_clear;
    auto gout368_clear = fand2(gin368_clear, 4);
    std::cerr << "\rLUT369   ";
    auto gin369_clear = 2 * gout280_clear + gout161_clear;
    auto gout369_clear = fnand2(gin369_clear, 4);
    std::cerr << "\rLUT370   ";
    auto gin370_clear = 2 * gout351_clear + gout219_clear;
    auto gout370_clear = fnand2(gin370_clear, 4);
    std::cerr << "\rLUT371   ";
    auto gin371_clear = 2 * gout357_clear + gout346_clear;
    auto gout371_clear = fand2(gin371_clear, 4);
    std::cerr << "\rLUT372   ";
    auto gin372_clear = 2 * gout361_clear + gout359_clear;
    auto gout372_clear = fxor2(gin372_clear, 4);
    std::cerr << "\rLUT373   ";
    auto gin373_clear = 2 * gout286_clear + gout239_clear;
    auto gout373_clear = fxnor2(gin373_clear, 4);
    std::cerr << "\rLUT374   ";
    auto gin374_clear = 2 * ct_y13_clear + gout368_clear;
    auto gout374_clear = fand2(gin374_clear, 4);
    std::cerr << "\rLUT375   ";
    auto gin375_clear = 2 * gout307_clear + gout261_clear;
    auto gout375_clear = fnand2(gin375_clear, 4);
    std::cerr << "\rLUT376   ";
    auto gin376_clear = 2 * gout196_clear + gout289_clear;
    auto gout376_clear = fnand2(gin376_clear, 4);
    std::cerr << "\rLUT377   ";
    auto gin377_clear = 2 * gout175_clear + gout315_clear;
    auto gout377_clear = fand2(gin377_clear, 4);
    std::cerr << "\rLUT378   ";
    auto gin378_clear = 2 * gout156_clear + gout333_clear;
    auto gout378_clear = fnand2(gin378_clear, 4);
    std::cerr << "\rLUT379   ";
    auto gin379_clear = 2 * gout364_clear + gout265_clear;
    auto gout379_clear = fxnor2(gin379_clear, 4);
    std::cerr << "\rINV380   ";
    long gout380_clear = 1 - gout299_clear;

    std::cerr << "\rLUT381   ";
    auto gin381_clear = 2 * gout343_clear + gout60_clear;
    auto gout381_clear = fand2(gin381_clear, 4);
    std::cerr << "\rLUT382   ";
    auto gin382_clear = 2 * gout193_clear + gout251_clear;
    auto gout382_clear = fnand2(gin382_clear, 4);
    std::cerr << "\rLUT383   ";
    auto gin383_clear = 2 * gout307_clear + gout261_clear;
    auto gout383_clear = fxnor2(gin383_clear, 4);
    std::cerr << "\rLUT384   ";
    auto gin384_clear = 2 * gout318_clear + gout273_clear;
    auto gout384_clear = fxnor2(gin384_clear, 4);
    std::cerr << "\rLUT385   ";
    auto gin385_clear = 2 * gout318_clear + gout273_clear;
    auto gout385_clear = fand2(gin385_clear, 4);
    std::cerr << "\rLUT386   ";
    auto gin386_clear = 2 * gout278_clear + gout328_clear;
    auto gout386_clear = fnand2(gin386_clear, 4);
    std::cerr << "\rLUT387   ";
    auto gin387_clear = 2 * gout180_clear + gout345_clear;
    auto gout387_clear = fxor2(gin387_clear, 4);
    std::cerr << "\rLUT388   ";
    auto gin388_clear = 2 * gout29_clear + gout302_clear;
    auto gout388_clear = fxor2(gin388_clear, 4);
    std::cerr << "\rLUT389   ";
    auto gin389_clear = 2 * gout83_clear + gout347_clear;
    auto gout389_clear = fxor2(gin389_clear, 4);
    std::cerr << "\rLUT390   ";
    auto gin390_clear = 2 * gout330_clear + gout218_clear;
    auto gout390_clear = fnand2(gin390_clear, 4);
    std::cerr << "\rLUT391   ";
    auto gin391_clear = 2 * gout336_clear + gout241_clear;
    auto gout391_clear = fxnor2(gin391_clear, 4);
    std::cerr << "\rLUT392   ";
    auto gin392_clear = 2 * gout316_clear + gout353_clear;
    auto gout392_clear = fxnor2(gin392_clear, 4);
    std::cerr << "\rLUT393   ";
    auto gin393_clear = 2 * gout193_clear + gout251_clear;
    auto gout393_clear = fxor2(gin393_clear, 4);
    std::cerr << "\rLUT394   ";
    auto gin394_clear = 2 * gout324_clear + gout267_clear;
    auto gout394_clear = fxnor2(gin394_clear, 4);
    std::cerr << "\rLUT395   ";
    auto gin395_clear = 2 * gout383_clear + gout197_clear;
    auto gout395_clear = fxnor2(gin395_clear, 4);
    std::cerr << "\rLUT396   ";
    auto gin396_clear = 2 * (1 - gout383_clear) + gout197_clear;
    auto gout396_clear = fand2(gin396_clear, 4);
    std::cerr << "\rLUT397   ";
    auto gin397_clear = 2 * gout324_clear + gout267_clear;
    auto gout397_clear = fand2(gin397_clear, 4);
    std::cerr << "\rLUT398   ";
    auto gin398_clear = 2 * gout375_clear + (1 - gout396_clear);
    auto gout398_clear = fand2(gin398_clear, 4);
    std::cerr << "\rLUT399   ";
    auto gin399_clear = 2 * gout341_clear + gout365_clear;
    auto gout399_clear = fxnor2(gin399_clear, 4);
    std::cerr << "\rLUT400   ";
    auto gin400_clear = 2 * ct_y0_clear + gout368_clear;
    auto gout400_clear = fand2(gin400_clear, 4);
    std::cerr << "\rLUT401   ";
    auto gin401_clear = 2 * (1 - gout391_clear) + gout298_clear;
    auto gout401_clear = fand2(gin401_clear, 4);
    std::cerr << "\rLUT402   ";
    auto gin402_clear = 2 * gout227_clear + gout311_clear;
    auto gout402_clear = fxnor2(gin402_clear, 4);
    std::cerr << "\rLUT403   ";
    auto gin403_clear = 2 * gout76_clear + gout320_clear;
    auto gout403_clear = fand2(gin403_clear, 4);
    std::cerr << "\rLUT404   ";
    auto gin404_clear = 2 * gout362_clear + gout332_clear;
    auto gout404_clear = fnand2(gin404_clear, 4);
    std::cerr << "\rLUT405   ";
    auto gin405_clear = 2 * (1 - gout403_clear) + gout368_clear;
    auto gout405_clear = fand2(gin405_clear, 4);
    std::cerr << "\rINV406   ";
    long gout406_clear = 1 - gout313_clear;

    std::cerr << "\rLUT407   ";
    auto gin407_clear = 2 * gout211_clear + gout243_clear;
    auto gout407_clear = fnand2(gin407_clear, 4);
    std::cerr << "\rLUT408   ";
    auto gin408_clear = 2 * gout212_clear + gout276_clear;
    auto gout408_clear = fxor2(gin408_clear, 4);
    std::cerr << "\rLUT409   ";
    auto gin409_clear = 2 * gout300_clear + gout339_clear;
    auto gout409_clear = fnand2(gin409_clear, 4);
    std::cerr << "\rLUT410   ";
    auto gin410_clear = 2 * gout335_clear + gout184_clear;
    auto gout410_clear = fnand2(gin410_clear, 4);
    std::cerr << "\rLUT411   ";
    auto gin411_clear = 2 * gout409_clear + gout186_clear;
    auto gout411_clear = fxnor2(gin411_clear, 4);
    std::cerr << "\rLUT412   ";
    auto gin412_clear = 2 * gout378_clear + gout285_clear;
    auto gout412_clear = fxnor2(gin412_clear, 4);
    std::cerr << "\rLUT413   ";
    auto gin413_clear = 2 * gout36_clear + gout242_clear;
    auto gout413_clear = fnand2(gin413_clear, 4);
    std::cerr << "\rLUT414   ";
    auto gin414_clear = 2 * gout378_clear + gout285_clear;
    auto gout414_clear = fand2(gin414_clear, 4);
    std::cerr << "\rLUT415   ";
    auto gin415_clear = 2 * gout313_clear + gout366_clear;
    auto gout415_clear = fand2(gin415_clear, 4);
    std::cerr << "\rLUT416   ";
    auto gin416_clear = 2 * gout407_clear + gout217_clear;
    auto gout416_clear = fand2(gin416_clear, 4);
    std::cerr << "\rLUT417   ";
    auto gin417_clear = 2 * gout51_clear + gout319_clear;
    auto gout417_clear = fxnor2(gin417_clear, 4);
    std::cerr << "\rLUT418   ";
    auto gin418_clear = 2 * gout351_clear + gout219_clear;
    auto gout418_clear = fxor2(gin418_clear, 4);
    std::cerr << "\rLUT419   ";
    auto gin419_clear = 2 * gout24_clear + gout283_clear;
    auto gout419_clear = fxnor2(gin419_clear, 4);
    std::cerr << "\rLUT420   ";
    auto gin420_clear = 2 * gout369_clear + gout393_clear;
    auto gout420_clear = fand2(gin420_clear, 4);
    std::cerr << "\rLUT421   ";
    auto gin421_clear = 2 * (1 - gout412_clear) + gout310_clear;
    auto gout421_clear = fand2(gin421_clear, 4);
    std::cerr << "\rLUT422   ";
    auto gin422_clear = 2 * gout187_clear + gout418_clear;
    auto gout422_clear = fnand2(gin422_clear, 4);
    std::cerr << "\rLUT423   ";
    auto gin423_clear = 2 * gout117_clear + gout400_clear;
    auto gout423_clear = fxnor2(gin423_clear, 4);
    std::cerr << "\rLUT424   ";
    auto gin424_clear = 2 * gout290_clear + gout350_clear;
    auto gout424_clear = fand2(gin424_clear, 4);
    std::cerr << "\rLUT425   ";
    auto gin425_clear = 2 * gout229_clear + gout418_clear;
    auto gout425_clear = fxnor2(gin425_clear, 4);
    std::cerr << "\rLUT426   ";
    auto gin426_clear = 2 * gout81_clear + gout337_clear;
    auto gout426_clear = fnand2(gin426_clear, 4);
    std::cerr << "\rLUT427   ";
    auto gin427_clear = 2 * gout336_clear + gout241_clear;
    auto gout427_clear = fand2(gin427_clear, 4);
    std::cerr << "\rINV428   ";
    long gout428_clear = 1 - gout335_clear;

    std::cerr << "\rLUT429   ";
    auto gin429_clear = 2 * gout293_clear + gout376_clear;
    auto gout429_clear = fnand2(gin429_clear, 4);
    std::cerr << "\rLUT430   ";
    auto gin430_clear = 2 * gout386_clear + gout144_clear;
    auto gout430_clear = fxor2(gin430_clear, 4);
    std::cerr << "\rLUT431   ";
    auto gin431_clear = 2 * (1 - gout364_clear) + gout265_clear;
    auto gout431_clear = fand2(gin431_clear, 4);
    std::cerr << "\rLUT432   ";
    auto gin432_clear = 2 * gout180_clear + gout345_clear;
    auto gout432_clear = fnand2(gin432_clear, 4);
    std::cerr << "\rLUT433   ";
    auto gin433_clear = 2 * gout83_clear + gout347_clear;
    auto gout433_clear = fnand2(gin433_clear, 4);
    std::cerr << "\rLUT434   ";
    auto gin434_clear = 2 * gout215_clear + gout363_clear;
    auto gout434_clear = fnand2(gin434_clear, 4);
    std::cerr << "\rLUT435   ";
    auto gin435_clear = 2 * (1 - gout394_clear) + gout275_clear;
    auto gout435_clear = fand2(gin435_clear, 4);
    std::cerr << "\rLUT436   ";
    auto gin436_clear = 2 * gout301_clear + gout340_clear;
    auto gout436_clear = fnand2(gin436_clear, 4);
    std::cerr << "\rLUT437   ";
    auto gin437_clear = 2 * ct_y11_clear + gout368_clear;
    auto gout437_clear = fnand2(gin437_clear, 4);
    std::cerr << "\rLUT438   ";
    auto gin438_clear = 2 * gout343_clear + gout60_clear;
    auto gout438_clear = fxor2(gin438_clear, 4);
    std::cerr << "\rLUT439   ";
    auto gin439_clear = 2 * (1 - gout341_clear) + gout365_clear;
    auto gout439_clear = fand2(gin439_clear, 4);
    std::cerr << "\rLUT440   ";
    auto gin440_clear = 2 * gout394_clear + gout275_clear;
    auto gout440_clear = fxnor2(gin440_clear, 4);
    std::cerr << "\rLUT441   ";
    auto gin441_clear = 2 * gout204_clear + gout352_clear;
    auto gout441_clear = fnand2(gin441_clear, 4);
    std::cerr << "\rLUT442   ";
    auto gin442_clear = 2 * gout367_clear + gout247_clear;
    auto gout442_clear = fxnor2(gin442_clear, 4);
    std::cerr << "\rLUT443   ";
    auto gin443_clear = 2 * gout391_clear + gout298_clear;
    auto gout443_clear = fxnor2(gin443_clear, 4);
    std::cerr << "\rLUT444   ";
    auto gin444_clear = 2 * ct_y12_clear + gout368_clear;
    auto gout444_clear = fnand2(gin444_clear, 4);
    std::cerr << "\rLUT445   ";
    auto gin445_clear = 2 * gout367_clear + gout247_clear;
    auto gout445_clear = fand2(gin445_clear, 4);
    std::cerr << "\rLUT446   ";
    auto gin446_clear = 2 * gout397_clear + gout435_clear;
    auto gout446_clear = for2(gin446_clear, 4);
    std::cerr << "\rINV447   ";
    long gout447_clear = 1 - gout415_clear;

    std::cerr << "\rLUT448   ";
    auto gin448_clear = 2 * gout407_clear + gout217_clear;
    auto gout448_clear = fxnor2(gin448_clear, 4);
    std::cerr << "\rLUT449   ";
    auto gin449_clear = 2 * gout362_clear + gout332_clear;
    auto gout449_clear = fxor2(gin449_clear, 4);
    std::cerr << "\rLUT450   ";
    auto gin450_clear = 2 * gout356_clear + gout331_clear;
    auto gout450_clear = fnand2(gin450_clear, 4);
    std::cerr << "\rLUT451   ";
    auto gin451_clear = 2 * (1 - gout384_clear) + gout389_clear;
    auto gout451_clear = fand2(gin451_clear, 4);
    std::cerr << "\rLUT452   ";
    auto gin452_clear = 2 * gout368_clear + gout233_clear;
    auto gout452_clear = fand2(gin452_clear, 4);
    std::cerr << "\rLUT453   ";
    auto gin453_clear = 2 * (1 - gout320_clear) + gout368_clear;
    auto gout453_clear = fand2(gin453_clear, 4);
    std::cerr << "\rLUT454   ";
    auto gin454_clear = 2 * ct_y14_clear + gout368_clear;
    auto gout454_clear = fand2(gin454_clear, 4);
    std::cerr << "\rLUT455   ";
    auto gin455_clear = 2 * gout312_clear + gout382_clear;
    auto gout455_clear = fnand2(gin455_clear, 4);
    std::cerr << "\rLUT456   ";
    auto gin456_clear = 2 * gout384_clear + gout389_clear;
    auto gout456_clear = fxnor2(gin456_clear, 4);
    std::cerr << "\rLUT457   ";
    auto gin457_clear = 2 * gout306_clear + gout368_clear;
    auto gout457_clear = for2(gin457_clear, 4);
    std::cerr << "\rLUT458   ";
    auto gin458_clear = 2 * gout361_clear + gout359_clear;
    auto gout458_clear = fnand2(gin458_clear, 4);
    std::cerr << "\rLUT459   ";
    auto gin459_clear = 2 * gout406_clear + gout366_clear;
    auto gout459_clear = fxnor2(gin459_clear, 4);
    std::cerr << "\rLUT460   ";
    auto gin460_clear = 2 * gout448_clear + gout277_clear;
    auto gout460_clear = fxnor2(gin460_clear, 4);
    std::cerr << "\rLUT461   ";
    auto gin461_clear = 2 * gout390_clear + gout432_clear;
    auto gout461_clear = fnand2(gin461_clear, 4);
    std::cerr << "\rLUT462   ";
    auto gin462_clear = 2 * gout446_clear + gout399_clear;
    auto gout462_clear = fxnor2(gin462_clear, 4);
    std::cerr << "\rLUT463   ";
    auto gin463_clear = 2 * gout205_clear + gout452_clear;
    auto gout463_clear = fxnor2(gin463_clear, 4);
    std::cerr << "\rLUT464   ";
    auto gin464_clear = 2 * gout220_clear + gout433_clear;
    auto gout464_clear = fnand2(gin464_clear, 4);
    std::cerr << "\rLUT465   ";
    auto gin465_clear = 2 * gout386_clear + gout144_clear;
    auto gout465_clear = fand2(gin465_clear, 4);
    std::cerr << "\rLUT466   ";
    auto gin466_clear = 2 * gout398_clear + gout326_clear;
    auto gout466_clear = fxnor2(gin466_clear, 4);
    std::cerr << "\rLUT467   ";
    auto gin467_clear = 2 * gout369_clear + gout393_clear;
    auto gout467_clear = fxnor2(gin467_clear, 4);
    std::cerr << "\rLUT468   ";
    auto gin468_clear = 2 * gout198_clear + gout413_clear;
    auto gout468_clear = fnand2(gin468_clear, 4);
    std::cerr << "\rLUT469   ";
    auto gin469_clear = 2 * gout371_clear + gout431_clear;
    auto gout469_clear = for2(gin469_clear, 4);
    std::cerr << "\rLUT470   ";
    auto gin470_clear = 2 * gout414_clear + gout421_clear;
    auto gout470_clear = for2(gin470_clear, 4);
    std::cerr << "\rLUT471   ";
    auto gin471_clear = 2 * gout457_clear + gout354_clear;
    auto gout471_clear = fand2(gin471_clear, 4);
    std::cerr << "\rLUT472   ";
    auto gin472_clear = 2 * gout429_clear + gout334_clear;
    auto gout472_clear = fxor2(gin472_clear, 4);
    std::cerr << "\rLUT473   ";
    auto gin473_clear = 2 * gout76_clear + gout453_clear;
    auto gout473_clear = fxnor2(gin473_clear, 4);
    std::cerr << "\rLUT474   ";
    auto gin474_clear = 2 * gout62_clear + gout405_clear;
    auto gout474_clear = fxnor2(gin474_clear, 4);
    std::cerr << "\rLUT475   ";
    auto gin475_clear = 2 * gout62_clear + gout403_clear;
    auto gout475_clear = fand2(gin475_clear, 4);
    std::cerr << "\rLUT476   ";
    auto gin476_clear = 2 * gout467_clear + gout291_clear;
    auto gout476_clear = fxnor2(gin476_clear, 4);
    std::cerr << "\rLUT477   ";
    auto gin477_clear = 2 * gout429_clear + gout334_clear;
    auto gout477_clear = fnand2(gin477_clear, 4);
    std::cerr << "\rLUT478   ";
    auto gin478_clear = 2 * (1 - gout467_clear) + gout291_clear;
    auto gout478_clear = fand2(gin478_clear, 4);
    std::cerr << "\rLUT479   ";
    auto gin479_clear = 2 * gout34_clear + gout423_clear;
    auto gout479_clear = fxnor2(gin479_clear, 4);
    std::cerr << "\rLUT480   ";
    auto gin480_clear = 2 * gout450_clear + gout458_clear;
    auto gout480_clear = fnand2(gin480_clear, 4);
    std::cerr << "\rLUT481   ";
    auto gin481_clear = 2 * gout213_clear + gout426_clear;
    auto gout481_clear = fnand2(gin481_clear, 4);
    std::cerr << "\rLUT482   ";
    auto gin482_clear = 2 * gout256_clear + gout449_clear;
    auto gout482_clear = fxor2(gin482_clear, 4);
    std::cerr << "\rLUT483   ";
    auto gin483_clear = 2 * gout120_clear + gout473_clear;
    auto gout483_clear = fxnor2(gin483_clear, 4);
    std::cerr << "\rLUT484   ";
    auto gin484_clear = 2 * ct_x1_clear + gout423_clear;
    auto gout484_clear = fnand2(gin484_clear, 4);
    std::cerr << "\rLUT485   ";
    auto gin485_clear = 2 * gout442_clear + gout282_clear;
    auto gout485_clear = fxnor2(gin485_clear, 4);
    std::cerr << "\rLUT486   ";
    auto gin486_clear = 2 * gout67_clear + gout424_clear;
    auto gout486_clear = fxnor2(gin486_clear, 4);
    std::cerr << "\rLUT487   ";
    auto gin487_clear = 2 * ct_x2_clear + gout463_clear;
    auto gout487_clear = fnand2(gin487_clear, 4);
    std::cerr << "\rLUT488   ";
    auto gin488_clear = 2 * (1 - gout442_clear) + gout282_clear;
    auto gout488_clear = fand2(gin488_clear, 4);
    std::cerr << "\rLUT489   ";
    auto gin489_clear = 2 * gout377_clear + gout419_clear;
    auto gout489_clear = fxnor2(gin489_clear, 4);
    std::cerr << "\rLUT490   ";
    auto gin490_clear = 2 * gout468_clear + gout216_clear;
    auto gout490_clear = fxnor2(gin490_clear, 4);
    std::cerr << "\rLUT491   ";
    auto gin491_clear = 2 * gout461_clear + gout39_clear;
    auto gout491_clear = fxor2(gin491_clear, 4);
    std::cerr << "\rLUT492   ";
    auto gin492_clear = 2 * gout370_clear + gout422_clear;
    auto gout492_clear = fnand2(gin492_clear, 4);
    std::cerr << "\rLUT493   ";
    auto gin493_clear = 2 * gout461_clear + gout39_clear;
    auto gout493_clear = fand2(gin493_clear, 4);
    std::cerr << "\rLUT494   ";
    auto gin494_clear = 2 * gout427_clear + gout401_clear;
    auto gout494_clear = for2(gin494_clear, 4);
    std::cerr << "\rLUT495   ";
    auto gin495_clear = 2 * gout441_clear + gout257_clear;
    auto gout495_clear = fxor2(gin495_clear, 4);
    std::cerr << "\rLUT496   ";
    auto gin496_clear = 2 * gout355_clear + gout471_clear;
    auto gout496_clear = fnand2(gin496_clear, 4);
    std::cerr << "\rLUT497   ";
    auto gin497_clear = 2 * (1 - gout490_clear) + gout358_clear;
    auto gout497_clear = fand2(gin497_clear, 4);
    std::cerr << "\rLUT498   ";
    auto gin498_clear = 2 * gout441_clear + gout257_clear;
    auto gout498_clear = fnand2(gin498_clear, 4);
    std::cerr << "\rLUT499   ";
    auto gin499_clear = 2 * gout167_clear + gout474_clear;
    auto gout499_clear = fxnor2(gin499_clear, 4);
    std::cerr << "\rLUT500   ";
    auto gin500_clear = 2 * gout481_clear + gout296_clear;
    auto gout500_clear = fnand2(gin500_clear, 4);
    std::cerr << "\rLUT501   ";
    auto gin501_clear = 2 * (1 - gout448_clear) + gout277_clear;
    auto gout501_clear = fand2(gin501_clear, 4);
    std::cerr << "\rLUT502   ";
    auto gin502_clear = 2 * gout246_clear + gout479_clear;
    auto gout502_clear = fxnor2(gin502_clear, 4);
    std::cerr << "\rLUT503   ";
    auto gin503_clear = 2 * gout490_clear + gout358_clear;
    auto gout503_clear = fxnor2(gin503_clear, 4);
    std::cerr << "\rLUT504   ";
    auto gin504_clear = 2 * gout420_clear + gout478_clear;
    auto gout504_clear = for2(gin504_clear, 4);
    std::cerr << "\rLUT505   ";
    auto gin505_clear = 2 * gout344_clear + gout439_clear;
    auto gout505_clear = for2(gin505_clear, 4);
    std::cerr << "\rLUT506   ";
    auto gin506_clear = 2 * gout445_clear + gout488_clear;
    auto gout506_clear = for2(gin506_clear, 4);
    std::cerr << "\rLUT507   ";
    auto gin507_clear = 2 * gout348_clear + gout495_clear;
    auto gout507_clear = fxor2(gin507_clear, 4);
    std::cerr << "\rLUT508   ";
    auto gin508_clear = 2 * gout462_clear + gout387_clear;
    auto gout508_clear = fxnor2(gin508_clear, 4);
    std::cerr << "\rLUT509   ";
    auto gin509_clear = 2 * gout348_clear + gout495_clear;
    auto gout509_clear = fnand2(gin509_clear, 4);
    std::cerr << "\rLUT510   ";
    auto gin510_clear = 2 * gout71_clear + gout463_clear;
    auto gout510_clear = fxnor2(gin510_clear, 4);
    std::cerr << "\rLUT511   ";
    auto gin511_clear = 2 * gout436_clear + gout408_clear;
    auto gout511_clear = fxnor2(gin511_clear, 4);
    std::cerr << "\rLUT512   ";
    auto gin512_clear = 2 * (1 - gout462_clear) + gout387_clear;
    auto gout512_clear = fand2(gin512_clear, 4);
    std::cerr << "\rLUT513   ";
    auto gin513_clear = 2 * gout434_clear + gout476_clear;
    auto gout513_clear = fxor2(gin513_clear, 4);
    std::cerr << "\rLUT514   ";
    auto gin514_clear = 2 * gout436_clear + gout408_clear;
    auto gout514_clear = fnand2(gin514_clear, 4);
    std::cerr << "\rLUT515   ";
    auto gin515_clear = 2 * (1 - gout475_clear) + gout368_clear;
    auto gout515_clear = fand2(gin515_clear, 4);
    std::cerr << "\rLUT516   ";
    auto gin516_clear = 2 * gout434_clear + gout476_clear;
    auto gout516_clear = fand2(gin516_clear, 4);
    std::cerr << "\rLUT517   ";
    auto gin517_clear = 2 * (1 - gout511_clear) + gout388_clear;
    auto gout517_clear = fand2(gin517_clear, 4);
    std::cerr << "\rLUT518   ";
    auto gin518_clear = 2 * gout505_clear + gout456_clear;
    auto gout518_clear = fxnor2(gin518_clear, 4);
    std::cerr << "\rLUT519   ";
    auto gin519_clear = 2 * gout506_clear + gout440_clear;
    auto gout519_clear = fxnor2(gin519_clear, 4);
    std::cerr << "\rLUT520   ";
    auto gin520_clear = 2 * gout256_clear + gout449_clear;
    auto gout520_clear = fnand2(gin520_clear, 4);
    std::cerr << "\rLUT521   ";
    auto gin521_clear = 2 * gout455_clear + gout245_clear;
    auto gout521_clear = fxnor2(gin521_clear, 4);
    std::cerr << "\rLUT522   ";
    auto gin522_clear = 2 * gout325_clear + gout477_clear;
    auto gout522_clear = fand2(gin522_clear, 4);
    std::cerr << "\rLUT523   ";
    auto gin523_clear = 2 * gout455_clear + gout245_clear;
    auto gout523_clear = fand2(gin523_clear, 4);
    std::cerr << "\rLUT524   ";
    auto gin524_clear = 2 * gout511_clear + gout388_clear;
    auto gout524_clear = fxnor2(gin524_clear, 4);
    std::cerr << "\rLUT525   ";
    auto gin525_clear = 2 * gout349_clear + gout459_clear;
    auto gout525_clear = fxnor2(gin525_clear, 4);
    std::cerr << "\rLUT526   ";
    auto gin526_clear = 2 * gout470_clear + gout395_clear;
    auto gout526_clear = fxnor2(gin526_clear, 4);
    std::cerr << "\rLUT527   ";
    auto gin527_clear = 2 * gout349_clear + gout459_clear;
    auto gout527_clear = fnand2(gin527_clear, 4);
    std::cerr << "\rLUT528   ";
    auto gin528_clear = 2 * gout470_clear + gout395_clear;
    auto gout528_clear = fand2(gin528_clear, 4);
    std::cerr << "\rLUT529   ";
    auto gin529_clear = 2 * gout385_clear + gout451_clear;
    auto gout529_clear = for2(gin529_clear, 4);
    std::cerr << "\rLUT530   ";
    auto gin530_clear = 2 * gout464_clear + gout287_clear;
    auto gout530_clear = fnand2(gin530_clear, 4);
    std::cerr << "\rLUT531   ";
    auto gin531_clear = 2 * gout529_clear + gout503_clear;
    auto gout531_clear = fand2(gin531_clear, 4);
    std::cerr << "\rLUT532   ";
    auto gin532_clear = 2 * gout494_clear + gout460_clear;
    auto gout532_clear = fand2(gin532_clear, 4);
    std::cerr << "\rLUT533   ";
    auto gin533_clear = 2 * gout464_clear + gout287_clear;
    auto gout533_clear = fxor2(gin533_clear, 4);
    std::cerr << "\rLUT534   ";
    auto gin534_clear = 2 * gout457_clear + gout410_clear;
    auto gout534_clear = fand2(gin534_clear, 4);
    std::cerr << "\rLUT535   ";
    auto gin535_clear = 2 * gout412_clear + gout310_clear;
    auto gout535_clear = fxnor2(gin535_clear, 4);
    std::cerr << "\rLUT536   ";
    auto gin536_clear = 2 * gout446_clear + gout399_clear;
    auto gout536_clear = fand2(gin536_clear, 4);
    std::cerr << "\rLUT537   ";
    auto gin537_clear = 2 * gout529_clear + gout503_clear;
    auto gout537_clear = fxnor2(gin537_clear, 4);
    std::cerr << "\rLUT538   ";
    auto gin538_clear = 2 * gout142_clear + gout475_clear;
    auto gout538_clear = fand2(gin538_clear, 4);
    std::cerr << "\rLUT539   ";
    auto gin539_clear = 2 * gout468_clear + gout216_clear;
    auto gout539_clear = fand2(gin539_clear, 4);
    std::cerr << "\rLUT540   ";
    auto gin540_clear = 2 * ct_x4_clear + gout474_clear;
    auto gout540_clear = fnand2(gin540_clear, 4);
    std::cerr << "\rLUT541   ";
    auto gin541_clear = 2 * gout481_clear + gout296_clear;
    auto gout541_clear = fxor2(gin541_clear, 4);
    std::cerr << "\rLUT542   ";
    auto gin542_clear = 2 * (1 - gout538_clear) + gout368_clear;
    auto gout542_clear = fand2(gin542_clear, 4);
    std::cerr << "\rLUT543   ";
    auto gin543_clear = 2 * gout514_clear + (1 - gout517_clear);
    auto gout543_clear = fand2(gin543_clear, 4);
    std::cerr << "\rLUT544   ";
    auto gin544_clear = 2 * ct_x3_clear + gout473_clear;
    auto gout544_clear = fnand2(gin544_clear, 4);
    std::cerr << "\rLUT545   ";
    auto gin545_clear = 2 * gout415_clear + gout513_clear;
    auto gout545_clear = fand2(gin545_clear, 4);
    std::cerr << "\rLUT546   ";
    auto gin546_clear = 2 * gout447_clear + gout527_clear;
    auto gout546_clear = fnand2(gin546_clear, 4);
    std::cerr << "\rLUT547   ";
    auto gin547_clear = 2 * gout526_clear + gout472_clear;
    auto gout547_clear = fxnor2(gin547_clear, 4);
    std::cerr << "\rLUT548   ";
    auto gin548_clear = 2 * gout480_clear + gout524_clear;
    auto gout548_clear = fnand2(gin548_clear, 4);
    std::cerr << "\rLUT549   ";
    auto gin549_clear = 2 * gout417_clear + gout489_clear;
    auto gout549_clear = fxnor2(gin549_clear, 4);
    std::cerr << "\rLUT550   ";
    auto gin550_clear = 2 * (1 - gout526_clear) + gout472_clear;
    auto gout550_clear = fand2(gin550_clear, 4);
    std::cerr << "\rLUT551   ";
    auto gin551_clear = 2 * (1 - gout521_clear) + gout338_clear;
    auto gout551_clear = fand2(gin551_clear, 4);
    std::cerr << "\rLUT552   ";
    auto gin552_clear = 2 * gout314_clear + gout486_clear;
    auto gout552_clear = fxnor2(gin552_clear, 4);
    std::cerr << "\rLUT553   ";
    auto gin553_clear = 2 * gout480_clear + gout524_clear;
    auto gout553_clear = fxor2(gin553_clear, 4);
    std::cerr << "\rLUT554   ";
    auto gin554_clear = 2 * gout95_clear + gout479_clear;
    auto gout554_clear = fnand2(gin554_clear, 4);
    std::cerr << "\rLUT555   ";
    auto gin555_clear = 2 * gout416_clear + gout501_clear;
    auto gout555_clear = for2(gin555_clear, 4);
    std::cerr << "\rLUT556   ";
    auto gin556_clear = 2 * gout505_clear + gout456_clear;
    auto gout556_clear = fand2(gin556_clear, 4);
    std::cerr << "\rLUT557   ";
    auto gin557_clear = 2 * gout516_clear + gout545_clear;
    auto gout557_clear = for2(gin557_clear, 4);
    std::cerr << "\rLUT558   ";
    auto gin558_clear = 2 * gout555_clear + gout535_clear;
    auto gout558_clear = fand2(gin558_clear, 4);
    std::cerr << "\rLUT559   ";
    auto gin559_clear = 2 * gout506_clear + gout440_clear;
    auto gout559_clear = fand2(gin559_clear, 4);
    std::cerr << "\rLUT560   ";
    auto gin560_clear = 2 * gout521_clear + gout338_clear;
    auto gout560_clear = fxnor2(gin560_clear, 4);
    std::cerr << "\rLUT561   ";
    auto gin561_clear = 2 * gout322_clear + gout533_clear;
    auto gout561_clear = fnand2(gin561_clear, 4);
    std::cerr << "\rLUT562   ";
    auto gin562_clear = 2 * gout536_clear + gout512_clear;
    auto gout562_clear = for2(gin562_clear, 4);
    std::cerr << "\rLUT563   ";
    auto gin563_clear = 2 * gout528_clear + gout550_clear;
    auto gout563_clear = for2(gin563_clear, 4);
    std::cerr << "\rLUT564   ";
    auto gin564_clear = 2 * gout322_clear + gout533_clear;
    auto gout564_clear = fxor2(gin564_clear, 4);
    std::cerr << "\rLUT565   ";
    auto gin565_clear = 2 * gout428_clear + gout502_clear;
    auto gout565_clear = fnand2(gin565_clear, 4);
    std::cerr << "\rLUT566   ";
    auto gin566_clear = 2 * gout404_clear + gout520_clear;
    auto gout566_clear = fnand2(gin566_clear, 4);
    std::cerr << "\rLUT567   ";
    auto gin567_clear = 2 * gout360_clear + gout541_clear;
    auto gout567_clear = fxor2(gin567_clear, 4);
    std::cerr << "\rLUT568   ";
    auto gin568_clear = 2 * gout494_clear + gout460_clear;
    auto gout568_clear = fxnor2(gin568_clear, 4);
    std::cerr << "\rLUT569   ";
    auto gin569_clear = 2 * gout498_clear + gout509_clear;
    auto gout569_clear = fnand2(gin569_clear, 4);
    std::cerr << "\rLUT570   ";
    auto gin570_clear = 2 * gout539_clear + gout497_clear;
    auto gout570_clear = for2(gin570_clear, 4);
    std::cerr << "\rLUT571   ";
    auto gin571_clear = 2 * gout142_clear + gout515_clear;
    auto gout571_clear = fxnor2(gin571_clear, 4);
    std::cerr << "\rLUT572   ";
    auto gin572_clear = 2 * gout127_clear + gout538_clear;
    auto gout572_clear = fand2(gin572_clear, 4);
    std::cerr << "\rLUT573   ";
    auto gin573_clear = 2 * (1 - gout572_clear) + gout368_clear;
    auto gout573_clear = fand2(gin573_clear, 4);
    std::cerr << "\rLUT574   ";
    auto gin574_clear = 2 * gout522_clear + gout552_clear;
    auto gout574_clear = fxnor2(gin574_clear, 4);
    std::cerr << "\rLUT575   ";
    auto gin575_clear = 2 * gout469_clear + gout553_clear;
    auto gout575_clear = fnand2(gin575_clear, 4);
    std::cerr << "\rLUT576   ";
    auto gin576_clear = 2 * (1 - gout527_clear) + gout513_clear;
    auto gout576_clear = fand2(gin576_clear, 4);
    std::cerr << "\rLUT577   ";
    auto gin577_clear = 2 * gout504_clear + gout560_clear;
    auto gout577_clear = fnand2(gin577_clear, 4);
    std::cerr << "\rLUT578   ";
    auto gin578_clear = 2 * gout469_clear + gout553_clear;
    auto gout578_clear = fxor2(gin578_clear, 4);
    std::cerr << "\rLUT579   ";
    auto gin579_clear = 2 * gout513_clear + gout546_clear;
    auto gout579_clear = fxnor2(gin579_clear, 4);
    std::cerr << "\rLUT580   ";
    auto gin580_clear = 2 * (1 - gout519_clear) + gout430_clear;
    auto gout580_clear = fand2(gin580_clear, 4);
    std::cerr << "\rLUT581   ";
    auto gin581_clear = 2 * gout504_clear + gout560_clear;
    auto gout581_clear = fxor2(gin581_clear, 4);
    std::cerr << "\rLUT582   ";
    auto gin582_clear = 2 * gout537_clear + gout564_clear;
    auto gout582_clear = fxnor2(gin582_clear, 4);
    std::cerr << "\rLUT583   ";
    auto gin583_clear = 2 * gout570_clear + gout443_clear;
    auto gout583_clear = fand2(gin583_clear, 4);
    std::cerr << "\rLUT584   ";
    auto gin584_clear = 2 * (1 - gout537_clear) + gout564_clear;
    auto gout584_clear = fand2(gin584_clear, 4);
    std::cerr << "\rLUT585   ";
    auto gin585_clear = 2 * gout519_clear + gout430_clear;
    auto gout585_clear = fxnor2(gin585_clear, 4);
    std::cerr << "\rLUT586   ";
    auto gin586_clear = 2 * gout484_clear + gout554_clear;
    auto gout586_clear = fnand2(gin586_clear, 4);
    std::cerr << "\rLUT587   ";
    auto gin587_clear = 2 * gout523_clear + gout551_clear;
    auto gout587_clear = for2(gin587_clear, 4);
    std::cerr << "\rLUT588   ";
    auto gin588_clear = 2 * gout127_clear + gout542_clear;
    auto gout588_clear = fxnor2(gin588_clear, 4);
    std::cerr << "\rLUT589   ";
    auto gin589_clear = 2 * gout360_clear + gout541_clear;
    auto gout589_clear = fnand2(gin589_clear, 4);
    std::cerr << "\rLUT590   ";
    auto gin590_clear = 2 * gout587_clear + gout485_clear;
    auto gout590_clear = fxnor2(gin590_clear, 4);
    std::cerr << "\rLUT591   ";
    auto gin591_clear = 2 * gout566_clear + gout379_clear;
    auto gout591_clear = fnand2(gin591_clear, 4);
    std::cerr << "\rLUT592   ";
    auto gin592_clear = 2 * gout548_clear + gout575_clear;
    auto gout592_clear = fnand2(gin592_clear, 4);
    std::cerr << "\rLUT593   ";
    auto gin593_clear = 2 * gout587_clear + gout485_clear;
    auto gout593_clear = fand2(gin593_clear, 4);
    std::cerr << "\rLUT594   ";
    auto gin594_clear = 2 * gout500_clear + gout589_clear;
    auto gout594_clear = fnand2(gin594_clear, 4);
    std::cerr << "\rLUT595   ";
    auto gin595_clear = 2 * (1 - gout568_clear) + gout482_clear;
    auto gout595_clear = fand2(gin595_clear, 4);
    std::cerr << "\rLUT596   ";
    auto gin596_clear = 2 * gout392_clear + gout549_clear;
    auto gout596_clear = fxnor2(gin596_clear, 4);
    std::cerr << "\rLUT597   ";
    auto gin597_clear = 2 * gout568_clear + gout482_clear;
    auto gout597_clear = fxnor2(gin597_clear, 4);
    std::cerr << "\rLUT598   ";
    auto gin598_clear = 2 * gout592_clear + gout411_clear;
    auto gout598_clear = fxnor2(gin598_clear, 4);
    std::cerr << "\rLUT599   ";
    auto gin599_clear = 2 * gout569_clear + gout425_clear;
    auto gout599_clear = fnand2(gin599_clear, 4);
    std::cerr << "\rLUT600   ";
    auto gin600_clear = 2 * ct_x6_clear + gout588_clear;
    auto gout600_clear = fnand2(gin600_clear, 4);
    std::cerr << "\rLUT601   ";
    auto gin601_clear = 2 * gout33_clear + gout572_clear;
    auto gout601_clear = fand2(gin601_clear, 4);
    std::cerr << "\rLUT602   ";
    auto gin602_clear = 2 * gout530_clear + gout561_clear;
    auto gout602_clear = fnand2(gin602_clear, 4);
    std::cerr << "\rLUT603   ";
    auto gin603_clear = 2 * gout569_clear + gout425_clear;
    auto gout603_clear = fxor2(gin603_clear, 4);
    std::cerr << "\rLUT604   ";
    auto gin604_clear = 2 * gout555_clear + gout535_clear;
    auto gout604_clear = fxnor2(gin604_clear, 4);
    std::cerr << "\rLUT605   ";
    auto gin605_clear = 2 * gout594_clear + gout221_clear;
    auto gout605_clear = fand2(gin605_clear, 4);
    std::cerr << "\rLUT606   ";
    auto gin606_clear = 2 * gout570_clear + gout443_clear;
    auto gout606_clear = fxnor2(gin606_clear, 4);
    std::cerr << "\rLUT607   ";
    auto gin607_clear = 2 * gout574_clear + gout543_clear;
    auto gout607_clear = fxnor2(gin607_clear, 4);
    std::cerr << "\rLUT608   ";
    auto gin608_clear = 2 * gout559_clear + gout580_clear;
    auto gout608_clear = for2(gin608_clear, 4);
    std::cerr << "\rLUT609   ";
    auto gin609_clear = 2 * gout594_clear + gout221_clear;
    auto gout609_clear = fxor2(gin609_clear, 4);
    std::cerr << "\rLUT610   ";
    auto gin610_clear = 2 * gout565_clear + gout534_clear;
    auto gout610_clear = fnand2(gin610_clear, 4);
    std::cerr << "\rLUT611   ";
    auto gin611_clear = 2 * gout532_clear + gout595_clear;
    auto gout611_clear = for2(gin611_clear, 4);
    std::cerr << "\rLUT612   ";
    auto gin612_clear = 2 * (1 - gout518_clear) + gout567_clear;
    auto gout612_clear = fand2(gin612_clear, 4);
    std::cerr << "\rLUT613   ";
    auto gin613_clear = 2 * gout33_clear + gout573_clear;
    auto gout613_clear = fxnor2(gin613_clear, 4);
    std::cerr << "\rLUT614   ";
    auto gin614_clear = 2 * gout466_clear + gout596_clear;
    auto gout614_clear = fxnor2(gin614_clear, 4);
    std::cerr << "\rLUT615   ";
    auto gin615_clear = 2 * ct_x5_clear + gout571_clear;
    auto gout615_clear = fnand2(gin615_clear, 4);
    std::cerr << "\rLUT616   ";
    auto gin616_clear = 2 * gout566_clear + gout379_clear;
    auto gout616_clear = fxor2(gin616_clear, 4);
    std::cerr << "\rLUT617   ";
    auto gin617_clear = 2 * gout63_clear + gout571_clear;
    auto gout617_clear = fxnor2(gin617_clear, 4);
    std::cerr << "\rLUT618   ";
    auto gin618_clear = 2 * gout602_clear + gout373_clear;
    auto gout618_clear = fxor2(gin618_clear, 4);
    std::cerr << "\rLUT619   ";
    auto gin619_clear = 2 * gout608_clear + gout508_clear;
    auto gout619_clear = fxor2(gin619_clear, 4);
    std::cerr << "\rLUT620   ";
    auto gin620_clear = 2 * gout492_clear + gout616_clear;
    auto gout620_clear = fnand2(gin620_clear, 4);
    std::cerr << "\rLUT621   ";
    auto gin621_clear = 2 * gout518_clear + gout567_clear;
    auto gout621_clear = fxnor2(gin621_clear, 4);
    std::cerr << "\rLUT622   ";
    auto gin622_clear = 2 * gout602_clear + gout373_clear;
    auto gout622_clear = fand2(gin622_clear, 4);
    std::cerr << "\rLUT623   ";
    auto gin623_clear = 2 * gout556_clear + gout612_clear;
    auto gout623_clear = for2(gin623_clear, 4);
    std::cerr << "\rLUT624   ";
    auto gin624_clear = 2 * (1 - gout590_clear) + gout438_clear;
    auto gout624_clear = fand2(gin624_clear, 4);
    std::cerr << "\rLUT625   ";
    auto gin625_clear = 2 * gout255_clear + gout603_clear;
    auto gout625_clear = fnand2(gin625_clear, 4);
    std::cerr << "\rLUT626   ";
    auto gin626_clear = 2 * gout623_clear + gout582_clear;
    auto gout626_clear = fand2(gin626_clear, 4);
    std::cerr << "\rLUT627   ";
    auto gin627_clear = 2 * gout591_clear + gout620_clear;
    auto gout627_clear = fnand2(gin627_clear, 4);
    std::cerr << "\rLUT628   ";
    auto gin628_clear = 2 * gout299_clear + gout581_clear;
    auto gout628_clear = fnand2(gin628_clear, 4);
    std::cerr << "\rLUT629   ";
    auto gin629_clear = 2 * gout531_clear + gout584_clear;
    auto gout629_clear = for2(gin629_clear, 4);
    std::cerr << "\rLUT630   ";
    auto gin630_clear = 2 * gout590_clear + gout438_clear;
    auto gout630_clear = fxnor2(gin630_clear, 4);
    std::cerr << "\rLUT631   ";
    auto gin631_clear = 2 * (1 - gout601_clear) + gout368_clear;
    auto gout631_clear = fand2(gin631_clear, 4);
    std::cerr << "\rLUT632   ";
    auto gin632_clear = 2 * gout380_clear + gout581_clear;
    auto gout632_clear = fxnor2(gin632_clear, 4);
    std::cerr << "\rLUT633   ";
    auto gin633_clear = 2 * gout255_clear + gout603_clear;
    auto gout633_clear = fxor2(gin633_clear, 4);
    std::cerr << "\rLUT634   ";
    auto gin634_clear = 2 * gout47_clear + gout613_clear;
    auto gout634_clear = fxnor2(gin634_clear, 4);
    std::cerr << "\rLUT635   ";
    auto gin635_clear = 2 * gout49_clear + gout588_clear;
    auto gout635_clear = fxnor2(gin635_clear, 4);
    std::cerr << "\rLUT636   ";
    auto gin636_clear = 2 * ct_x7_clear + gout613_clear;
    auto gout636_clear = fnand2(gin636_clear, 4);
    std::cerr << "\rLUT637   ";
    auto gin637_clear = 2 * gout599_clear + gout625_clear;
    auto gout637_clear = fnand2(gin637_clear, 4);
    std::cerr << "\rLUT638   ";
    auto gin638_clear = 2 * gout586_clear + gout510_clear;
    auto gout638_clear = fxnor2(gin638_clear, 4);
    std::cerr << "\rLUT639   ";
    auto gin639_clear = 2 * gout586_clear + gout510_clear;
    auto gout639_clear = fnand2(gin639_clear, 4);
    std::cerr << "\rLUT640   ";
    auto gin640_clear = 2 * gout607_clear + gout614_clear;
    auto gout640_clear = fxnor2(gin640_clear, 4);
    std::cerr << "\rLUT641   ";
    auto gin641_clear = 2 * gout562_clear + gout621_clear;
    auto gout641_clear = fand2(gin641_clear, 4);
    std::cerr << "\rLUT642   ";
    auto gin642_clear = 2 * gout562_clear + gout621_clear;
    auto gout642_clear = fxnor2(gin642_clear, 4);
    std::cerr << "\rLUT643   ";
    auto gin643_clear = 2 * gout465_clear + gout619_clear;
    auto gout643_clear = fnand2(gin643_clear, 4);
    std::cerr << "\rLUT644   ";
    auto gin644_clear = 2 * gout465_clear + gout619_clear;
    auto gout644_clear = fxor2(gin644_clear, 4);
    std::cerr << "\rLUT645   ";
    auto gin645_clear = 2 * gout492_clear + gout616_clear;
    auto gout645_clear = fxor2(gin645_clear, 4);
    std::cerr << "\rLUT646   ";
    auto gin646_clear = 2 * gout487_clear + gout639_clear;
    auto gout646_clear = fnand2(gin646_clear, 4);
    std::cerr << "\rLUT647   ";
    auto gin647_clear = 2 * gout642_clear + gout491_clear;
    auto gout647_clear = fxnor2(gin647_clear, 4);
    std::cerr << "\rLUT648   ";
    auto gin648_clear = 2 * (1 - gout606_clear) + gout507_clear;
    auto gout648_clear = fand2(gin648_clear, 4);
    std::cerr << "\rLUT649   ";
    auto gin649_clear = 2 * gout608_clear + gout508_clear;
    auto gout649_clear = fnand2(gin649_clear, 4);
    std::cerr << "\rLUT650   ";
    auto gin650_clear = 2 * (1 - gout642_clear) + gout491_clear;
    auto gout650_clear = fand2(gin650_clear, 4);
    std::cerr << "\rLUT651   ";
    auto gin651_clear = 2 * gout323_clear + gout627_clear;
    auto gout651_clear = fxor2(gin651_clear, 4);
    std::cerr << "\rLUT652   ";
    auto gin652_clear = 2 * (1 - gout604_clear) + gout372_clear;
    auto gout652_clear = fand2(gin652_clear, 4);
    std::cerr << "\rLUT653   ";
    auto gin653_clear = 2 * gout563_clear + gout640_clear;
    auto gout653_clear = fxnor2(gin653_clear, 4);
    std::cerr << "\rLUT654   ";
    auto gin654_clear = 2 * gout323_clear + gout627_clear;
    auto gout654_clear = fand2(gin654_clear, 4);
    std::cerr << "\rLUT655   ";
    auto gin655_clear = 2 * gout606_clear + gout507_clear;
    auto gout655_clear = fxnor2(gin655_clear, 4);
    std::cerr << "\rLUT656   ";
    auto gin656_clear = 2 * gout593_clear + gout624_clear;
    auto gout656_clear = for2(gin656_clear, 4);
    std::cerr << "\rLUT657   ";
    auto gin657_clear = 2 * gout623_clear + gout582_clear;
    auto gout657_clear = fxnor2(gin657_clear, 4);
    std::cerr << "\rLUT658   ";
    auto gin658_clear = 2 * gout604_clear + gout372_clear;
    auto gout658_clear = fxnor2(gin658_clear, 4);
    std::cerr << "\rINV659   ";
    long gout659_clear = 1 - gout630_clear;

    std::cerr << "\rLUT660   ";
    auto gin660_clear = 2 * gout516_clear + gout632_clear;
    auto gout660_clear = fand2(gin660_clear, 4);
    std::cerr << "\rLUT661   ";
    auto gin661_clear = 2 * gout583_clear + gout648_clear;
    auto gout661_clear = for2(gin661_clear, 4);
    std::cerr << "\rLUT662   ";
    auto gin662_clear = 2 * gout657_clear + gout609_clear;
    auto gout662_clear = fxnor2(gin662_clear, 4);
    std::cerr << "\rLUT663   ";
    auto gin663_clear = 2 * gout27_clear + gout601_clear;
    auto gout663_clear = fand2(gin663_clear, 4);
    std::cerr << "\rLUT664   ";
    auto gin664_clear = 2 * gout545_clear + gout632_clear;
    auto gout664_clear = fand2(gin664_clear, 4);
    std::cerr << "\rLUT665   ";
    auto gin665_clear = 2 * gout646_clear + gout483_clear;
    auto gout665_clear = fnand2(gin665_clear, 4);
    std::cerr << "\rLUT666   ";
    auto gin666_clear = 2 * gout646_clear + gout483_clear;
    auto gout666_clear = fxnor2(gin666_clear, 4);
    std::cerr << "\rLUT667   ";
    auto gin667_clear = 2 * (1 - gout657_clear) + gout609_clear;
    auto gout667_clear = fand2(gin667_clear, 4);
    std::cerr << "\rLUT668   ";
    auto gin668_clear = 2 * gout577_clear + gout628_clear;
    auto gout668_clear = fnand2(gin668_clear, 4);
    std::cerr << "\rLUT669   ";
    auto gin669_clear = 2 * gout632_clear + gout557_clear;
    auto gout669_clear = fxor2(gin669_clear, 4);
    std::cerr << "\rLUT670   ";
    auto gin670_clear = 2 * gout27_clear + gout631_clear;
    auto gout670_clear = fxnor2(gin670_clear, 4);
    std::cerr << "\rIMUX671  ";
    long gin671A_clear = 2 * gout402_clear + gout335_clear;
    long gout671A_clear = fand2(gin671A_clear, 4);
    long gin671B_clear = 2 * gout638_clear + (1 - gout335_clear);
    long gout671B_clear = fand2(gin671B_clear, 4);
    long gout671_clear = gout671A_clear + gout671B_clear;
    std::cerr << "\rLUT672   ";
    auto gin672_clear = 2 * gout576_clear + gout669_clear;
    auto gout672_clear = fxnor2(gin672_clear, 4);
    std::cerr << "\rLUT673   ";
    auto gin673_clear = 2 * gout626_clear + gout667_clear;
    auto gout673_clear = for2(gin673_clear, 4);
    std::cerr << "\rLUT674   ";
    auto gin674_clear = 2 * gout576_clear + gout669_clear;
    auto gout674_clear = fnand2(gin674_clear, 4);
    std::cerr << "\rLUT675   ";
    auto gin675_clear = 2 * gout641_clear + gout650_clear;
    auto gout675_clear = for2(gin675_clear, 4);
    std::cerr << "\rLUT676   ";
    auto gin676_clear = 2 * gout558_clear + gout652_clear;
    auto gout676_clear = for2(gin676_clear, 4);
    std::cerr << "\rLUT677   ";
    auto gin677_clear = 2 * gout598_clear + gout653_clear;
    auto gout677_clear = fxnor2(gin677_clear, 4);
    std::cerr << "\rLUT678   ";
    auto gin678_clear = 2 * gout656_clear + gout585_clear;
    auto gout678_clear = fnand2(gin678_clear, 4);
    std::cerr << "\rLUT679   ";
    auto gin679_clear = 2 * gout649_clear + gout643_clear;
    auto gout679_clear = fnand2(gin679_clear, 4);
    std::cerr << "\rLUT680   ";
    auto gin680_clear = 2 * gout629_clear + gout655_clear;
    auto gout680_clear = fand2(gin680_clear, 4);
    std::cerr << "\rLUT681   ";
    auto gin681_clear = 2 * gout661_clear + gout597_clear;
    auto gout681_clear = fand2(gin681_clear, 4);
    std::cerr << "\rLUT682   ";
    auto gin682_clear = 2 * gout52_clear + gout663_clear;
    auto gout682_clear = fand2(gin682_clear, 4);
    std::cerr << "\rLUT683   ";
    auto gin683_clear = 2 * gout611_clear + gout658_clear;
    auto gout683_clear = fxnor2(gin683_clear, 4);
    std::cerr << "\rLUT684   ";
    auto gin684_clear = 2 * gout611_clear + gout658_clear;
    auto gout684_clear = fand2(gin684_clear, 4);
    std::cerr << "\rLUT685   ";
    auto gin685_clear = 2 * gout656_clear + gout585_clear;
    auto gout685_clear = fxor2(gin685_clear, 4);
    std::cerr << "\rLUT686   ";
    auto gin686_clear = 2 * gout679_clear + gout647_clear;
    auto gout686_clear = fxor2(gin686_clear, 4);
    std::cerr << "\rLUT687   ";
    auto gin687_clear = 2 * gout661_clear + gout597_clear;
    auto gout687_clear = fxnor2(gin687_clear, 4);
    std::cerr << "\rLUT688   ";
    auto gin688_clear = 2 * gout629_clear + gout655_clear;
    auto gout688_clear = fxnor2(gin688_clear, 4);
    std::cerr << "\rLUT689   ";
    auto gin689_clear = 2 * gout457_clear + gout671_clear;
    auto gout689_clear = fnand2(gin689_clear, 4);
    std::cerr << "\rLUT690   ";
    auto gin690_clear = 2 * gout544_clear + gout665_clear;
    auto gout690_clear = fnand2(gin690_clear, 4);
    std::cerr << "\rLUT691   ";
    auto gin691_clear = 2 * gout676_clear + gout547_clear;
    auto gout691_clear = fxnor2(gin691_clear, 4);
    std::cerr << "\rLUT692   ";
    auto gin692_clear = 2 * gout668_clear + gout630_clear;
    auto gout692_clear = fand2(gin692_clear, 4);
    std::cerr << "\rINV693   ";
    long gout693_clear = 1 - gout660_clear;

    std::cerr << "\rLUT694   ";
    auto gin694_clear = 2 * ct_x8_clear + gout670_clear;
    auto gout694_clear = fnand2(gin694_clear, 4);
    std::cerr << "\rLUT695   ";
    auto gin695_clear = 2 * gout676_clear + gout547_clear;
    auto gout695_clear = fand2(gin695_clear, 4);
    std::cerr << "\rLUT696   ";
    auto gin696_clear = 2 * gout687_clear + gout633_clear;
    auto gout696_clear = fxnor2(gin696_clear, 4);
    std::cerr << "\rLUT697   ";
    auto gin697_clear = 2 * gout675_clear + gout662_clear;
    auto gout697_clear = fxor2(gin697_clear, 4);
    std::cerr << "\rLUT698   ";
    auto gin698_clear = 2 * gout690_clear + gout499_clear;
    auto gout698_clear = fnand2(gin698_clear, 4);
    std::cerr << "\rLUT699   ";
    auto gin699_clear = 2 * (1 - gout663_clear) + gout368_clear;
    auto gout699_clear = fand2(gin699_clear, 4);
    std::cerr << "\rLUT700   ";
    auto gin700_clear = 2 * gout493_clear + gout697_clear;
    auto gout700_clear = fnand2(gin700_clear, 4);
    std::cerr << "\rLUT701   ";
    auto gin701_clear = 2 * gout668_clear + gout659_clear;
    auto gout701_clear = fxnor2(gin701_clear, 4);
    std::cerr << "\rINV702   ";
    long gout702_clear = 1 - gout664_clear;

    std::cerr << "\rLUT703   ";
    auto gin703_clear = 2 * gout679_clear + gout647_clear;
    auto gout703_clear = fand2(gin703_clear, 4);
    std::cerr << "\rLUT704   ";
    auto gin704_clear = 2 * gout139_clear + gout670_clear;
    auto gout704_clear = fxnor2(gin704_clear, 4);
    std::cerr << "\rINV705   ";
    long gout705_clear = 1 - gout674_clear;

    std::cerr << "\rLUT706   ";
    auto gin706_clear = 2 * gout675_clear + gout662_clear;
    auto gout706_clear = fnand2(gin706_clear, 4);
    std::cerr << "\rIMUX707  ";
    long gin707A_clear = 2 * gout525_clear + gout335_clear;
    long gout707A_clear = fand2(gin707A_clear, 4);
    long gin707B_clear = 2 * gout666_clear + (1 - gout335_clear);
    long gout707B_clear = fand2(gin707B_clear, 4);
    long gout707_clear = gout707A_clear + gout707B_clear;
    std::cerr << "\rLUT708   ";
    auto gin708_clear = 2 * (1 - gout691_clear) + gout578_clear;
    auto gout708_clear = fand2(gin708_clear, 4);
    std::cerr << "\rLUT709   ";
    auto gin709_clear = 2 * gout540_clear + gout698_clear;
    auto gout709_clear = fnand2(gin709_clear, 4);
    std::cerr << "\rLUT710   ";
    auto gin710_clear = 2 * gout691_clear + gout578_clear;
    auto gout710_clear = fxnor2(gin710_clear, 4);
    std::cerr << "\rLUT711   ";
    auto gin711_clear = 2 * (1 - gout683_clear) + gout645_clear;
    auto gout711_clear = fand2(gin711_clear, 4);
    std::cerr << "\rLUT712   ";
    auto gin712_clear = 2 * gout709_clear + gout617_clear;
    auto gout712_clear = fxnor2(gin712_clear, 4);
    std::cerr << "\rLUT713   ";
    auto gin713_clear = 2 * gout709_clear + gout617_clear;
    auto gout713_clear = fnand2(gin713_clear, 4);
    std::cerr << "\rLUT714   ";
    auto gin714_clear = 2 * gout688_clear + gout618_clear;
    auto gout714_clear = fxnor2(gin714_clear, 4);
    std::cerr << "\rLUT715   ";
    auto gin715_clear = 2 * (1 - gout682_clear) + gout368_clear;
    auto gout715_clear = fand2(gin715_clear, 4);
    std::cerr << "\rLUT716   ";
    auto gin716_clear = 2 * gout673_clear + gout714_clear;
    auto gout716_clear = fnand2(gin716_clear, 4);
    std::cerr << "\rLUT717   ";
    auto gin717_clear = 2 * (1 - gout688_clear) + gout618_clear;
    auto gout717_clear = fand2(gin717_clear, 4);
    std::cerr << "\rLUT718   ";
    auto gin718_clear = 2 * gout381_clear + gout685_clear;
    auto gout718_clear = fnand2(gin718_clear, 4);
    std::cerr << "\rLUT719   ";
    auto gin719_clear = 2 * gout457_clear + gout707_clear;
    auto gout719_clear = fnand2(gin719_clear, 4);
    std::cerr << "\rLUT720   ";
    auto gin720_clear = 2 * gout690_clear + gout499_clear;
    auto gout720_clear = fxnor2(gin720_clear, 4);
    std::cerr << "\rLUT721   ";
    auto gin721_clear = 2 * gout683_clear + gout645_clear;
    auto gout721_clear = fxnor2(gin721_clear, 4);
    std::cerr << "\rLUT722   ";
    auto gin722_clear = 2 * gout40_clear + gout682_clear;
    auto gout722_clear = fnand2(gin722_clear, 4);
    std::cerr << "\rLUT723   ";
    auto gin723_clear = 2 * gout381_clear + gout685_clear;
    auto gout723_clear = fxor2(gin723_clear, 4);
    std::cerr << "\rLUT724   ";
    auto gin724_clear = 2 * gout52_clear + gout699_clear;
    auto gout724_clear = fxnor2(gin724_clear, 4);
    std::cerr << "\rINV725   ";
    long gout725_clear = 1 - gout703_clear;

    std::cerr << "\rINV726   ";
    long gout726_clear = 1 - gout692_clear;

    std::cerr << "\rLUT727   ";
    auto gin727_clear = 2 * gout684_clear + gout711_clear;
    auto gout727_clear = for2(gin727_clear, 4);
    std::cerr << "\rLUT728   ";
    auto gin728_clear = 2 * gout493_clear + gout697_clear;
    auto gout728_clear = fxor2(gin728_clear, 4);
    std::cerr << "\rLUT729   ";
    auto gin729_clear = 2 * gout693_clear + gout701_clear;
    auto gout729_clear = fxnor2(gin729_clear, 4);
    std::cerr << "\rLUT730   ";
    auto gin730_clear = 2 * (1 - gout687_clear) + gout633_clear;
    auto gout730_clear = fand2(gin730_clear, 4);
    std::cerr << "\rLUT731   ";
    auto gin731_clear = 2 * gout660_clear + gout701_clear;
    auto gout731_clear = fand2(gin731_clear, 4);
    std::cerr << "\rLUT732   ";
    auto gin732_clear = 2 * gout703_clear + gout728_clear;
    auto gout732_clear = fand2(gin732_clear, 4);
    std::cerr << "\rLUT733   ";
    auto gin733_clear = 2 * gout695_clear + gout708_clear;
    auto gout733_clear = for2(gin733_clear, 4);
    std::cerr << "\rLUT734   ";
    auto gin734_clear = 2 * gout706_clear + gout700_clear;
    auto gout734_clear = fnand2(gin734_clear, 4);
    std::cerr << "\rIMUX735  ";
    long gin735A_clear = 2 * gout720_clear + gout428_clear;
    long gout735A_clear = fand2(gin735A_clear, 4);
    long gin735B_clear = 2 * gout579_clear + (1 - gout428_clear);
    long gout735B_clear = fand2(gin735B_clear, 4);
    long gout735_clear = gout735A_clear + gout735B_clear;
    std::cerr << "\rLUT736   ";
    auto gin736_clear = 2 * gout727_clear + gout710_clear;
    auto gout736_clear = fxnor2(gin736_clear, 4);
    std::cerr << "\rLUT737   ";
    auto gin737_clear = 2 * gout736_clear + gout651_clear;
    auto gout737_clear = fxnor2(gin737_clear, 4);
    std::cerr << "\rLUT738   ";
    auto gin738_clear = 2 * gout727_clear + gout710_clear;
    auto gout738_clear = fnand2(gin738_clear, 4);
    std::cerr << "\rIMUX739  ";
    long gin739A_clear = 2 * gout672_clear + gout335_clear;
    long gout739A_clear = fand2(gin739A_clear, 4);
    long gin739B_clear = 2 * gout712_clear + (1 - gout335_clear);
    long gout739B_clear = fand2(gin739B_clear, 4);
    long gout739_clear = gout739A_clear + gout739B_clear;
    std::cerr << "\rLUT740   ";
    auto gin740_clear = 2 * gout192_clear + gout724_clear;
    auto gout740_clear = fxnor2(gin740_clear, 4);
    std::cerr << "\rLUT741   ";
    auto gin741_clear = 2 * gout40_clear + gout715_clear;
    auto gout741_clear = fxnor2(gin741_clear, 4);
    std::cerr << "\rLUT742   ";
    auto gin742_clear = 2 * gout673_clear + gout714_clear;
    auto gout742_clear = fxor2(gin742_clear, 4);
    std::cerr << "\rLUT743   ";
    auto gin743_clear = 2 * ct_x9_clear + gout724_clear;
    auto gout743_clear = fnand2(gin743_clear, 4);
    std::cerr << "\rLUT744   ";
    auto gin744_clear = 2 * gout605_clear + gout742_clear;
    auto gout744_clear = fnand2(gin744_clear, 4);
    std::cerr << "\rLUT745   ";
    auto gin745_clear = 2 * gout457_clear + gout735_clear;
    auto gout745_clear = fnand2(gin745_clear, 4);
    std::cerr << "\rLUT746   ";
    auto gin746_clear = 2 * ct_x9_clear + gout724_clear;
    auto gout746_clear = for2(gin746_clear, 4);
    std::cerr << "\rLUT747   ";
    auto gin747_clear = 2 * gout692_clear + gout723_clear;
    auto gout747_clear = fand2(gin747_clear, 4);
    std::cerr << "\rINV748   ";
    long gout748_clear = 1 - gout732_clear;

    std::cerr << "\rINV749   ";
    long gout749_clear = 1 - gout740_clear;

    std::cerr << "\rLUT750   ";
    auto gin750_clear = 2 * gout678_clear + gout718_clear;
    auto gout750_clear = fnand2(gin750_clear, 4);
    std::cerr << "\rLUT751   ";
    auto gin751_clear = 2 * gout680_clear + gout717_clear;
    auto gout751_clear = for2(gin751_clear, 4);
    std::cerr << "\rLUT752   ";
    auto gin752_clear = 2 * gout664_clear + gout729_clear;
    auto gout752_clear = fnand2(gin752_clear, 4);
    std::cerr << "\rINV753   ";
    long gout753_clear = 1 - gout731_clear;

    std::cerr << "\rLUT754   ";
    auto gin754_clear = 2 * gout368_clear + gout722_clear;
    auto gout754_clear = fand2(gin754_clear, 4);
    std::cerr << "\rLUT755   ";
    auto gin755_clear = 2 * gout457_clear + gout739_clear;
    auto gout755_clear = fnand2(gin755_clear, 4);
    std::cerr << "\rLUT756   ";
    auto gin756_clear = 2 * gout694_clear + gout743_clear;
    auto gout756_clear = fnand2(gin756_clear, 4);
    std::cerr << "\rLUT757   ";
    auto gin757_clear = 2 * gout726_clear + gout723_clear;
    auto gout757_clear = fxnor2(gin757_clear, 4);
    std::cerr << "\rLUT758   ";
    auto gin758_clear = 2 * gout681_clear + gout730_clear;
    auto gout758_clear = for2(gin758_clear, 4);
    std::cerr << "\rLUT759   ";
    auto gin759_clear = 2 * gout615_clear + gout713_clear;
    auto gout759_clear = fnand2(gin759_clear, 4);
    std::cerr << "\rLUT760   ";
    auto gin760_clear = 2 * gout702_clear + gout729_clear;
    auto gout760_clear = fxnor2(gin760_clear, 4);
    std::cerr << "\rLUT761   ";
    auto gin761_clear = 2 * gout716_clear + gout744_clear;
    auto gout761_clear = fnand2(gin761_clear, 4);
    std::cerr << "\rLUT762   ";
    auto gin762_clear = 2 * gout751_clear + gout696_clear;
    auto gout762_clear = fnand2(gin762_clear, 4);
    std::cerr << "\rLUT763   ";
    auto gin763_clear = 2 * gout733_clear + gout677_clear;
    auto gout763_clear = fxnor2(gin763_clear, 4);
    std::cerr << "\rLUT764   ";
    auto gin764_clear = 2 * gout750_clear + gout644_clear;
    auto gout764_clear = fxor2(gin764_clear, 4);
    std::cerr << "\rLUT765   ";
    auto gin765_clear = 2 * gout725_clear + gout728_clear;
    auto gout765_clear = fxnor2(gin765_clear, 4);
    std::cerr << "\rLUT766   ";
    auto gin766_clear = 2 * gout759_clear + gout635_clear;
    auto gout766_clear = fxnor2(gin766_clear, 4);
    std::cerr << "\rLUT767   ";
    auto gin767_clear = 2 * gout751_clear + gout696_clear;
    auto gout767_clear = fxor2(gin767_clear, 4);
    std::cerr << "\rLUT768   ";
    auto gin768_clear = 2 * gout758_clear + gout721_clear;
    auto gout768_clear = fnand2(gin768_clear, 4);
    std::cerr << "\rLUT769   ";
    auto gin769_clear = 2 * gout750_clear + gout644_clear;
    auto gout769_clear = fand2(gin769_clear, 4);
    std::cerr << "\rLUT770   ";
    auto gin770_clear = 2 * gout758_clear + gout721_clear;
    auto gout770_clear = fxor2(gin770_clear, 4);
    std::cerr << "\rLUT771   ";
    auto gin771_clear = 2 * (1 - gout754_clear) + gout437_clear;
    auto gout771_clear = fand2(gin771_clear, 4);
    std::cerr << "\rLUT772   ";
    auto gin772_clear = 2 * (1 - gout736_clear) + gout651_clear;
    auto gout772_clear = fand2(gin772_clear, 4);
    std::cerr << "\rLUT773   ";
    auto gin773_clear = 2 * gout38_clear + gout741_clear;
    auto gout773_clear = fxnor2(gin773_clear, 4);
    std::cerr << "\rLUT774   ";
    auto gin774_clear = 2 * ct_x10_clear + gout741_clear;
    auto gout774_clear = fnand2(gin774_clear, 4);
    std::cerr << "\rLUT775   ";
    auto gin775_clear = 2 * gout769_clear + gout686_clear;
    auto gout775_clear = fxor2(gin775_clear, 4);
    std::cerr << "\rLUT776   ";
    auto gin776_clear = 2 * gout605_clear + gout742_clear;
    auto gout776_clear = fxor2(gin776_clear, 4);
    std::cerr << "\rINV777   ";
    long gout777_clear = 1 - gout747_clear;

    std::cerr << "\rLUT778   ";
    auto gin778_clear = 2 * gout769_clear + gout686_clear;
    auto gout778_clear = fand2(gin778_clear, 4);
    std::cerr << "\rLUT779   ";
    auto gin779_clear = 2 * gout738_clear + (1 - gout772_clear);
    auto gout779_clear = fand2(gin779_clear, 4);
    std::cerr << "\rLUT780   ";
    auto gin780_clear = 2 * ct_y11_clear + gout754_clear;
    auto gout780_clear = fxnor2(gin780_clear, 4);
    std::cerr << "\rLUT781   ";
    auto gin781_clear = 2 * gout705_clear + gout760_clear;
    auto gout781_clear = fnand2(gin781_clear, 4);
    std::cerr << "\rLUT782   ";
    auto gin782_clear = 2 * gout705_clear + gout760_clear;
    auto gout782_clear = fxnor2(gin782_clear, 4);
    std::cerr << "\rLUT783   ";
    auto gin783_clear = 2 * gout746_clear + gout756_clear;
    auto gout783_clear = fnand2(gin783_clear, 4);
    std::cerr << "\rLUT784   ";
    auto gin784_clear = 2 * gout731_clear + gout757_clear;
    auto gout784_clear = fnand2(gin784_clear, 4);
    std::cerr << "\rLUT785   ";
    auto gin785_clear = 2 * gout753_clear + gout757_clear;
    auto gout785_clear = fxnor2(gin785_clear, 4);
    std::cerr << "\rLUT786   ";
    auto gin786_clear = 2 * gout622_clear + gout767_clear;
    auto gout786_clear = fxor2(gin786_clear, 4);
    std::cerr << "\rLUT787   ";
    auto gin787_clear = 2 * gout759_clear + gout635_clear;
    auto gout787_clear = fnand2(gin787_clear, 4);
    std::cerr << "\rLUT788   ";
    auto gin788_clear = 2 * gout622_clear + gout767_clear;
    auto gout788_clear = fnand2(gin788_clear, 4);
    std::cerr << "\rLUT789   ";
    auto gin789_clear = 2 * gout637_clear + gout770_clear;
    auto gout789_clear = fnand2(gin789_clear, 4);
    std::cerr << "\rLUT790   ";
    auto gin790_clear = 2 * ct_y12_clear + gout771_clear;
    auto gout790_clear = fxnor2(gin790_clear, 4);
    std::cerr << "\rLUT791   ";
    auto gin791_clear = 2 * gout747_clear + gout764_clear;
    auto gout791_clear = fand2(gin791_clear, 4);
    std::cerr << "\rLUT792   ";
    auto gin792_clear = 2 * gout637_clear + gout770_clear;
    auto gout792_clear = fxor2(gin792_clear, 4);
    std::cerr << "\rLUT793   ";
    auto gin793_clear = 2 * gout778_clear + gout765_clear;
    auto gout793_clear = fxor2(gin793_clear, 4);
    std::cerr << "\rLUT794   ";
    auto gin794_clear = 2 * gout778_clear + gout765_clear;
    auto gout794_clear = fnand2(gin794_clear, 4);
    std::cerr << "\rLUT795   ";
    auto gin795_clear = 2 * gout768_clear + gout789_clear;
    auto gout795_clear = fnand2(gin795_clear, 4);
    std::cerr << "\rIMUX796  ";
    long gin796A_clear = 2 * gout782_clear + gout335_clear;
    long gout796A_clear = fand2(gin796A_clear, 4);
    long gin796B_clear = 2 * gout766_clear + (1 - gout335_clear);
    long gout796B_clear = fand2(gin796B_clear, 4);
    long gout796_clear = gout796A_clear + gout796B_clear;
    std::cerr << "\rLUT797   ";
    auto gin797_clear = 2 * gout779_clear + gout763_clear;
    auto gout797_clear = fxnor2(gin797_clear, 4);
    std::cerr << "\rLUT798   ";
    auto gin798_clear = 2 * gout734_clear + gout776_clear;
    auto gout798_clear = fand2(gin798_clear, 4);
    std::cerr << "\rLUT799   ";
    auto gin799_clear = 2 * gout791_clear + gout775_clear;
    auto gout799_clear = fxnor2(gin799_clear, 4);
    std::cerr << "\rLUT800   ";
    auto gin800_clear = 2 * gout771_clear + gout444_clear;
    auto gout800_clear = fnand2(gin800_clear, 4);
    std::cerr << "\rLUT801   ";
    auto gin801_clear = 2 * gout734_clear + gout776_clear;
    auto gout801_clear = fxor2(gin801_clear, 4);
    std::cerr << "\rLUT802   ";
    auto gin802_clear = 2 * gout79_clear + gout780_clear;
    auto gout802_clear = fnand2(gin802_clear, 4);
    std::cerr << "\rLUT803   ";
    auto gin803_clear = 2 * gout784_clear + (1 - gout764_clear);
    auto gout803_clear = for2(gin803_clear, 4);
    std::cerr << "\rLUT804   ";
    auto gin804_clear = 2 * gout182_clear + gout790_clear;
    auto gout804_clear = fxnor2(gin804_clear, 4);
    std::cerr << "\rLUT805   ";
    auto gin805_clear = 2 * gout791_clear + gout775_clear;
    auto gout805_clear = fnand2(gin805_clear, 4);
    std::cerr << "\rLUT806   ";
    auto gin806_clear = 2 * gout762_clear + gout788_clear;
    auto gout806_clear = fnand2(gin806_clear, 4);
    std::cerr << "\rLUT807   ";
    auto gin807_clear = 2 * gout777_clear + gout784_clear;
    auto gout807_clear = fand2(gin807_clear, 4);
    std::cerr << "\rLUT808   ";
    auto gin808_clear = 2 * gout600_clear + gout787_clear;
    auto gout808_clear = fnand2(gin808_clear, 4);
    std::cerr << "\rLUT809   ";
    auto gin809_clear = 2 * gout79_clear + gout780_clear;
    auto gout809_clear = for2(gin809_clear, 4);
    std::cerr << "\rLUT810   ";
    auto gin810_clear = 2 * ct_x11_clear + gout780_clear;
    auto gout810_clear = fxnor2(gin810_clear, 4);
    std::cerr << "\rLUT811   ";
    auto gin811_clear = 2 * gout457_clear + gout796_clear;
    auto gout811_clear = fnand2(gin811_clear, 4);
    std::cerr << "\rLUT812   ";
    auto gin812_clear = 2 * gout752_clear + gout781_clear;
    auto gout812_clear = fnand2(gin812_clear, 4);
    std::cerr << "\rLUT813   ";
    auto gin813_clear = 2 * gout808_clear + gout634_clear;
    auto gout813_clear = fnand2(gin813_clear, 4);
    std::cerr << "\rLUT814   ";
    auto gin814_clear = 2 * gout761_clear + gout786_clear;
    auto gout814_clear = fxor2(gin814_clear, 4);
    std::cerr << "\rLUT815   ";
    auto gin815_clear = 2 * gout808_clear + gout634_clear;
    auto gout815_clear = fxnor2(gin815_clear, 4);
    std::cerr << "\rLUT816   ";
    auto gin816_clear = 2 * gout761_clear + gout786_clear;
    auto gout816_clear = fand2(gin816_clear, 4);
    std::cerr << "\rLUT817   ";
    auto gin817_clear = 2 * gout806_clear + gout792_clear;
    auto gout817_clear = fand2(gin817_clear, 4);
    std::cerr << "\rINV818   ";
    long gout818_clear = 1 - gout810_clear;

    std::cerr << "\rLUT819   ";
    auto gin819_clear = 2 * ct_x12_clear + gout790_clear;
    auto gout819_clear = fnand2(gin819_clear, 4);
    std::cerr << "\rLUT820   ";
    auto gin820_clear = 2 * gout806_clear + gout792_clear;
    auto gout820_clear = fxor2(gin820_clear, 4);
    std::cerr << "\rLUT821   ";
    auto gin821_clear = 2 * gout795_clear + gout737_clear;
    auto gout821_clear = fand2(gin821_clear, 4);
    std::cerr << "\rLUT822   ";
    auto gin822_clear = 2 * gout795_clear + gout737_clear;
    auto gout822_clear = fxor2(gin822_clear, 4);
    std::cerr << "\rLUT823   ";
    auto gin823_clear = 2 * ct_y13_clear + gout800_clear;
    auto gout823_clear = fxnor2(gin823_clear, 4);
    std::cerr << "\rLUT824   ";
    auto gin824_clear = 2 * gout654_clear + gout821_clear;
    auto gout824_clear = fxnor2(gin824_clear, 4);
    std::cerr << "\rLUT825   ";
    auto gin825_clear = 2 * gout800_clear + gout374_clear;
    auto gout825_clear = for2(gin825_clear, 4);
    std::cerr << "\rLUT826   ";
    auto gin826_clear = 2 * gout764_clear + gout807_clear;
    auto gout826_clear = fxnor2(gin826_clear, 4);
    std::cerr << "\rLUT827   ";
    auto gin827_clear = 2 * gout732_clear + gout801_clear;
    auto gout827_clear = fnand2(gin827_clear, 4);
    std::cerr << "\rLUT828   ";
    auto gin828_clear = 2 * gout748_clear + gout801_clear;
    auto gout828_clear = fxnor2(gin828_clear, 4);
    std::cerr << "\rLUT829   ";
    auto gin829_clear = 2 * gout785_clear + gout812_clear;
    auto gout829_clear = fxnor2(gin829_clear, 4);
    std::cerr << "\rLUT830   ";
    auto gin830_clear = 2 * gout163_clear + gout823_clear;
    auto gout830_clear = fnand2(gin830_clear, 4);
    std::cerr << "\rLUT831   ";
    auto gin831_clear = 2 * gout163_clear + gout823_clear;
    auto gout831_clear = for2(gin831_clear, 4);
    std::cerr << "\rLUT832   ";
    auto gin832_clear = 2 * gout785_clear + gout812_clear;
    auto gout832_clear = fand2(gin832_clear, 4);
    std::cerr << "\rLUT833   ";
    auto gin833_clear = 2 * gout798_clear + gout814_clear;
    auto gout833_clear = fxor2(gin833_clear, 4);
    std::cerr << "\rLUT834   ";
    auto gin834_clear = 2 * gout774_clear + gout809_clear;
    auto gout834_clear = fnand2(gin834_clear, 4);
    std::cerr << "\rLUT835   ";
    auto gin835_clear = 2 * ct_x13_clear + gout823_clear;
    auto gout835_clear = fxnor2(gin835_clear, 4);
    std::cerr << "\rLUT836   ";
    auto gin836_clear = 2 * gout819_clear + gout831_clear;
    auto gout836_clear = fnand2(gin836_clear, 4);
    std::cerr << "\rLUT837   ";
    auto gin837_clear = 2 * gout636_clear + gout813_clear;
    auto gout837_clear = fnand2(gin837_clear, 4);
    std::cerr << "\rLUT838   ";
    auto gin838_clear = 2 * gout798_clear + gout814_clear;
    auto gout838_clear = fnand2(gin838_clear, 4);
    std::cerr << "\rLUT839   ";
    auto gin839_clear = 2 * gout816_clear + gout820_clear;
    auto gout839_clear = fnand2(gin839_clear, 4);
    std::cerr << "\rLUT840   ";
    auto gin840_clear = 2 * gout797_clear + gout824_clear;
    auto gout840_clear = fxnor2(gin840_clear, 4);
    std::cerr << "\rLUT841   ";
    auto gin841_clear = 2 * gout832_clear + gout826_clear;
    auto gout841_clear = fnand2(gin841_clear, 4);
    std::cerr << "\rLUT842   ";
    auto gin842_clear = 2 * gout816_clear + gout820_clear;
    auto gout842_clear = fxor2(gin842_clear, 4);
    std::cerr << "\rLUT843   ";
    auto gin843_clear = 2 * gout817_clear + gout822_clear;
    auto gout843_clear = fnand2(gin843_clear, 4);
    std::cerr << "\rLUT844   ";
    auto gin844_clear = 2 * gout817_clear + gout822_clear;
    auto gout844_clear = fxor2(gin844_clear, 4);
    std::cerr << "\rIMUX845  ";
    long gin845A_clear = 2 * gout829_clear + gout335_clear;
    long gout845A_clear = fand2(gin845A_clear, 4);
    long gin845B_clear = 2 * gout815_clear + (1 - gout335_clear);
    long gout845B_clear = fand2(gin845B_clear, 4);
    long gout845_clear = gout845A_clear + gout845B_clear;
    std::cerr << "\rLUT846   ";
    auto gin846_clear = 2 * gout832_clear + gout826_clear;
    auto gout846_clear = fxnor2(gin846_clear, 4);
    std::cerr << "\rLUT847   ";
    auto gin847_clear = 2 * gout837_clear + gout704_clear;
    auto gout847_clear = fnand2(gin847_clear, 4);
    std::cerr << "\rLUT848   ";
    auto gin848_clear = 2 * gout133_clear + gout825_clear;
    auto gout848_clear = fxnor2(gin848_clear, 4);
    std::cerr << "\rLUT849   ";
    auto gin849_clear = 2 * gout837_clear + gout704_clear;
    auto gout849_clear = fxnor2(gin849_clear, 4);
    std::cerr << "\rLUT850   ";
    auto gin850_clear = 2 * gout825_clear + gout454_clear;
    auto gout850_clear = for2(gin850_clear, 4);
    std::cerr << "\rLUT851   ";
    auto gin851_clear = 2 * gout17_clear + gout848_clear;
    auto gout851_clear = fxnor2(gin851_clear, 4);
    std::cerr << "\rLUT852   ";
    auto gin852_clear = 2 * gout802_clear + gout834_clear;
    auto gout852_clear = fnand2(gin852_clear, 4);
    std::cerr << "\rINV853   ";
    long gout853_clear = 1 - gout835_clear;

    std::cerr << "\rLUT854   ";
    auto gin854_clear = 2 * gout830_clear + gout836_clear;
    auto gout854_clear = fnand2(gin854_clear, 4);
    std::cerr << "\rLUT855   ";
    auto gin855_clear = 2 * gout457_clear + gout845_clear;
    auto gout855_clear = fnand2(gin855_clear, 4);
    std::cerr << "\rLUT856   ";
    auto gin856_clear = 2 * gout841_clear + gout803_clear;
    auto gout856_clear = fand2(gin856_clear, 4);
    std::cerr << "\rLUT857   ";
    auto gin857_clear = 2 * gout850_clear + gout138_clear;
    auto gout857_clear = fxnor2(gin857_clear, 4);
    std::cerr << "\rLUT858   ";
    auto gin858_clear = 2 * ct_x14_clear + gout848_clear;
    auto gout858_clear = fnand2(gin858_clear, 4);
    std::cerr << "\rLUT859   ";
    auto gin859_clear = 2 * gout847_clear + gout749_clear;
    auto gout859_clear = for2(gin859_clear, 4);
    std::cerr << "\rIMUX860  ";
    long gin860A_clear = 2 * gout846_clear + gout335_clear;
    long gout860A_clear = fand2(gin860A_clear, 4);
    long gin860B_clear = 2 * gout849_clear + (1 - gout335_clear);
    long gout860B_clear = fand2(gin860B_clear, 4);
    long gout860_clear = gout860A_clear + gout860B_clear;
    std::cerr << "\rLUT861   ";
    auto gin861_clear = 2 * gout694_clear + gout847_clear;
    auto gout861_clear = fnand2(gin861_clear, 4);
    std::cerr << "\rLUT862   ";
    auto gin862_clear = 2 * gout856_clear + gout799_clear;
    auto gout862_clear = for2(gin862_clear, 4);
    std::cerr << "\rLUT863   ";
    auto gin863_clear = 2 * gout856_clear + gout799_clear;
    auto gout863_clear = fnand2(gin863_clear, 4);
    std::cerr << "\rLUT864   ";
    auto gin864_clear = 2 * gout861_clear + gout740_clear;
    auto gout864_clear = for2(gin864_clear, 4);
    std::cerr << "\rLUT865   ";
    auto gin865_clear = 2 * gout861_clear + gout740_clear;
    auto gout865_clear = fnand2(gin865_clear, 4);
    std::cerr << "\rLUT866   ";
    auto gin866_clear = 2 * gout457_clear + gout860_clear;
    auto gout866_clear = fnand2(gin866_clear, 4);
    std::cerr << "\rLUT867   ";
    auto gin867_clear = 2 * gout859_clear + gout783_clear;
    auto gout867_clear = fnand2(gin867_clear, 4);
    std::cerr << "\rLUT868   ";
    auto gin868_clear = 2 * gout428_clear + gout864_clear;
    auto gout868_clear = fand2(gin868_clear, 4);
    std::cerr << "\rLUT869   ";
    auto gin869_clear = 2 * gout867_clear + gout773_clear;
    auto gout869_clear = fxnor2(gin869_clear, 4);
    std::cerr << "\rLUT870   ";
    auto gin870_clear = 2 * gout335_clear + gout862_clear;
    auto gout870_clear = fand2(gin870_clear, 4);
    std::cerr << "\rLUT871   ";
    auto gin871_clear = 2 * gout865_clear + gout868_clear;
    auto gout871_clear = fnand2(gin871_clear, 4);
    std::cerr << "\rLUT872   ";
    auto gin872_clear = 2 * gout867_clear + gout773_clear;
    auto gout872_clear = fnand2(gin872_clear, 4);
    std::cerr << "\rLUT873   ";
    auto gin873_clear = 2 * gout805_clear + gout862_clear;
    auto gout873_clear = fnand2(gin873_clear, 4);
    std::cerr << "\rLUT874   ";
    auto gin874_clear = 2 * gout872_clear + gout818_clear;
    auto gout874_clear = for2(gin874_clear, 4);
    std::cerr << "\rLUT875   ";
    auto gin875_clear = 2 * gout873_clear + gout793_clear;
    auto gout875_clear = fnand2(gin875_clear, 4);
    std::cerr << "\rLUT876   ";
    auto gin876_clear = 2 * gout873_clear + gout793_clear;
    auto gout876_clear = fxnor2(gin876_clear, 4);
    std::cerr << "\rLUT877   ";
    auto gin877_clear = 2 * gout774_clear + gout872_clear;
    auto gout877_clear = fnand2(gin877_clear, 4);
    std::cerr << "\rLUT878   ";
    auto gin878_clear = 2 * gout863_clear + gout870_clear;
    auto gout878_clear = fnand2(gin878_clear, 4);
    std::cerr << "\rLUT879   ";
    auto gin879_clear = 2 * gout794_clear + gout875_clear;
    auto gout879_clear = fnand2(gin879_clear, 4);
    std::cerr << "\rLUT880   ";
    auto gin880_clear = 2 * gout874_clear + gout852_clear;
    auto gout880_clear = fnand2(gin880_clear, 4);
    std::cerr << "\rIMUX881  ";
    long gin881A_clear = 2 * gout876_clear + gout335_clear;
    long gout881A_clear = fand2(gin881A_clear, 4);
    long gin881B_clear = 2 * gout869_clear + (1 - gout335_clear);
    long gout881B_clear = fand2(gin881B_clear, 4);
    long gout881_clear = gout881A_clear + gout881B_clear;
    std::cerr << "\rLUT882   ";
    auto gin882_clear = 2 * gout879_clear + gout828_clear;
    auto gout882_clear = fnand2(gin882_clear, 4);
    std::cerr << "\rLUT883   ";
    auto gin883_clear = 2 * gout877_clear + gout810_clear;
    auto gout883_clear = fnand2(gin883_clear, 4);
    std::cerr << "\rLUT884   ";
    auto gin884_clear = 2 * gout879_clear + gout828_clear;
    auto gout884_clear = for2(gin884_clear, 4);
    std::cerr << "\rLUT885   ";
    auto gin885_clear = 2 * gout877_clear + gout810_clear;
    auto gout885_clear = for2(gin885_clear, 4);
    std::cerr << "\rLUT886   ";
    auto gin886_clear = 2 * gout457_clear + gout878_clear;
    auto gout886_clear = fand2(gin886_clear, 4);
    std::cerr << "\rLUT887   ";
    auto gin887_clear = 2 * gout457_clear + gout881_clear;
    auto gout887_clear = fnand2(gin887_clear, 4);
    std::cerr << "\rLUT888   ";
    auto gin888_clear = 2 * gout880_clear + gout804_clear;
    auto gout888_clear = fnand2(gin888_clear, 4);
    std::cerr << "\rLUT889   ";
    auto gin889_clear = 2 * gout880_clear + gout804_clear;
    auto gout889_clear = fxnor2(gin889_clear, 4);
    std::cerr << "\rLUT890   ";
    auto gin890_clear = 2 * gout428_clear + gout885_clear;
    auto gout890_clear = fand2(gin890_clear, 4);
    std::cerr << "\rLUT891   ";
    auto gin891_clear = 2 * gout819_clear + gout888_clear;
    auto gout891_clear = fnand2(gin891_clear, 4);
    std::cerr << "\rLUT892   ";
    auto gin892_clear = 2 * gout888_clear + gout853_clear;
    auto gout892_clear = for2(gin892_clear, 4);
    std::cerr << "\rLUT893   ";
    auto gin893_clear = 2 * gout892_clear + gout854_clear;
    auto gout893_clear = fnand2(gin893_clear, 4);
    std::cerr << "\rLUT894   ";
    auto gin894_clear = 2 * gout335_clear + gout884_clear;
    auto gout894_clear = fand2(gin894_clear, 4);
    std::cerr << "\rLUT895   ";
    auto gin895_clear = 2 * gout893_clear + gout851_clear;
    auto gout895_clear = fnand2(gin895_clear, 4);
    std::cerr << "\rLUT896   ";
    auto gin896_clear = 2 * gout827_clear + gout882_clear;
    auto gout896_clear = fnand2(gin896_clear, 4);
    std::cerr << "\rLUT897   ";
    auto gin897_clear = 2 * gout893_clear + gout851_clear;
    auto gout897_clear = fxnor2(gin897_clear, 4);
    std::cerr << "\rLUT898   ";
    auto gin898_clear = 2 * gout871_clear + gout886_clear;
    auto gout898_clear = fnand2(gin898_clear, 4);
    std::cerr << "\rLUT899   ";
    auto gin899_clear = 2 * gout896_clear + gout833_clear;
    auto gout899_clear = fxnor2(gin899_clear, 4);
    std::cerr << "\rLUT900   ";
    auto gin900_clear = 2 * gout891_clear + gout835_clear;
    auto gout900_clear = fnand2(gin900_clear, 4);
    std::cerr << "\rLUT901   ";
    auto gin901_clear = 2 * gout883_clear + gout890_clear;
    auto gout901_clear = fnand2(gin901_clear, 4);
    std::cerr << "\rLUT902   ";
    auto gin902_clear = 2 * gout896_clear + gout833_clear;
    auto gout902_clear = fnand2(gin902_clear, 4);
    std::cerr << "\rLUT903   ";
    auto gin903_clear = 2 * gout891_clear + gout835_clear;
    auto gout903_clear = for2(gin903_clear, 4);
    std::cerr << "\rLUT904   ";
    auto gin904_clear = 2 * gout428_clear + gout903_clear;
    auto gout904_clear = fand2(gin904_clear, 4);
    std::cerr << "\rLUT905   ";
    auto gin905_clear = 2 * gout882_clear + gout894_clear;
    auto gout905_clear = fnand2(gin905_clear, 4);
    std::cerr << "\rIMUX906  ";
    long gin906A_clear = 2 * gout899_clear + gout335_clear;
    long gout906A_clear = fand2(gin906A_clear, 4);
    long gin906B_clear = 2 * gout889_clear + (1 - gout335_clear);
    long gout906B_clear = fand2(gin906B_clear, 4);
    long gout906_clear = gout906A_clear + gout906B_clear;
    std::cerr << "\rLUT907   ";
    auto gin907_clear = 2 * gout858_clear + gout895_clear;
    auto gout907_clear = fand2(gin907_clear, 4);
    std::cerr << "\rLUT908   ";
    auto gin908_clear = 2 * gout900_clear + gout904_clear;
    auto gout908_clear = fnand2(gin908_clear, 4);
    std::cerr << "\rLUT909   ";
    auto gin909_clear = 2 * gout457_clear + gout906_clear;
    auto gout909_clear = fnand2(gin909_clear, 4);
    std::cerr << "\rLUT910   ";
    auto gin910_clear = 2 * gout838_clear + gout902_clear;
    auto gout910_clear = fnand2(gin910_clear, 4);
    std::cerr << "\rLUT911   ";
    auto gin911_clear = 2 * gout457_clear + gout905_clear;
    auto gout911_clear = fand2(gin911_clear, 4);
    std::cerr << "\rLUT912   ";
    auto gin912_clear = 2 * gout901_clear + gout911_clear;
    auto gout912_clear = fnand2(gin912_clear, 4);
    std::cerr << "\rLUT913   ";
    auto gin913_clear = 2 * gout907_clear + gout857_clear;
    auto gout913_clear = for2(gin913_clear, 4);
    std::cerr << "\rLUT914   ";
    auto gin914_clear = 2 * gout907_clear + gout857_clear;
    auto gout914_clear = fnand2(gin914_clear, 4);
    std::cerr << "\rLUT915   ";
    auto gin915_clear = 2 * gout910_clear + gout842_clear;
    auto gout915_clear = fnand2(gin915_clear, 4);
    std::cerr << "\rLUT916   ";
    auto gin916_clear = 2 * gout910_clear + gout842_clear;
    auto gout916_clear = for2(gin916_clear, 4);
    std::cerr << "\rLUT917   ";
    auto gin917_clear = 2 * gout428_clear + gout913_clear;
    auto gout917_clear = fand2(gin917_clear, 4);
    std::cerr << "\rLUT918   ";
    auto gin918_clear = 2 * gout335_clear + gout916_clear;
    auto gout918_clear = fand2(gin918_clear, 4);
    std::cerr << "\rLUT919   ";
    auto gin919_clear = 2 * gout839_clear + gout915_clear;
    auto gout919_clear = fnand2(gin919_clear, 4);
    std::cerr << "\rLUT920   ";
    auto gin920_clear = 2 * gout914_clear + gout917_clear;
    auto gout920_clear = fnand2(gin920_clear, 4);
    std::cerr << "\rLUT921   ";
    auto gin921_clear = 2 * gout919_clear + gout844_clear;
    auto gout921_clear = fxnor2(gin921_clear, 4);
    std::cerr << "\rLUT922   ";
    auto gin922_clear = 2 * gout915_clear + gout918_clear;
    auto gout922_clear = fnand2(gin922_clear, 4);
    std::cerr << "\rLUT923   ";
    auto gin923_clear = 2 * gout919_clear + gout844_clear;
    auto gout923_clear = fnand2(gin923_clear, 4);
    std::cerr << "\rIMUX924  ";
    long gin924A_clear = 2 * gout921_clear + gout335_clear;
    long gout924A_clear = fand2(gin924A_clear, 4);
    long gin924B_clear = 2 * gout897_clear + (1 - gout335_clear);
    long gout924B_clear = fand2(gin924B_clear, 4);
    long gout924_clear = gout924A_clear + gout924B_clear;
    std::cerr << "\rLUT925   ";
    auto gin925_clear = 2 * gout457_clear + gout920_clear;
    auto gout925_clear = fand2(gin925_clear, 4);
    std::cerr << "\rLUT926   ";
    auto gin926_clear = 2 * gout457_clear + gout924_clear;
    auto gout926_clear = fnand2(gin926_clear, 4);
    std::cerr << "\rLUT927   ";
    auto gin927_clear = 2 * gout457_clear + gout922_clear;
    auto gout927_clear = fand2(gin927_clear, 4);
    std::cerr << "\rLUT928   ";
    auto gin928_clear = 2 * gout843_clear + gout923_clear;
    auto gout928_clear = fand2(gin928_clear, 4);
    std::cerr << "\rLUT929   ";
    auto gin929_clear = 2 * gout928_clear + gout840_clear;
    auto gout929_clear = fnand2(gin929_clear, 4);
    std::cerr << "\rLUT930   ";
    auto gin930_clear = 2 * gout928_clear + gout840_clear;
    auto gout930_clear = for2(gin930_clear, 4);
    std::cerr << "\rLUT931   ";
    auto gin931_clear = 2 * gout908_clear + gout927_clear;
    auto gout931_clear = fnand2(gin931_clear, 4);
    std::cerr << "\rLUT932   ";
    auto gin932_clear = 2 * gout335_clear + gout930_clear;
    auto gout932_clear = fand2(gin932_clear, 4);
    std::cerr << "\rLUT933   ";
    auto gin933_clear = 2 * gout929_clear + gout932_clear;
    auto gout933_clear = fnand2(gin933_clear, 4);
    std::cerr << "\rLUT934   ";
    auto gin934_clear = 2 * gout933_clear + gout925_clear;
    auto gout934_clear = fnand2(gin934_clear, 4);

    std::cerr << "\r          \r";
    std::vector<long> out;
    out.push_back(gout496_clear); /* out0 */
    out.push_back(gout610_clear); /* out1 */
    out.push_back(gout689_clear); /* out2 */
    out.push_back(gout719_clear); /* out3 */
    out.push_back(gout745_clear); /* out4 */
    out.push_back(gout755_clear); /* out5 */
    out.push_back(gout811_clear); /* out6 */
    out.push_back(gout855_clear); /* out7 */
    out.push_back(gout866_clear); /* out8 */
    out.push_back(gout898_clear); /* out9 */
    out.push_back(gout887_clear); /* out10 */
    out.push_back(gout912_clear); /* out11 */
    out.push_back(gout909_clear); /* out12 */
    out.push_back(gout931_clear); /* out13 */
    out.push_back(gout926_clear); /* out14 */
    out.push_back(gout934_clear); /* out15 */
    return out;
}

std::vector<long>
test_sqrt_boolean(FHEContext& ctx, uint16_t num)
{
    long ct_num0_clear = (num >> 0) & 1;
    long ct_num1_clear = (num >> 1) & 1;
    long ct_num2_clear = (num >> 2) & 1;
    long ct_num3_clear = (num >> 3) & 1;
    long ct_num4_clear = (num >> 4) & 1;
    long ct_num5_clear = (num >> 5) & 1;
    long ct_num6_clear = (num >> 6) & 1;
    long ct_num7_clear = (num >> 7) & 1;
    long ct_num8_clear = (num >> 8) & 1;
    long ct_num9_clear = (num >> 9) & 1;
    long ct_num10_clear = (num >> 10) & 1;
    long ct_num11_clear = (num >> 11) & 1;
    long ct_num12_clear = (num >> 12) & 1;
    long ct_num13_clear = (num >> 13) & 1;
    long ct_num14_clear = (num >> 14) & 1;
    long ct_num15_clear = (num >> 15) & 1;

    auto fand2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 0;
            case 1:  return 0;
            case 2:  return 0;
            case 3:  return 1;
            default: assert(0);
        }
    };
    RotationPoly and2 = ctx.genrate_lut(fand2);

    auto fnand2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 1;
            case 1:  return 1;
            case 2:  return 1;
            case 3:  return 0;
            default: assert(0);
        }
    };
    RotationPoly nand2 = ctx.genrate_lut(fnand2);

    auto for2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 0;
            case 1:  return 1;
            case 2:  return 1;
            case 3:  return 1;
            default: assert(0);
        }
    };
    RotationPoly or2 = ctx.genrate_lut(for2);

    auto fnor2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 1;
            case 1:  return 0;
            case 2:  return 0;
            case 3:  return 0;
            default: assert(0);
        }
    };
    RotationPoly nor2 = ctx.genrate_lut(fnor2);

    auto fxor2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 0;
            case 1:  return 1;
            case 2:  return 1;
            case 3:  return 0;
            default: assert(0);
        }
    };
    RotationPoly xor2 = ctx.genrate_lut(fxor2);

    auto fxnor2 = [](long i, long t) -> long {
        switch (i) {
            case 0:  return 1;
            case 1:  return 0;
            case 2:  return 0;
            case 3:  return 1;
            default: assert(0);
        }
    };
    RotationPoly xnor2 = ctx.genrate_lut(fxnor2);

    std::cerr << "\rINV0   ";
    long gout0_clear = 1 - ct_num11_clear;

    std::cerr << "\rINV1   ";
    long gout1_clear = 1 - ct_num6_clear;

    std::cerr << "\rLUT2   ";
    auto gin2_clear = 2 * ct_num2_clear + ct_num3_clear;
    auto gout2_clear = fnor2(gin2_clear, 4);
    std::cerr << "\rINV3   ";
    long gout3_clear = 1 - ct_num4_clear;

    std::cerr << "\rLUT4   ";
    auto gin4_clear = 2 * ct_num2_clear + ct_num1_clear;
    auto gout4_clear = fnor2(gin4_clear, 4);
    std::cerr << "\rLUT5   ";
    auto gin5_clear = 2 * (1 - ct_num14_clear) + ct_num15_clear;
    auto gout5_clear = for2(gin5_clear, 4);
    std::cerr << "\rINV6   ";
    long gout6_clear = 1 - ct_num12_clear;

    std::cerr << "\rLUT7   ";
    auto gin7_clear = 2 * (1 - ct_num3_clear) + ct_num2_clear;
    auto gout7_clear = fand2(gin7_clear, 4);
    std::cerr << "\rLUT8   ";
    auto gin8_clear = 2 * gout3_clear + gout2_clear;
    auto gout8_clear = fxnor2(gin8_clear, 4);
    std::cerr << "\rLUT9   ";
    auto gin9_clear = 2 * ct_num11_clear + ct_num12_clear;
    auto gout9_clear = fnor2(gin9_clear, 4);
    std::cerr << "\rINV10   ";
    long gout10_clear = 1 - ct_num10_clear;

    std::cerr << "\rINV11   ";
    long gout11_clear = 1 - ct_num9_clear;

    std::cerr << "\rINV12   ";
    long gout12_clear = 1 - ct_num15_clear;

    std::cerr << "\rLUT13   ";
    auto gin13_clear = 2 * ct_num5_clear + ct_num4_clear;
    auto gout13_clear = fnor2(gin13_clear, 4);
    std::cerr << "\rLUT14   ";
    auto gin14_clear = 2 * ct_num9_clear + ct_num8_clear;
    auto gout14_clear = fnor2(gin14_clear, 4);
    std::cerr << "\rINV15   ";
    long gout15_clear = 1 - ct_num0_clear;

    std::cerr << "\rLUT16   ";
    auto gin16_clear = 2 * gout10_clear + gout9_clear;
    auto gout16_clear = fnand2(gin16_clear, 4);
    std::cerr << "\rINV17   ";
    long gout17_clear = 1 - gout5_clear;

    std::cerr << "\rLUT18   ";
    auto gin18_clear = 2 * ct_num6_clear + gout13_clear;
    auto gout18_clear = fxnor2(gin18_clear, 4);
    std::cerr << "\rLUT19   ";
    auto gin19_clear = 2 * gout15_clear + gout4_clear;
    auto gout19_clear = fnand2(gin19_clear, 4);
    std::cerr << "\rINV20   ";
    long gout20_clear = 1 - ct_num3_clear;

    std::cerr << "\rLUT21   ";
    auto gin21_clear = 2 * ct_num13_clear + ct_num12_clear;
    auto gout21_clear = for2(gin21_clear, 4);
    std::cerr << "\rLUT22   ";
    auto gin22_clear = 2 * (1 - ct_num15_clear) + ct_num13_clear;
    auto gout22_clear = fand2(gin22_clear, 4);
    std::cerr << "\rINV23   ";
    long gout23_clear = 1 - ct_num5_clear;

    std::cerr << "\rLUT24   ";
    auto gin24_clear = 2 * ct_num14_clear + ct_num15_clear;
    auto gout24_clear = fnor2(gin24_clear, 4);
    std::cerr << "\rLUT25   ";
    auto gin25_clear = 2 * ct_num9_clear + ct_num8_clear;
    auto gout25_clear = fnand2(gin25_clear, 4);
    std::cerr << "\rLUT26   ";
    auto gin26_clear = 2 * ct_num7_clear + ct_num6_clear;
    auto gout26_clear = for2(gin26_clear, 4);
    std::cerr << "\rLUT27   ";
    auto gin27_clear = 2 * gout24_clear + gout21_clear;
    auto gout27_clear = fnand2(gin27_clear, 4);
    std::cerr << "\rLUT28   ";
    auto gin28_clear = 2 * gout6_clear + gout24_clear;
    auto gout28_clear = fnand2(gin28_clear, 4);
    std::cerr << "\rINV29   ";
    long gout29_clear = 1 - gout14_clear;

    std::cerr << "\rLUT30   ";
    auto gin30_clear = 2 * ct_num12_clear + gout24_clear;
    auto gout30_clear = fnand2(gin30_clear, 4);
    std::cerr << "\rINV31   ";
    long gout31_clear = 1 - gout27_clear;

    std::cerr << "\rLUT32   ";
    auto gin32_clear = 2 * gout24_clear + gout22_clear;
    auto gout32_clear = for2(gin32_clear, 4);
    std::cerr << "\rLUT33   ";
    auto gin33_clear = 2 * ct_num13_clear + gout28_clear;
    auto gout33_clear = fand2(gin33_clear, 4);
    std::cerr << "\rLUT34   ";
    auto gin34_clear = 2 * gout30_clear + gout16_clear;
    auto gout34_clear = fnand2(gin34_clear, 4);
    std::cerr << "\rLUT35   ";
    auto gin35_clear = 2 * gout5_clear + gout33_clear;
    auto gout35_clear = fnand2(gin35_clear, 4);
    std::cerr << "\rLUT36   ";
    auto gin36_clear = 2 * gout35_clear + gout34_clear;
    auto gout36_clear = fnand2(gin36_clear, 4);
    std::cerr << "\rLUT37   ";
    auto gin37_clear = 2 * gout36_clear + gout27_clear;
    auto gout37_clear = for2(gin37_clear, 4);
    std::cerr << "\rLUT38   ";
    auto gin38_clear = 2 * gout36_clear + gout32_clear;
    auto gout38_clear = fand2(gin38_clear, 4);
    std::cerr << "\rLUT39   ";
    auto gin39_clear = 2 * gout10_clear + gout38_clear;
    auto gout39_clear = fand2(gin39_clear, 4);
    std::cerr << "\rLUT40   ";
    auto gin40_clear = 2 * (1 - gout33_clear) + gout38_clear;
    auto gout40_clear = for2(gin40_clear, 4);
    std::cerr << "\rIMUX41  ";
    long gin41A_clear = 2 * gout38_clear + ct_num10_clear;
    long gout41A_clear = fand2(gin41A_clear, 4);
    long gin41B_clear = 2 * gout14_clear + (1 - ct_num10_clear);
    long gout41B_clear = fand2(gin41B_clear, 4);
    long gout41_clear = gout41A_clear + gout41B_clear;
    std::cerr << "\rINV42   ";
    long gout42_clear = 1 - gout38_clear;

    std::cerr << "\rLUT43   ";
    auto gin43_clear = 2 * gout0_clear + gout39_clear;
    auto gout43_clear = fnand2(gin43_clear, 4);
    std::cerr << "\rINV44   ";
    long gout44_clear = 1 - gout41_clear;

    std::cerr << "\rLUT45   ";
    auto gin45_clear = 2 * ct_num11_clear + gout39_clear;
    auto gout45_clear = fxnor2(gin45_clear, 4);
    std::cerr << "\rLUT46   ";
    auto gin46_clear = 2 * gout43_clear + gout37_clear;
    auto gout46_clear = fand2(gin46_clear, 4);
    std::cerr << "\rINV47   ";
    long gout47_clear = 1 - gout45_clear;

    std::cerr << "\rLUT48   ";
    auto gin48_clear = 2 * gout27_clear + gout45_clear;
    auto gout48_clear = fxnor2(gin48_clear, 4);
    std::cerr << "\rLUT49   ";
    auto gin49_clear = 2 * gout31_clear + gout45_clear;
    auto gout49_clear = for2(gin49_clear, 4);
    std::cerr << "\rLUT50   ";
    auto gin50_clear = 2 * ct_num12_clear + gout46_clear;
    auto gout50_clear = fxnor2(gin50_clear, 4);
    std::cerr << "\rLUT51   ";
    auto gin51_clear = 2 * gout17_clear + gout50_clear;
    auto gout51_clear = fxnor2(gin51_clear, 4);
    std::cerr << "\rLUT52   ";
    auto gin52_clear = 2 * gout48_clear + gout44_clear;
    auto gout52_clear = fnand2(gin52_clear, 4);
    std::cerr << "\rLUT53   ";
    auto gin53_clear = 2 * gout48_clear + gout41_clear;
    auto gout53_clear = fxnor2(gin53_clear, 4);
    std::cerr << "\rLUT54   ";
    auto gin54_clear = 2 * gout5_clear + gout50_clear;
    auto gout54_clear = fnand2(gin54_clear, 4);
    std::cerr << "\rLUT55   ";
    auto gin55_clear = 2 * gout49_clear + gout52_clear;
    auto gout55_clear = fnand2(gin55_clear, 4);
    std::cerr << "\rLUT56   ";
    auto gin56_clear = 2 * gout54_clear + gout40_clear;
    auto gout56_clear = fand2(gin56_clear, 4);
    std::cerr << "\rLUT57   ";
    auto gin57_clear = 2 * (1 - gout50_clear) + gout40_clear;
    auto gout57_clear = fand2(gin57_clear, 4);
    std::cerr << "\rLUT58   ";
    auto gin58_clear = 2 * gout51_clear + gout55_clear;
    auto gout58_clear = fxnor2(gin58_clear, 4);
    std::cerr << "\rLUT59   ";
    auto gin59_clear = 2 * gout51_clear + gout55_clear;
    auto gout59_clear = fnand2(gin59_clear, 4);
    std::cerr << "\rLUT60   ";
    auto gin60_clear = 2 * gout59_clear + gout56_clear;
    auto gout60_clear = fnand2(gin60_clear, 4);
    std::cerr << "\rLUT61   ";
    auto gin61_clear = 2 * gout12_clear + gout60_clear;
    auto gout61_clear = fnand2(gin61_clear, 4);
    std::cerr << "\rLUT62   ";
    auto gin62_clear = 2 * gout11_clear + gout61_clear;
    auto gout62_clear = fnand2(gin62_clear, 4);
    std::cerr << "\rINV63   ";
    long gout63_clear = 1 - gout61_clear;

    std::cerr << "\rIMUX64  ";
    long gin64A_clear = 2 * gout38_clear + gout61_clear;
    long gout64A_clear = fand2(gin64A_clear, 4);
    long gin64B_clear = 2 * gout14_clear + (1 - gout61_clear);
    long gout64B_clear = fand2(gin64B_clear, 4);
    long gout64_clear = gout64A_clear + gout64B_clear;
    std::cerr << "\rIMUX65  ";
    long gin65A_clear = 2 * gout47_clear + gout61_clear;
    long gout65A_clear = fand2(gin65A_clear, 4);
    long gin65B_clear = 2 * gout53_clear + (1 - gout61_clear);
    long gout65B_clear = fand2(gin65B_clear, 4);
    long gout65_clear = gout65A_clear + gout65B_clear;
    std::cerr << "\rIMUX66  ";
    long gin66A_clear = 2 * gout58_clear + gout63_clear;
    long gout66A_clear = fand2(gin66A_clear, 4);
    long gin66B_clear = 2 * gout57_clear + (1 - gout63_clear);
    long gout66B_clear = fand2(gin66B_clear, 4);
    long gout66_clear = gout66A_clear + gout66B_clear;
    std::cerr << "\rIMUX67  ";
    long gin67A_clear = 2 * gout61_clear + ct_num8_clear;
    long gout67A_clear = fand2(gin67A_clear, 4);
    long gin67B_clear = 2 * gout26_clear + (1 - ct_num8_clear);
    long gout67B_clear = fand2(gin67B_clear, 4);
    long gout67_clear = gout67A_clear + gout67B_clear;
    std::cerr << "\rLUT68   ";
    auto gin68_clear = 2 * gout5_clear + gout65_clear;
    auto gout68_clear = fnand2(gin68_clear, 4);
    std::cerr << "\rLUT69   ";
    auto gin69_clear = 2 * gout68_clear + gout66_clear;
    auto gout69_clear = fand2(gin69_clear, 4);
    std::cerr << "\rLUT70   ";
    auto gin70_clear = 2 * gout17_clear + gout65_clear;
    auto gout70_clear = fxnor2(gin70_clear, 4);
    std::cerr << "\rLUT71   ";
    auto gin71_clear = 2 * gout29_clear + gout63_clear;
    auto gout71_clear = fand2(gin71_clear, 4);
    std::cerr << "\rLUT72   ";
    auto gin72_clear = 2 * gout10_clear + gout64_clear;
    auto gout72_clear = fxnor2(gin72_clear, 4);
    std::cerr << "\rLUT73   ";
    auto gin73_clear = 2 * gout71_clear + gout25_clear;
    auto gout73_clear = fnand2(gin73_clear, 4);
    std::cerr << "\rLUT74   ";
    auto gin74_clear = 2 * gout27_clear + gout72_clear;
    auto gout74_clear = fnand2(gin74_clear, 4);
    std::cerr << "\rLUT75   ";
    auto gin75_clear = 2 * gout31_clear + gout72_clear;
    auto gout75_clear = fxnor2(gin75_clear, 4);
    std::cerr << "\rINV76   ";
    long gout76_clear = 1 - gout75_clear;

    std::cerr << "\rLUT77   ";
    auto gin77_clear = 2 * gout73_clear + gout62_clear;
    auto gout77_clear = fand2(gin77_clear, 4);
    std::cerr << "\rLUT78   ";
    auto gin78_clear = 2 * gout73_clear + gout62_clear;
    auto gout78_clear = fnand2(gin78_clear, 4);
    std::cerr << "\rLUT79   ";
    auto gin79_clear = 2 * gout38_clear + gout77_clear;
    auto gout79_clear = fxnor2(gin79_clear, 4);
    std::cerr << "\rLUT80   ";
    auto gin80_clear = 2 * gout42_clear + gout77_clear;
    auto gout80_clear = fnand2(gin80_clear, 4);
    std::cerr << "\rLUT81   ";
    auto gin81_clear = 2 * gout38_clear + gout78_clear;
    auto gout81_clear = fnand2(gin81_clear, 4);
    std::cerr << "\rLUT82   ";
    auto gin82_clear = 2 * gout81_clear + gout67_clear;
    auto gout82_clear = fnand2(gin82_clear, 4);
    std::cerr << "\rLUT83   ";
    auto gin83_clear = 2 * gout67_clear + gout79_clear;
    auto gout83_clear = fxnor2(gin83_clear, 4);
    std::cerr << "\rLUT84   ";
    auto gin84_clear = 2 * gout80_clear + gout82_clear;
    auto gout84_clear = fand2(gin84_clear, 4);
    std::cerr << "\rLUT85   ";
    auto gin85_clear = 2 * gout75_clear + gout84_clear;
    auto gout85_clear = fxnor2(gin85_clear, 4);
    std::cerr << "\rLUT86   ";
    auto gin86_clear = 2 * gout76_clear + gout84_clear;
    auto gout86_clear = for2(gin86_clear, 4);
    std::cerr << "\rLUT87   ";
    auto gin87_clear = 2 * gout74_clear + gout86_clear;
    auto gout87_clear = fnand2(gin87_clear, 4);
    std::cerr << "\rLUT88   ";
    auto gin88_clear = 2 * gout70_clear + gout87_clear;
    auto gout88_clear = fnand2(gin88_clear, 4);
    std::cerr << "\rLUT89   ";
    auto gin89_clear = 2 * gout70_clear + gout87_clear;
    auto gout89_clear = fxor2(gin89_clear, 4);
    std::cerr << "\rLUT90   ";
    auto gin90_clear = 2 * gout88_clear + gout69_clear;
    auto gout90_clear = fnand2(gin90_clear, 4);
    std::cerr << "\rLUT91   ";
    auto gin91_clear = 2 * gout61_clear + gout90_clear;
    auto gout91_clear = for2(gin91_clear, 4);
    std::cerr << "\rLUT92   ";
    auto gin92_clear = 2 * gout12_clear + gout90_clear;
    auto gout92_clear = fnand2(gin92_clear, 4);
    std::cerr << "\rIMUX93  ";
    long gin93A_clear = 2 * gout65_clear + gout92_clear;
    long gout93A_clear = fand2(gin93A_clear, 4);
    long gin93B_clear = 2 * gout89_clear + (1 - gout92_clear);
    long gout93B_clear = fand2(gin93B_clear, 4);
    long gout93_clear = gout93A_clear + gout93B_clear;
    std::cerr << "\rLUT94   ";
    auto gin94_clear = 2 * gout26_clear + gout92_clear;
    auto gout94_clear = for2(gin94_clear, 4);
    std::cerr << "\rLUT95   ";
    auto gin95_clear = 2 * (1 - gout92_clear) + gout1_clear;
    auto gout95_clear = fand2(gin95_clear, 4);
    std::cerr << "\rLUT96   ";
    auto gin96_clear = 2 * gout1_clear + gout92_clear;
    auto gout96_clear = fxnor2(gin96_clear, 4);
    std::cerr << "\rLUT97   ";
    auto gin97_clear = 2 * gout94_clear + gout91_clear;
    auto gout97_clear = fand2(gin97_clear, 4);
    std::cerr << "\rIMUX98  ";
    long gin98A_clear = 2 * gout78_clear + gout92_clear;
    long gout98A_clear = fand2(gin98A_clear, 4);
    long gin98B_clear = 2 * gout83_clear + (1 - gout92_clear);
    long gout98B_clear = fand2(gin98B_clear, 4);
    long gout98_clear = gout98A_clear + gout98B_clear;
    std::cerr << "\rLUT99   ";
    auto gin99_clear = 2 * ct_num7_clear + gout95_clear;
    auto gout99_clear = fxnor2(gin99_clear, 4);
    std::cerr << "\rIMUX100  ";
    long gin100A_clear = 2 * gout72_clear + gout92_clear;
    long gout100A_clear = fand2(gin100A_clear, 4);
    long gin100B_clear = 2 * gout85_clear + (1 - gout92_clear);
    long gout100B_clear = fand2(gin100B_clear, 4);
    long gout100_clear = gout100A_clear + gout100B_clear;
    std::cerr << "\rLUT101   ";
    auto gin101_clear = 2 * gout17_clear + gout100_clear;
    auto gout101_clear = fxnor2(gin101_clear, 4);
    std::cerr << "\rINV102   ";
    long gout102_clear = 1 - gout92_clear;

    std::cerr << "\rLUT103   ";
    auto gin103_clear = 2 * gout63_clear + gout99_clear;
    auto gout103_clear = for2(gin103_clear, 4);
    std::cerr << "\rLUT104   ";
    auto gin104_clear = 2 * gout31_clear + gout98_clear;
    auto gout104_clear = fxnor2(gin104_clear, 4);
    std::cerr << "\rLUT105   ";
    auto gin105_clear = 2 * gout61_clear + gout99_clear;
    auto gout105_clear = fxnor2(gin105_clear, 4);
    std::cerr << "\rIMUX106  ";
    long gin106A_clear = 2 * gout102_clear + ct_num6_clear;
    long gout106A_clear = fand2(gin106A_clear, 4);
    long gin106B_clear = 2 * gout13_clear + (1 - ct_num6_clear);
    long gout106B_clear = fand2(gin106B_clear, 4);
    long gout106_clear = gout106A_clear + gout106B_clear;
    std::cerr << "\rLUT107   ";
    auto gin107_clear = 2 * ct_num8_clear + gout97_clear;
    auto gout107_clear = fxnor2(gin107_clear, 4);
    std::cerr << "\rLUT108   ";
    auto gin108_clear = 2 * gout42_clear + gout107_clear;
    auto gout108_clear = fnand2(gin108_clear, 4);
    std::cerr << "\rINV109   ";
    long gout109_clear = 1 - gout99_clear;

    std::cerr << "\rINV110   ";
    long gout110_clear = 1 - gout107_clear;

    std::cerr << "\rLUT111   ";
    auto gin111_clear = 2 * gout38_clear + gout107_clear;
    auto gout111_clear = fxnor2(gin111_clear, 4);
    std::cerr << "\rINV112   ";
    long gout112_clear = 1 - gout106_clear;

    std::cerr << "\rLUT113   ";
    auto gin113_clear = 2 * gout105_clear + gout106_clear;
    auto gout113_clear = fxnor2(gin113_clear, 4);
    std::cerr << "\rLUT114   ";
    auto gin114_clear = 2 * gout31_clear + gout98_clear;
    auto gout114_clear = for2(gin114_clear, 4);
    std::cerr << "\rLUT115   ";
    auto gin115_clear = 2 * gout5_clear + gout100_clear;
    auto gout115_clear = fnand2(gin115_clear, 4);
    std::cerr << "\rINV116   ";
    long gout116_clear = 1 - gout100_clear;

    std::cerr << "\rLUT117   ";
    auto gin117_clear = 2 * gout105_clear + gout112_clear;
    auto gout117_clear = fnand2(gin117_clear, 4);
    std::cerr << "\rLUT118   ";
    auto gin118_clear = 2 * (1 - gout93_clear) + gout115_clear;
    auto gout118_clear = fand2(gin118_clear, 4);
    std::cerr << "\rLUT119   ";
    auto gin119_clear = 2 * gout103_clear + gout117_clear;
    auto gout119_clear = fnand2(gin119_clear, 4);
    std::cerr << "\rLUT120   ";
    auto gin120_clear = 2 * gout119_clear + gout111_clear;
    auto gout120_clear = fxnor2(gin120_clear, 4);
    std::cerr << "\rLUT121   ";
    auto gin121_clear = 2 * gout119_clear + gout111_clear;
    auto gout121_clear = fnand2(gin121_clear, 4);
    std::cerr << "\rLUT122   ";
    auto gin122_clear = 2 * gout108_clear + gout121_clear;
    auto gout122_clear = fand2(gin122_clear, 4);
    std::cerr << "\rLUT123   ";
    auto gin123_clear = 2 * gout104_clear + gout122_clear;
    auto gout123_clear = for2(gin123_clear, 4);
    std::cerr << "\rLUT124   ";
    auto gin124_clear = 2 * gout104_clear + gout122_clear;
    auto gout124_clear = fxnor2(gin124_clear, 4);
    std::cerr << "\rLUT125   ";
    auto gin125_clear = 2 * gout114_clear + gout123_clear;
    auto gout125_clear = fnand2(gin125_clear, 4);
    std::cerr << "\rLUT126   ";
    auto gin126_clear = 2 * gout101_clear + gout125_clear;
    auto gout126_clear = fxnor2(gin126_clear, 4);
    std::cerr << "\rLUT127   ";
    auto gin127_clear = 2 * gout101_clear + gout125_clear;
    auto gout127_clear = fnand2(gin127_clear, 4);
    std::cerr << "\rLUT128   ";
    auto gin128_clear = 2 * gout127_clear + gout118_clear;
    auto gout128_clear = fnand2(gin128_clear, 4);
    std::cerr << "\rLUT129   ";
    auto gin129_clear = 2 * gout12_clear + gout128_clear;
    auto gout129_clear = fnand2(gin129_clear, 4);
    std::cerr << "\rLUT130   ";
    auto gin130_clear = 2 * gout129_clear + gout19_clear;
    auto gout130_clear = fnand2(gin130_clear, 4);
    std::cerr << "\rIMUX131  ";
    long gin131A_clear = 2 * gout109_clear + gout129_clear;
    long gout131A_clear = fand2(gin131A_clear, 4);
    long gin131B_clear = 2 * gout113_clear + (1 - gout129_clear);
    long gout131B_clear = fand2(gin131B_clear, 4);
    long gout131_clear = gout131A_clear + gout131B_clear;
    std::cerr << "\rIMUX132  ";
    long gin132A_clear = 2 * gout96_clear + gout129_clear;
    long gout132A_clear = fand2(gin132A_clear, 4);
    long gin132B_clear = 2 * gout18_clear + (1 - gout129_clear);
    long gout132B_clear = fand2(gin132B_clear, 4);
    long gout132_clear = gout132A_clear + gout132B_clear;
    std::cerr << "\rLUT133   ";
    auto gin133_clear = 2 * (1 - gout129_clear) + gout3_clear;
    auto gout133_clear = fand2(gin133_clear, 4);
    std::cerr << "\rINV134   ";
    long gout134_clear = 1 - gout129_clear;

    std::cerr << "\rLUT135   ";
    auto gin135_clear = 2 * gout61_clear + gout132_clear;
    auto gout135_clear = fxnor2(gin135_clear, 4);
    std::cerr << "\rLUT136   ";
    auto gin136_clear = 2 * gout42_clear + gout131_clear;
    auto gout136_clear = fnand2(gin136_clear, 4);
    std::cerr << "\rIMUX137  ";
    long gin137A_clear = 2 * gout98_clear + gout129_clear;
    long gout137A_clear = fand2(gin137A_clear, 4);
    long gin137B_clear = 2 * gout124_clear + (1 - gout129_clear);
    long gout137B_clear = fand2(gin137B_clear, 4);
    long gout137_clear = gout137A_clear + gout137B_clear;
    std::cerr << "\rLUT138   ";
    auto gin138_clear = 2 * ct_num4_clear + gout129_clear;
    auto gout138_clear = fxnor2(gin138_clear, 4);
    std::cerr << "\rLUT139   ";
    auto gin139_clear = 2 * gout129_clear + gout19_clear;
    auto gout139_clear = for2(gin139_clear, 4);
    std::cerr << "\rLUT140   ";
    auto gin140_clear = 2 * gout23_clear + gout133_clear;
    auto gout140_clear = fxnor2(gin140_clear, 4);
    std::cerr << "\rINV141   ";
    long gout141_clear = 1 - gout135_clear;

    std::cerr << "\rIMUX142  ";
    long gin142A_clear = 2 * gout110_clear + gout129_clear;
    long gout142A_clear = fand2(gin142A_clear, 4);
    long gin142B_clear = 2 * gout120_clear + (1 - gout129_clear);
    long gout142B_clear = fand2(gin142B_clear, 4);
    long gout142_clear = gout142A_clear + gout142B_clear;
    std::cerr << "\rLUT143   ";
    auto gin143_clear = 2 * gout38_clear + gout131_clear;
    auto gout143_clear = fxnor2(gin143_clear, 4);
    std::cerr << "\rIMUX144  ";
    long gin144A_clear = 2 * gout116_clear + gout129_clear;
    long gout144A_clear = fand2(gin144A_clear, 4);
    long gin144B_clear = 2 * gout126_clear + (1 - gout129_clear);
    long gout144B_clear = fand2(gin144B_clear, 4);
    long gout144_clear = gout144A_clear + gout144B_clear;
    std::cerr << "\rLUT145   ";
    auto gin145_clear = 2 * gout102_clear + gout140_clear;
    auto gout145_clear = fxnor2(gin145_clear, 4);
    std::cerr << "\rLUT146   ";
    auto gin146_clear = 2 * gout92_clear + gout140_clear;
    auto gout146_clear = fnand2(gin146_clear, 4);
    std::cerr << "\rIMUX147  ";
    long gin147A_clear = 2 * gout134_clear + ct_num4_clear;
    long gout147A_clear = fand2(gin147A_clear, 4);
    long gin147B_clear = 2 * gout2_clear + (1 - ct_num4_clear);
    long gout147B_clear = fand2(gin147B_clear, 4);
    long gout147_clear = gout147A_clear + gout147B_clear;
    std::cerr << "\rLUT148   ";
    auto gin148_clear = 2 * gout63_clear + gout132_clear;
    auto gout148_clear = for2(gin148_clear, 4);
    std::cerr << "\rLUT149   ";
    auto gin149_clear = 2 * gout27_clear + gout142_clear;
    auto gout149_clear = fxnor2(gin149_clear, 4);
    std::cerr << "\rLUT150   ";
    auto gin150_clear = 2 * gout17_clear + gout137_clear;
    auto gout150_clear = for2(gin150_clear, 4);
    std::cerr << "\rLUT151   ";
    auto gin151_clear = 2 * gout5_clear + gout137_clear;
    auto gout151_clear = fxnor2(gin151_clear, 4);
    std::cerr << "\rINV152   ";
    long gout152_clear = 1 - gout143_clear;

    std::cerr << "\rLUT153   ";
    auto gin153_clear = 2 * gout150_clear + gout144_clear;
    auto gout153_clear = fand2(gin153_clear, 4);
    std::cerr << "\rLUT154   ";
    auto gin154_clear = 2 * gout145_clear + gout147_clear;
    auto gout154_clear = fxnor2(gin154_clear, 4);
    std::cerr << "\rINV155   ";
    long gout155_clear = 1 - gout147_clear;

    std::cerr << "\rLUT156   ";
    auto gin156_clear = 2 * gout31_clear + gout142_clear;
    auto gout156_clear = for2(gin156_clear, 4);
    std::cerr << "\rLUT157   ";
    auto gin157_clear = 2 * gout137_clear + gout144_clear;
    auto gout157_clear = fnand2(gin157_clear, 4);
    std::cerr << "\rLUT158   ";
    auto gin158_clear = 2 * gout145_clear + gout155_clear;
    auto gout158_clear = fnand2(gin158_clear, 4);
    std::cerr << "\rLUT159   ";
    auto gin159_clear = 2 * gout146_clear + gout158_clear;
    auto gout159_clear = fand2(gin159_clear, 4);
    std::cerr << "\rLUT160   ";
    auto gin160_clear = 2 * gout141_clear + gout159_clear;
    auto gout160_clear = fxnor2(gin160_clear, 4);
    std::cerr << "\rLUT161   ";
    auto gin161_clear = 2 * gout141_clear + gout159_clear;
    auto gout161_clear = for2(gin161_clear, 4);
    std::cerr << "\rLUT162   ";
    auto gin162_clear = 2 * gout148_clear + gout161_clear;
    auto gout162_clear = fand2(gin162_clear, 4);
    std::cerr << "\rLUT163   ";
    auto gin163_clear = 2 * gout152_clear + gout162_clear;
    auto gout163_clear = for2(gin163_clear, 4);
    std::cerr << "\rLUT164   ";
    auto gin164_clear = 2 * gout143_clear + gout162_clear;
    auto gout164_clear = fxnor2(gin164_clear, 4);
    std::cerr << "\rLUT165   ";
    auto gin165_clear = 2 * gout136_clear + gout163_clear;
    auto gout165_clear = fnand2(gin165_clear, 4);
    std::cerr << "\rLUT166   ";
    auto gin166_clear = 2 * gout165_clear + gout149_clear;
    auto gout166_clear = fnand2(gin166_clear, 4);
    std::cerr << "\rLUT167   ";
    auto gin167_clear = 2 * gout165_clear + gout149_clear;
    auto gout167_clear = fxnor2(gin167_clear, 4);
    std::cerr << "\rLUT168   ";
    auto gin168_clear = 2 * gout156_clear + gout166_clear;
    auto gout168_clear = fnand2(gin168_clear, 4);
    std::cerr << "\rLUT169   ";
    auto gin169_clear = 2 * gout151_clear + gout168_clear;
    auto gout169_clear = fxor2(gin169_clear, 4);
    std::cerr << "\rLUT170   ";
    auto gin170_clear = 2 * gout151_clear + gout168_clear;
    auto gout170_clear = fnand2(gin170_clear, 4);
    std::cerr << "\rLUT171   ";
    auto gin171_clear = 2 * gout170_clear + gout153_clear;
    auto gout171_clear = fnand2(gin171_clear, 4);
    std::cerr << "\rLUT172   ";
    auto gin172_clear = 2 * gout12_clear + gout171_clear;
    auto gout172_clear = fnand2(gin172_clear, 4);
    std::cerr << "\rIMUX173  ";
    long gin173A_clear = 2 * gout138_clear + gout172_clear;
    long gout173A_clear = fand2(gin173A_clear, 4);
    long gin173B_clear = 2 * gout8_clear + (1 - gout172_clear);
    long gout173B_clear = fand2(gin173B_clear, 4);
    long gout173_clear = gout173A_clear + gout173B_clear;
    std::cerr << "\rIMUX174  ";
    long gin174A_clear = 2 * gout142_clear + gout172_clear;
    long gout174A_clear = fand2(gin174A_clear, 4);
    long gin174B_clear = 2 * gout167_clear + (1 - gout172_clear);
    long gout174B_clear = fand2(gin174B_clear, 4);
    long gout174_clear = gout174A_clear + gout174B_clear;
    std::cerr << "\rLUT175   ";
    auto gin175_clear = 2 * gout92_clear + gout173_clear;
    auto gout175_clear = fnand2(gin175_clear, 4);
    std::cerr << "\rIMUX176  ";
    long gin176A_clear = 2 * gout157_clear + gout172_clear;
    long gout176A_clear = fand2(gin176A_clear, 4);
    long gin176B_clear = 2 * gout169_clear + (1 - gout172_clear);
    long gout176B_clear = fand2(gin176B_clear, 4);
    long gout176_clear = gout176A_clear + gout176B_clear;
    std::cerr << "\rLUT177   ";
    auto gin177_clear = 2 * gout92_clear + gout173_clear;
    auto gout177_clear = for2(gin177_clear, 4);
    std::cerr << "\rINV178   ";
    long gout178_clear = 1 - gout172_clear;

    std::cerr << "\rIMUX179  ";
    long gin179A_clear = 2 * gout132_clear + gout172_clear;
    long gout179A_clear = fand2(gin179A_clear, 4);
    long gin179B_clear = 2 * gout160_clear + (1 - gout172_clear);
    long gout179B_clear = fand2(gin179B_clear, 4);
    long gout179_clear = gout179A_clear + gout179B_clear;
    std::cerr << "\rLUT180   ";
    auto gin180_clear = 2 * gout20_clear + gout172_clear;
    auto gout180_clear = fxnor2(gin180_clear, 4);
    std::cerr << "\rLUT181   ";
    auto gin181_clear = 2 * gout17_clear + gout174_clear;
    auto gout181_clear = for2(gin181_clear, 4);
    std::cerr << "\rIMUX182  ";
    long gin182A_clear = 2 * gout140_clear + gout172_clear;
    long gout182A_clear = fand2(gin182A_clear, 4);
    long gin182B_clear = 2 * gout154_clear + (1 - gout172_clear);
    long gout182B_clear = fand2(gin182B_clear, 4);
    long gout182_clear = gout182A_clear + gout182B_clear;
    std::cerr << "\rLUT183   ";
    auto gin183_clear = 2 * (1 - gout172_clear) + gout7_clear;
    auto gout183_clear = fand2(gin183_clear, 4);
    std::cerr << "\rIMUX184  ";
    long gin184A_clear = 2 * gout131_clear + gout172_clear;
    long gout184A_clear = fand2(gin184A_clear, 4);
    long gin184B_clear = 2 * gout164_clear + (1 - gout172_clear);
    long gout184B_clear = fand2(gin184B_clear, 4);
    long gout184_clear = gout184A_clear + gout184B_clear;
    std::cerr << "\rLUT185   ";
    auto gin185_clear = 2 * (1 - gout183_clear) + gout139_clear;
    auto gout185_clear = fand2(gin185_clear, 4);
    std::cerr << "\rLUT186   ";
    auto gin186_clear = 2 * gout38_clear + gout179_clear;
    auto gout186_clear = for2(gin186_clear, 4);
    std::cerr << "\rLUT187   ";
    auto gin187_clear = 2 * gout61_clear + gout182_clear;
    auto gout187_clear = fnand2(gin187_clear, 4);
    std::cerr << "\rLUT188   ";
    auto gin188_clear = 2 * gout17_clear + gout174_clear;
    auto gout188_clear = fnand2(gin188_clear, 4);
    std::cerr << "\rLUT189   ";
    auto gin189_clear = 2 * gout187_clear + gout175_clear;
    auto gout189_clear = fand2(gin189_clear, 4);
    std::cerr << "\rLUT190   ";
    auto gin190_clear = 2 * gout38_clear + gout179_clear;
    auto gout190_clear = fnand2(gin190_clear, 4);
    std::cerr << "\rLUT191   ";
    auto gin191_clear = 2 * gout177_clear + gout185_clear;
    auto gout191_clear = fand2(gin191_clear, 4);
    std::cerr << "\rLUT192   ";
    auto gin192_clear = 2 * gout181_clear + (1 - gout176_clear);
    auto gout192_clear = fand2(gin192_clear, 4);
    std::cerr << "\rLUT193   ";
    auto gin193_clear = 2 * gout27_clear + gout184_clear;
    auto gout193_clear = for2(gin193_clear, 4);
    std::cerr << "\rLUT194   ";
    auto gin194_clear = 2 * gout61_clear + gout182_clear;
    auto gout194_clear = for2(gin194_clear, 4);
    std::cerr << "\rLUT195   ";
    auto gin195_clear = 2 * gout130_clear + gout180_clear;
    auto gout195_clear = fnand2(gin195_clear, 4);
    std::cerr << "\rLUT196   ";
    auto gin196_clear = 2 * gout27_clear + gout184_clear;
    auto gout196_clear = fnand2(gin196_clear, 4);
    std::cerr << "\rLUT197   ";
    auto gin197_clear = 2 * gout196_clear + gout186_clear;
    auto gout197_clear = fand2(gin197_clear, 4);
    std::cerr << "\rLUT198   ";
    auto gin198_clear = 2 * gout188_clear + gout193_clear;
    auto gout198_clear = fand2(gin198_clear, 4);
    std::cerr << "\rLUT199   ";
    auto gin199_clear = 2 * gout190_clear + gout194_clear;
    auto gout199_clear = fand2(gin199_clear, 4);
    std::cerr << "\rLUT200   ";
    auto gin200_clear = 2 * gout195_clear + gout191_clear;
    auto gout200_clear = fnand2(gin200_clear, 4);
    std::cerr << "\rLUT201   ";
    auto gin201_clear = 2 * gout200_clear + gout189_clear;
    auto gout201_clear = fnand2(gin201_clear, 4);
    std::cerr << "\rLUT202   ";
    auto gin202_clear = 2 * gout201_clear + gout199_clear;
    auto gout202_clear = fnand2(gin202_clear, 4);
    std::cerr << "\rLUT203   ";
    auto gin203_clear = 2 * gout202_clear + gout197_clear;
    auto gout203_clear = fnand2(gin203_clear, 4);
    std::cerr << "\rLUT204   ";
    auto gin204_clear = 2 * gout203_clear + gout198_clear;
    auto gout204_clear = fnand2(gin204_clear, 4);
    std::cerr << "\rLUT205   ";
    auto gin205_clear = 2 * gout204_clear + gout192_clear;
    auto gout205_clear = fnand2(gin205_clear, 4);
    std::cerr << "\rLUT206   ";
    auto gin206_clear = 2 * gout12_clear + gout205_clear;
    auto gout206_clear = fand2(gin206_clear, 4);

    std::cerr << "\r          \r";
    std::vector<long> out;
    out.push_back(gout206_clear); /* out0 */
    out.push_back(gout178_clear); /* out1 */
    out.push_back(gout134_clear); /* out2 */
    out.push_back(gout102_clear); /* out3 */
    out.push_back(gout63_clear); /* out4 */
    out.push_back(gout38_clear); /* out5 */
    out.push_back(gout31_clear); /* out6 */
    out.push_back(gout17_clear); /* out7 */
    return out;
}

std::vector<long>
test_add4_lut3(FHEContext& ctx, uint8_t a, uint8_t b)
{
    long ct_a0_clear = (a >> 0) & 1;
    long ct_a1_clear = (a >> 1) & 1;
    long ct_a2_clear = (a >> 2) & 1;
    long ct_a3_clear = (a >> 3) & 1;
    long ct_b0_clear = (b >> 0) & 1;
    long ct_b1_clear = (b >> 1) & 1;
    long ct_b2_clear = (b >> 2) & 1;
    long ct_b3_clear = (b >> 3) & 1;

    std::vector<RotationPoly> decomp;
    std::vector<long (*)(long)> fdecomp;
    auto decomp0 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp0));
    fdecomp.push_back(decomp0);
    auto decomp1 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp1));
    fdecomp.push_back(decomp1);
    auto decomp2 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp2));
    fdecomp.push_back(decomp2);
    auto vdecomp = [fdecomp](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 3; ++i)
            ret.push_back(fdecomp[i](I));
        return ret;
    };

    std::vector<RotationPoly> lut0;
    std::vector<long (*)(long)> flut0;
    auto lut0idx0 = [](long I) -> long {
        /* GATE 4 (LUT2 _22_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut0.push_back(ctx.genrate_lut(lut0idx0));
    flut0.push_back(lut0idx0);
    auto lut0idx1 = [](long I) -> long {
        /* GATE 8 (LUT2 _26_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut0.push_back(ctx.genrate_lut(lut0idx1));
    flut0.push_back(lut0idx1);
    auto fvec0 = [flut0](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut0[i](I));
        return ret;
    };

    std::cerr << "\rLUT0   ";
    long gin0_clear = 1 * ct_a0_clear + 2 * ct_b0_clear;
    std::vector<long> gout0_clear = fvec0(gin0_clear);

    std::vector<RotationPoly> lut1;
    std::vector<long (*)(long)> flut1;
    auto lut1idx0 = [](long I) -> long {
        /* GATE 5 (LUT3 _23_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut1.push_back(ctx.genrate_lut(lut1idx0));
    flut1.push_back(lut1idx0);
    auto lut1idx1 = [](long I) -> long {
        /* GATE 3 (LUT3 _21_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut1.push_back(ctx.genrate_lut(lut1idx1));
    flut1.push_back(lut1idx1);
    auto fvec1 = [flut1](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut1[i](I));
        return ret;
    };

    std::cerr << "\rLUT1   ";
    long gin1_clear = 1 * gout0_clear[0] + 2 * ct_a1_clear + 4 * ct_b1_clear;
    std::vector<long> gout1_clear = fvec1(gin1_clear);

    std::vector<RotationPoly> lut2;
    std::vector<long (*)(long)> flut2;
    auto lut2idx0 = [](long I) -> long {
        /* GATE 6 (LUT3 _24_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut2.push_back(ctx.genrate_lut(lut2idx0));
    flut2.push_back(lut2idx0);
    auto lut2idx1 = [](long I) -> long {
        /* GATE 2 (LUT3 _20_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut2.push_back(ctx.genrate_lut(lut2idx1));
    flut2.push_back(lut2idx1);
    auto fvec2 = [flut2](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut2[i](I));
        return ret;
    };

    std::cerr << "\rLUT2   ";
    long gin2_clear = 1 * gout1_clear[1] + 2 * ct_a2_clear + 4 * ct_b2_clear;
    std::vector<long> gout2_clear = fvec2(gin2_clear);

    std::vector<RotationPoly> lut3;
    std::vector<long (*)(long)> flut3;
    auto lut3idx0 = [](long I) -> long {
        /* GATE 1 (LUT3 _19_ INIT 0xd4 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut3.push_back(ctx.genrate_lut(lut3idx0));
    flut3.push_back(lut3idx0);
    auto lut3idx1 = [](long I) -> long {
        /* GATE 7 (LUT3 _25_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut3.push_back(ctx.genrate_lut(lut3idx1));
    flut3.push_back(lut3idx1);
    auto fvec3 = [flut3](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut3[i](I));
        return ret;
    };

    std::cerr << "\rLUT3   ";
    long gin3_clear = 1 * gout2_clear[1] + 2 * ct_a3_clear + 4 * ct_b3_clear;
    std::vector<long> gout3_clear = fvec3(gin3_clear);

    std::cerr << "\r          \r";
    std::vector<long> out;
    out.push_back(gout0_clear[1]); /* out0 */
    out.push_back(gout1_clear[0]); /* out1 */
    out.push_back(gout2_clear[0]); /* out2 */
    out.push_back(gout3_clear[1]); /* out3 */
    out.push_back(gout3_clear[0]); /* out4 */
    return out;
}

std::vector<long>
test_calculator_lut3(FHEContext& ctx, uint8_t op, uint16_t x, uint16_t y)
{
    long ct_op0_clear = (op >> 0) & 1;
    long ct_op1_clear = (op >> 1) & 1;
    long ct_op2_clear = (op >> 2) & 1;
    long ct_op3_clear = (op >> 3) & 1;
    long ct_op4_clear = (op >> 4) & 1;
    long ct_op5_clear = (op >> 5) & 1;
    long ct_op6_clear = (op >> 6) & 1;
    long ct_op7_clear = (op >> 7) & 1;
    long ct_x0_clear = (x >> 0) & 1;
    long ct_x1_clear = (x >> 1) & 1;
    long ct_x2_clear = (x >> 2) & 1;
    long ct_x3_clear = (x >> 3) & 1;
    long ct_x4_clear = (x >> 4) & 1;
    long ct_x5_clear = (x >> 5) & 1;
    long ct_x6_clear = (x >> 6) & 1;
    long ct_x7_clear = (x >> 7) & 1;
    long ct_x8_clear = (x >> 8) & 1;
    long ct_x9_clear = (x >> 9) & 1;
    long ct_x10_clear = (x >> 10) & 1;
    long ct_x11_clear = (x >> 11) & 1;
    long ct_x12_clear = (x >> 12) & 1;
    long ct_x13_clear = (x >> 13) & 1;
    long ct_x14_clear = (x >> 14) & 1;
    long ct_x15_clear = (x >> 15) & 1;
    long ct_y0_clear = (y >> 0) & 1;
    long ct_y1_clear = (y >> 1) & 1;
    long ct_y2_clear = (y >> 2) & 1;
    long ct_y3_clear = (y >> 3) & 1;
    long ct_y4_clear = (y >> 4) & 1;
    long ct_y5_clear = (y >> 5) & 1;
    long ct_y6_clear = (y >> 6) & 1;
    long ct_y7_clear = (y >> 7) & 1;
    long ct_y8_clear = (y >> 8) & 1;
    long ct_y9_clear = (y >> 9) & 1;
    long ct_y10_clear = (y >> 10) & 1;
    long ct_y11_clear = (y >> 11) & 1;
    long ct_y12_clear = (y >> 12) & 1;
    long ct_y13_clear = (y >> 13) & 1;
    long ct_y14_clear = (y >> 14) & 1;
    long ct_y15_clear = (y >> 15) & 1;

    std::vector<RotationPoly> decomp;
    std::vector<long (*)(long)> fdecomp;
    auto decomp0 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp0));
    fdecomp.push_back(decomp0);
    auto decomp1 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp1));
    fdecomp.push_back(decomp1);
    auto decomp2 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp2));
    fdecomp.push_back(decomp2);
    auto vdecomp = [fdecomp](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 3; ++i)
            ret.push_back(fdecomp[i](I));
        return ret;
    };

    std::vector<RotationPoly> lut0;
    std::vector<long (*)(long)> flut0;
    auto lut0idx0 = [](long I) -> long {
        /* GATE 27 (LUT2 _1483_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut0.push_back(ctx.genrate_lut(lut0idx0));
    flut0.push_back(lut0idx0);
    auto fvec0 = [flut0](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut0[i](I));
        return ret;
    };

    std::cerr << "\rLUT0   ";
    long gin0_clear = 1 * ct_y2_clear + 2 * ct_x0_clear;
    std::vector<long> gout0_clear = fvec0(gin0_clear);

    std::vector<RotationPoly> lut1;
    std::vector<long (*)(long)> flut1;
    auto lut1idx0 = [](long I) -> long {
        /* GATE 435 (LUT2 _1891_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut1.push_back(ctx.genrate_lut(lut1idx0));
    flut1.push_back(lut1idx0);
    auto fvec1 = [flut1](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut1[i](I));
        return ret;
    };

    std::cerr << "\rLUT1   ";
    long gin1_clear = 1 * ct_x4_clear + 2 * ct_y10_clear;
    std::vector<long> gout1_clear = fvec1(gin1_clear);

    std::vector<RotationPoly> lut2;
    std::vector<long (*)(long)> flut2;
    auto lut2idx0 = [](long I) -> long {
        /* GATE 41 (LUT2 _1497_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut2.push_back(ctx.genrate_lut(lut2idx0));
    flut2.push_back(lut2idx0);
    auto fvec2 = [flut2](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut2[i](I));
        return ret;
    };

    std::cerr << "\rLUT2   ";
    long gin2_clear = 1 * ct_y2_clear + 2 * ct_x1_clear;
    std::vector<long> gout2_clear = fvec2(gin2_clear);

    std::vector<RotationPoly> lut3;
    std::vector<long (*)(long)> flut3;
    auto lut3idx0 = [](long I) -> long {
        /* GATE 7 (LUT3 _1463_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut3.push_back(ctx.genrate_lut(lut3idx0));
    flut3.push_back(lut3idx0);
    auto lut3idx1 = [](long I) -> long {
        /* GATE 6 (LUT3 _1462_ INIT 0x40 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut3.push_back(ctx.genrate_lut(lut3idx1));
    flut3.push_back(lut3idx1);
    auto fvec3 = [flut3](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut3[i](I));
        return ret;
    };

    std::cerr << "\rLUT3   ";
    long gin3_clear = 1 * ct_op2_clear + 2 * ct_op1_clear + 4 * ct_op3_clear;
    std::vector<long> gout3_clear = fvec3(gin3_clear);

    std::vector<RotationPoly> lut4;
    std::vector<long (*)(long)> flut4;
    auto lut4idx0 = [](long I) -> long {
        /* GATE 213 (LUT2 _1669_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut4.push_back(ctx.genrate_lut(lut4idx0));
    flut4.push_back(lut4idx0);
    auto fvec4 = [flut4](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut4[i](I));
        return ret;
    };

    std::cerr << "\rLUT4   ";
    long gin4_clear = 1 * ct_y6_clear + 2 * ct_x3_clear;
    std::vector<long> gout4_clear = fvec4(gin4_clear);

    std::vector<RotationPoly> lut5;
    std::vector<long (*)(long)> flut5;
    auto lut5idx0 = [](long I) -> long {
        /* GATE 427 (LUT2 _1883_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut5.push_back(ctx.genrate_lut(lut5idx0));
    flut5.push_back(lut5idx0);
    auto fvec5 = [flut5](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut5[i](I));
        return ret;
    };

    std::cerr << "\rLUT5   ";
    long gin5_clear = 1 * ct_x6_clear + 2 * ct_y8_clear;
    std::vector<long> gout5_clear = fvec5(gin5_clear);

    std::vector<RotationPoly> lut6;
    std::vector<long (*)(long)> flut6;
    auto lut6idx0 = [](long I) -> long {
        /* GATE 346 (LUT2 _1802_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut6.push_back(ctx.genrate_lut(lut6idx0));
    flut6.push_back(lut6idx0);
    auto fvec6 = [flut6](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut6[i](I));
        return ret;
    };

    std::cerr << "\rLUT6   ";
    long gin6_clear = 1 * ct_y12_clear + 2 * ct_x0_clear;
    std::vector<long> gout6_clear = fvec6(gin6_clear);

    std::vector<RotationPoly> lut7;
    std::vector<long (*)(long)> flut7;
    auto lut7idx0 = [](long I) -> long {
        /* GATE 370 (LUT2 _1826_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut7.push_back(ctx.genrate_lut(lut7idx0));
    flut7.push_back(lut7idx0);
    auto fvec7 = [flut7](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut7[i](I));
        return ret;
    };

    std::cerr << "\rLUT7   ";
    long gin7_clear = 1 * ct_y2_clear + 2 * ct_x11_clear;
    std::vector<long> gout7_clear = fvec7(gin7_clear);

    std::vector<RotationPoly> lut8;
    std::vector<long (*)(long)> flut8;
    auto lut8idx0 = [](long I) -> long {
        /* GATE 292 (LUT2 _1748_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut8.push_back(ctx.genrate_lut(lut8idx0));
    flut8.push_back(lut8idx0);
    auto fvec8 = [flut8](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut8[i](I));
        return ret;
    };

    std::cerr << "\rLUT8   ";
    long gin8_clear = 1 * ct_y6_clear + 2 * ct_x5_clear;
    std::vector<long> gout8_clear = fvec8(gin8_clear);

    std::vector<RotationPoly> lut9;
    std::vector<long (*)(long)> flut9;
    auto lut9idx0 = [](long I) -> long {
        /* GATE 324 (LUT2 _1780_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut9.push_back(ctx.genrate_lut(lut9idx0));
    flut9.push_back(lut9idx0);
    auto fvec9 = [flut9](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut9[i](I));
        return ret;
    };

    std::cerr << "\rLUT9   ";
    long gin9_clear = 1 * ct_x10_clear + 2 * ct_y2_clear;
    std::vector<long> gout9_clear = fvec9(gin9_clear);

    std::vector<RotationPoly> lut10;
    std::vector<long (*)(long)> flut10;
    auto lut10idx0 = [](long I) -> long {
        /* GATE 470 (LUT2 _1926_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut10.push_back(ctx.genrate_lut(lut10idx0));
    flut10.push_back(lut10idx0);
    auto fvec10 = [flut10](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut10[i](I));
        return ret;
    };

    std::cerr << "\rLUT10   ";
    long gin10_clear = 1 * ct_x9_clear + 2 * ct_y6_clear;
    std::vector<long> gout10_clear = fvec10(gin10_clear);

    std::vector<RotationPoly> lut11;
    std::vector<long (*)(long)> flut11;
    auto lut11idx0 = [](long I) -> long {
        /* GATE 59 (LUT2 _1515_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut11.push_back(ctx.genrate_lut(lut11idx0));
    flut11.push_back(lut11idx0);
    auto fvec11 = [flut11](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut11[i](I));
        return ret;
    };

    std::cerr << "\rLUT11   ";
    long gin11_clear = 1 * ct_x4_clear + 2 * ct_y0_clear;
    std::vector<long> gout11_clear = fvec11(gin11_clear);

    std::vector<RotationPoly> lut12;
    std::vector<long (*)(long)> flut12;
    auto lut12idx0 = [](long I) -> long {
        /* GATE 78 (LUT2 _1534_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut12.push_back(ctx.genrate_lut(lut12idx0));
    flut12.push_back(lut12idx0);
    auto fvec12 = [flut12](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut12[i](I));
        return ret;
    };

    std::cerr << "\rLUT12   ";
    long gin12_clear = 1 * ct_y2_clear + 2 * ct_x3_clear;
    std::vector<long> gout12_clear = fvec12(gin12_clear);

    std::vector<RotationPoly> lut13;
    std::vector<long (*)(long)> flut13;
    auto lut13idx0 = [](long I) -> long {
        /* GATE 242 (LUT2 _1698_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut13.push_back(ctx.genrate_lut(lut13idx0));
    flut13.push_back(lut13idx0);
    auto fvec13 = [flut13](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut13[i](I));
        return ret;
    };

    std::cerr << "\rLUT13   ";
    long gin13_clear = 1 * ct_y5_clear + 2 * ct_x5_clear;
    std::vector<long> gout13_clear = fvec13(gin13_clear);

    std::vector<RotationPoly> lut14;
    std::vector<long (*)(long)> flut14;
    auto lut14idx0 = [](long I) -> long {
        /* GATE 200 (LUT2 _1656_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut14.push_back(ctx.genrate_lut(lut14idx0));
    flut14.push_back(lut14idx0);
    auto fvec14 = [flut14](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut14[i](I));
        return ret;
    };

    std::cerr << "\rLUT14   ";
    long gin14_clear = 1 * ct_x8_clear + 2 * ct_y1_clear;
    std::vector<long> gout14_clear = fvec14(gin14_clear);

    std::vector<RotationPoly> lut15;
    std::vector<long (*)(long)> flut15;
    auto lut15idx0 = [](long I) -> long {
        /* GATE 325 (LUT2 _1781_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut15.push_back(ctx.genrate_lut(lut15idx0));
    flut15.push_back(lut15idx0);
    auto fvec15 = [flut15](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut15[i](I));
        return ret;
    };

    std::cerr << "\rLUT15   ";
    long gin15_clear = 1 * ct_y0_clear + 2 * ct_x12_clear;
    std::vector<long> gout15_clear = fvec15(gin15_clear);

    std::vector<RotationPoly> lut16;
    std::vector<long (*)(long)> flut16;
    auto lut16idx0 = [](long I) -> long {
        /* GATE 436 (LUT2 _1892_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut16.push_back(ctx.genrate_lut(lut16idx0));
    flut16.push_back(lut16idx0);
    auto fvec16 = [flut16](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut16[i](I));
        return ret;
    };

    std::cerr << "\rLUT16   ";
    long gin16_clear = 1 * ct_y11_clear + 2 * ct_x3_clear;
    std::vector<long> gout16_clear = fvec16(gin16_clear);

    std::vector<RotationPoly> lut17;
    std::vector<long (*)(long)> flut17;
    auto lut17idx0 = [](long I) -> long {
        /* GATE 173 (LUT2 _1629_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut17.push_back(ctx.genrate_lut(lut17idx0));
    flut17.push_back(lut17idx0);
    auto fvec17 = [flut17](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut17[i](I));
        return ret;
    };

    std::cerr << "\rLUT17   ";
    long gin17_clear = 1 * ct_y7_clear + 2 * ct_x1_clear;
    std::vector<long> gout17_clear = fvec17(gin17_clear);

    std::vector<RotationPoly> lut18;
    std::vector<long (*)(long)> flut18;
    auto lut18idx0 = [](long I) -> long {
        /* GATE 335 (LUT2 _1791_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut18.push_back(ctx.genrate_lut(lut18idx0));
    flut18.push_back(lut18idx0);
    auto fvec18 = [flut18](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut18[i](I));
        return ret;
    };

    std::cerr << "\rLUT18   ";
    long gin18_clear = 1 * ct_x4_clear + 2 * ct_y8_clear;
    std::vector<long> gout18_clear = fvec18(gin18_clear);

    std::vector<RotationPoly> lut19;
    std::vector<long (*)(long)> flut19;
    auto lut19idx0 = [](long I) -> long {
        /* GATE 439 (LUT2 _1895_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut19.push_back(ctx.genrate_lut(lut19idx0));
    flut19.push_back(lut19idx0);
    auto fvec19 = [flut19](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut19[i](I));
        return ret;
    };

    std::cerr << "\rLUT19   ";
    long gin19_clear = 1 * ct_y13_clear + 2 * ct_x1_clear;
    std::vector<long> gout19_clear = fvec19(gin19_clear);

    std::vector<RotationPoly> lut20;
    std::vector<long (*)(long)> flut20;
    auto lut20idx0 = [](long I) -> long {
        /* GATE 34 (LUT3 _1490_ INIT 0x1 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut20.push_back(ctx.genrate_lut(lut20idx0));
    flut20.push_back(lut20idx0);
    auto fvec20 = [flut20](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut20[i](I));
        return ret;
    };

    std::cerr << "\rLUT20   ";
    long gin20_clear = 1 * ct_y2_clear + 2 * ct_y1_clear + 4 * ct_y0_clear;
    std::vector<long> gout20_clear = fvec20(gin20_clear);

    std::vector<RotationPoly> lut21;
    std::vector<long (*)(long)> flut21;
    auto lut21idx0 = [](long I) -> long {
        /* GATE 13 (LUT2 _1469_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut21.push_back(ctx.genrate_lut(lut21idx0));
    flut21.push_back(lut21idx0);
    auto fvec21 = [flut21](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut21[i](I));
        return ret;
    };

    std::cerr << "\rLUT21   ";
    long gin21_clear = 1 * ct_y0_clear + 2 * ct_x0_clear;
    std::vector<long> gout21_clear = fvec21(gin21_clear);

    std::vector<RotationPoly> lut22;
    std::vector<long (*)(long)> flut22;
    auto lut22idx0 = [](long I) -> long {
        /* GATE 390 (LUT2 _1846_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut22.push_back(ctx.genrate_lut(lut22idx0));
    flut22.push_back(lut22idx0);
    auto fvec22 = [flut22](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut22[i](I));
        return ret;
    };

    std::cerr << "\rLUT22   ";
    long gin22_clear = 1 * ct_y11_clear + 2 * ct_x2_clear;
    std::vector<long> gout22_clear = fvec22(gin22_clear);

    std::vector<RotationPoly> lut23;
    std::vector<long (*)(long)> flut23;
    auto lut23idx0 = [](long I) -> long {
        /* GATE 79 (LUT2 _1535_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut23.push_back(ctx.genrate_lut(lut23idx0));
    flut23.push_back(lut23idx0);
    auto fvec23 = [flut23](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut23[i](I));
        return ret;
    };

    std::cerr << "\rLUT23   ";
    long gin23_clear = 1 * ct_y0_clear + 2 * ct_x5_clear;
    std::vector<long> gout23_clear = fvec23(gin23_clear);

    std::vector<RotationPoly> lut24;
    std::vector<long (*)(long)> flut24;
    auto lut24idx0 = [](long I) -> long {
        /* GATE 106 (LUT2 _1562_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut24.push_back(ctx.genrate_lut(lut24idx0));
    flut24.push_back(lut24idx0);
    auto fvec24 = [flut24](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut24[i](I));
        return ret;
    };

    std::cerr << "\rLUT24   ";
    long gin24_clear = 1 * ct_y4_clear + 2 * ct_x2_clear;
    std::vector<long> gout24_clear = fvec24(gin24_clear);

    std::vector<RotationPoly> lut25;
    std::vector<long (*)(long)> flut25;
    auto lut25idx0 = [](long I) -> long {
        /* GATE 131 (LUT2 _1587_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut25.push_back(ctx.genrate_lut(lut25idx0));
    flut25.push_back(lut25idx0);
    auto fvec25 = [flut25](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut25[i](I));
        return ret;
    };

    std::cerr << "\rLUT25   ";
    long gin25_clear = 1 * ct_y2_clear + 2 * ct_x5_clear;
    std::vector<long> gout25_clear = fvec25(gin25_clear);

    std::vector<RotationPoly> lut26;
    std::vector<long (*)(long)> flut26;
    auto lut26idx0 = [](long I) -> long {
        /* GATE 417 (LUT2 _1873_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut26.push_back(ctx.genrate_lut(lut26idx0));
    flut26.push_back(lut26idx0);
    auto fvec26 = [flut26](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut26[i](I));
        return ret;
    };

    std::cerr << "\rLUT26   ";
    long gin26_clear = 1 * ct_y0_clear + 2 * ct_x14_clear;
    std::vector<long> gout26_clear = fvec26(gin26_clear);

    std::vector<RotationPoly> lut27;
    std::vector<long (*)(long)> flut27;
    auto lut27idx0 = [](long I) -> long {
        /* GATE 373 (LUT2 _1829_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut27.push_back(ctx.genrate_lut(lut27idx0));
    flut27.push_back(lut27idx0);
    auto fvec27 = [flut27](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut27[i](I));
        return ret;
    };

    std::cerr << "\rLUT27   ";
    long gin27_clear = 1 * ct_x9_clear + 2 * ct_y4_clear;
    std::vector<long> gout27_clear = fvec27(gin27_clear);

    std::vector<RotationPoly> lut28;
    std::vector<long (*)(long)> flut28;
    auto lut28idx0 = [](long I) -> long {
        /* GATE 58 (LUT2 _1514_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut28.push_back(ctx.genrate_lut(lut28idx0));
    flut28.push_back(lut28idx0);
    auto fvec28 = [flut28](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut28[i](I));
        return ret;
    };

    std::cerr << "\rLUT28   ";
    long gin28_clear = 1 * ct_y2_clear + 2 * ct_x2_clear;
    std::vector<long> gout28_clear = fvec28(gin28_clear);

    std::vector<RotationPoly> lut29;
    std::vector<long (*)(long)> flut29;
    auto lut29idx0 = [](long I) -> long {
        /* GATE 241 (LUT2 _1697_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut29.push_back(ctx.genrate_lut(lut29idx0));
    flut29.push_back(lut29idx0);
    auto fvec29 = [flut29](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut29[i](I));
        return ret;
    };

    std::cerr << "\rLUT29   ";
    long gin29_clear = 1 * ct_y4_clear + 2 * ct_x6_clear;
    std::vector<long> gout29_clear = fvec29(gin29_clear);

    std::vector<RotationPoly> lut30;
    std::vector<long (*)(long)> flut30;
    auto lut30idx0 = [](long I) -> long {
        /* GATE 299 (LUT2 _1755_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut30.push_back(ctx.genrate_lut(lut30idx0));
    flut30.push_back(lut30idx0);
    auto fvec30 = [flut30](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut30[i](I));
        return ret;
    };

    std::cerr << "\rLUT30   ";
    long gin30_clear = 1 * ct_y11_clear + 2 * ct_x0_clear;
    std::vector<long> gout30_clear = fvec30(gin30_clear);

    std::vector<RotationPoly> lut31;
    std::vector<long (*)(long)> flut31;
    auto lut31idx0 = [](long I) -> long {
        /* GATE 136 (LUT2 _1592_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut31.push_back(ctx.genrate_lut(lut31idx0));
    flut31.push_back(lut31idx0);
    auto fvec31 = [flut31](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut31[i](I));
        return ret;
    };

    std::cerr << "\rLUT31   ";
    long gin31_clear = 1 * ct_x4_clear + 2 * ct_y3_clear;
    std::vector<long> gout31_clear = fvec31(gin31_clear);

    std::vector<RotationPoly> lut32;
    std::vector<long (*)(long)> flut32;
    auto lut32idx0 = [](long I) -> long {
        /* GATE 167 (LUT2 _1623_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut32.push_back(ctx.genrate_lut(lut32idx0));
    flut32.push_back(lut32idx0);
    auto fvec32 = [flut32](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut32[i](I));
        return ret;
    };

    std::cerr << "\rLUT32   ";
    long gin32_clear = 1 * ct_y5_clear + 2 * ct_x3_clear;
    std::vector<long> gout32_clear = fvec32(gin32_clear);

    std::vector<RotationPoly> lut33;
    std::vector<long (*)(long)> flut33;
    auto lut33idx0 = [](long I) -> long {
        /* GATE 344 (LUT2 _1800_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut33.push_back(ctx.genrate_lut(lut33idx0));
    flut33.push_back(lut33idx0);
    auto fvec33 = [flut33](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut33[i](I));
        return ret;
    };

    std::cerr << "\rLUT33   ";
    long gin33_clear = 1 * ct_y11_clear + 2 * ct_x1_clear;
    std::vector<long> gout33_clear = fvec33(gin33_clear);

    std::vector<RotationPoly> lut34;
    std::vector<long (*)(long)> flut34;
    auto lut34idx0 = [](long I) -> long {
        /* GATE 249 (LUT2 _1705_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut34.push_back(ctx.genrate_lut(lut34idx0));
    flut34.push_back(lut34idx0);
    auto fvec34 = [flut34](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut34[i](I));
        return ret;
    };

    std::cerr << "\rLUT34   ";
    long gin34_clear = 1 * ct_x2_clear + 2 * ct_y8_clear;
    std::vector<long> gout34_clear = fvec34(gin34_clear);

    std::vector<RotationPoly> lut35;
    std::vector<long (*)(long)> flut35;
    auto lut35idx0 = [](long I) -> long {
        /* GATE 328 (LUT2 _1784_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut35.push_back(ctx.genrate_lut(lut35idx0));
    flut35.push_back(lut35idx0);
    auto fvec35 = [flut35](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut35[i](I));
        return ret;
    };

    std::cerr << "\rLUT35   ";
    long gin35_clear = 1 * ct_y5_clear + 2 * ct_x7_clear;
    std::vector<long> gout35_clear = fvec35(gin35_clear);

    std::vector<RotationPoly> lut36;
    std::vector<long (*)(long)> flut36;
    auto lut36idx0 = [](long I) -> long {
        /* GATE 254 (LUT2 _1710_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut36.push_back(ctx.genrate_lut(lut36idx0));
    flut36.push_back(lut36idx0);
    auto fvec36 = [flut36](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut36[i](I));
        return ret;
    };

    std::cerr << "\rLUT36   ";
    long gin36_clear = 1 * ct_y9_clear + 2 * ct_x1_clear;
    std::vector<long> gout36_clear = fvec36(gin36_clear);

    std::vector<RotationPoly> lut37;
    std::vector<long (*)(long)> flut37;
    auto lut37idx0 = [](long I) -> long {
        /* GATE 81 (LUT2 _1537_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut37.push_back(ctx.genrate_lut(lut37idx0));
    flut37.push_back(lut37idx0);
    auto fvec37 = [flut37](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut37[i](I));
        return ret;
    };

    std::cerr << "\rLUT37   ";
    long gin37_clear = 1 * ct_y4_clear + 2 * ct_x1_clear;
    std::vector<long> gout37_clear = fvec37(gin37_clear);

    std::vector<RotationPoly> lut38;
    std::vector<long (*)(long)> flut38;
    auto lut38idx0 = [](long I) -> long {
        /* GATE 28 (LUT2 _1484_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut38.push_back(ctx.genrate_lut(lut38idx0));
    flut38.push_back(lut38idx0);
    auto fvec38 = [flut38](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut38[i](I));
        return ret;
    };

    std::cerr << "\rLUT38   ";
    long gin38_clear = 1 * ct_x2_clear + 2 * ct_y0_clear;
    std::vector<long> gout38_clear = fvec38(gin38_clear);

    std::vector<RotationPoly> lut39;
    std::vector<long (*)(long)> flut39;
    auto lut39idx0 = [](long I) -> long {
        /* GATE 211 (LUT2 _1667_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut39.push_back(ctx.genrate_lut(lut39idx0));
    flut39.push_back(lut39idx0);
    auto fvec39 = [flut39](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut39[i](I));
        return ret;
    };

    std::cerr << "\rLUT39   ";
    long gin39_clear = 1 * ct_y7_clear + 2 * ct_x2_clear;
    std::vector<long> gout39_clear = fvec39(gin39_clear);

    std::vector<RotationPoly> lut40;
    std::vector<long (*)(long)> flut40;
    auto lut40idx0 = [](long I) -> long {
        /* GATE 25 (LUT2 _1481_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut40.push_back(ctx.genrate_lut(lut40idx0));
    flut40.push_back(lut40idx0);
    auto fvec40 = [flut40](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut40[i](I));
        return ret;
    };

    std::cerr << "\rLUT40   ";
    long gin40_clear = 1 * ct_y1_clear + 2 * ct_x1_clear;
    std::vector<long> gout40_clear = fvec40(gin40_clear);

    std::vector<RotationPoly> lut41;
    std::vector<long (*)(long)> flut41;
    auto lut41idx0 = [](long I) -> long {
        /* GATE 371 (LUT2 _1827_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut41.push_back(ctx.genrate_lut(lut41idx0));
    flut41.push_back(lut41idx0);
    auto fvec41 = [flut41](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut41[i](I));
        return ret;
    };

    std::cerr << "\rLUT41   ";
    long gin41_clear = 1 * ct_x13_clear + 2 * ct_y0_clear;
    std::vector<long> gout41_clear = fvec41(gin41_clear);

    std::vector<RotationPoly> lut42;
    std::vector<long (*)(long)> flut42;
    auto lut42idx0 = [](long I) -> long {
        /* GATE 486 (LUT2 _1942_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut42.push_back(ctx.genrate_lut(lut42idx0));
    flut42.push_back(lut42idx0);
    auto fvec42 = [flut42](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut42[i](I));
        return ret;
    };

    std::cerr << "\rLUT42   ";
    long gin42_clear = 1 * ct_y3_clear + 2 * ct_x12_clear;
    std::vector<long> gout42_clear = fvec42(gin42_clear);

    std::vector<RotationPoly> lut43;
    std::vector<long (*)(long)> flut43;
    auto lut43idx0 = [](long I) -> long {
        /* GATE 469 (LUT3 _1925_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut43.push_back(ctx.genrate_lut(lut43idx0));
    flut43.push_back(lut43idx0);
    auto fvec43 = [flut43](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut43[i](I));
        return ret;
    };

    std::cerr << "\rLUT43   ";
    long gin43_clear = 1 * ct_y5_clear + 2 * ct_x10_clear + 4 * gout10_clear[0];
    std::vector<long> gout43_clear = fvec43(gin43_clear);

    std::vector<RotationPoly> lut44;
    std::vector<long (*)(long)> flut44;
    auto lut44idx0 = [](long I) -> long {
        /* GATE 375 (LUT2 _1831_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut44.push_back(ctx.genrate_lut(lut44idx0));
    flut44.push_back(lut44idx0);
    auto fvec44 = [flut44](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut44[i](I));
        return ret;
    };

    std::cerr << "\rLUT44   ";
    long gin44_clear = 1 * ct_x10_clear + 2 * ct_y3_clear;
    std::vector<long> gout44_clear = fvec44(gin44_clear);

    std::vector<RotationPoly> lut45;
    std::vector<long (*)(long)> flut45;
    auto lut45idx0 = [](long I) -> long {
        /* GATE 174 (LUT2 _1630_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut45.push_back(ctx.genrate_lut(lut45idx0));
    flut45.push_back(lut45idx0);
    auto fvec45 = [flut45](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut45[i](I));
        return ret;
    };

    std::cerr << "\rLUT45   ";
    long gin45_clear = 1 * ct_y8_clear + 2 * ct_x0_clear;
    std::vector<long> gout45_clear = fvec45(gin45_clear);

    std::vector<RotationPoly> lut46;
    std::vector<long (*)(long)> flut46;
    auto lut46idx0 = [](long I) -> long {
        /* GATE 428 (LUT2 _1884_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut46.push_back(ctx.genrate_lut(lut46idx0));
    flut46.push_back(lut46idx0);
    auto fvec46 = [flut46](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut46[i](I));
        return ret;
    };

    std::cerr << "\rLUT46   ";
    long gin46_clear = 1 * ct_y6_clear + 2 * ct_x8_clear;
    std::vector<long> gout46_clear = fvec46(gin46_clear);

    std::vector<RotationPoly> lut47;
    std::vector<long (*)(long)> flut47;
    auto lut47idx0 = [](long I) -> long {
        /* GATE 279 (LUT2 _1735_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut47.push_back(ctx.genrate_lut(lut47idx0));
    flut47.push_back(lut47idx0);
    auto fvec47 = [flut47](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut47[i](I));
        return ret;
    };

    std::cerr << "\rLUT47   ";
    long gin47_clear = 1 * ct_x10_clear + 2 * ct_y1_clear;
    std::vector<long> gout47_clear = fvec47(gin47_clear);

    std::vector<RotationPoly> lut48;
    std::vector<long (*)(long)> flut48;
    auto lut48idx0 = [](long I) -> long {
        /* GATE 380 (LUT2 _1836_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut48.push_back(ctx.genrate_lut(lut48idx0));
    flut48.push_back(lut48idx0);
    auto fvec48 = [flut48](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut48[i](I));
        return ret;
    };

    std::cerr << "\rLUT48   ";
    long gin48_clear = 1 * ct_y7_clear + 2 * ct_x6_clear;
    std::vector<long> gout48_clear = fvec48(gin48_clear);

    std::vector<RotationPoly> lut49;
    std::vector<long (*)(long)> flut49;
    auto lut49idx0 = [](long I) -> long {
        /* GATE 134 (LUT2 _1590_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut49.push_back(ctx.genrate_lut(lut49idx0));
    flut49.push_back(lut49idx0);
    auto fvec49 = [flut49](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut49[i](I));
        return ret;
    };

    std::cerr << "\rLUT49   ";
    long gin49_clear = 1 * ct_x3_clear + 2 * ct_y4_clear;
    std::vector<long> gout49_clear = fvec49(gin49_clear);

    std::vector<RotationPoly> lut50;
    std::vector<long (*)(long)> flut50;
    auto lut50idx0 = [](long I) -> long {
        /* GATE 284 (LUT2 _1740_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut50.push_back(ctx.genrate_lut(lut50idx0));
    flut50.push_back(lut50idx0);
    auto fvec50 = [flut50](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut50[i](I));
        return ret;
    };

    std::cerr << "\rLUT50   ";
    long gin50_clear = 1 * ct_y5_clear + 2 * ct_x6_clear;
    std::vector<long> gout50_clear = fvec50(gin50_clear);

    std::vector<RotationPoly> lut51;
    std::vector<long (*)(long)> flut51;
    auto lut51idx0 = [](long I) -> long {
        /* GATE 437 (LUT2 _1893_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut51.push_back(ctx.genrate_lut(lut51idx0));
    flut51.push_back(lut51idx0);
    auto fvec51 = [flut51](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut51[i](I));
        return ret;
    };

    std::cerr << "\rLUT51   ";
    long gin51_clear = 1 * ct_y9_clear + 2 * ct_x5_clear;
    std::vector<long> gout51_clear = fvec51(gin51_clear);

    std::vector<RotationPoly> lut52;
    std::vector<long (*)(long)> flut52;
    auto lut52idx0 = [](long I) -> long {
        /* GATE 107 (LUT2 _1563_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut52.push_back(ctx.genrate_lut(lut52idx0));
    flut52.push_back(lut52idx0);
    auto fvec52 = [flut52](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut52[i](I));
        return ret;
    };

    std::cerr << "\rLUT52   ";
    long gin52_clear = 1 * ct_y5_clear + 2 * ct_x1_clear;
    std::vector<long> gout52_clear = fvec52(gin52_clear);

    std::vector<RotationPoly> lut53;
    std::vector<long (*)(long)> flut53;
    auto lut53idx0 = [](long I) -> long {
        /* GATE 205 (LUT2 _1661_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut53.push_back(ctx.genrate_lut(lut53idx0));
    flut53.push_back(lut53idx0);
    auto fvec53 = [flut53](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut53[i](I));
        return ret;
    };

    std::cerr << "\rLUT53   ";
    long gin53_clear = 1 * ct_y5_clear + 2 * ct_x4_clear;
    std::vector<long> gout53_clear = fvec53(gin53_clear);

    std::vector<RotationPoly> lut54;
    std::vector<long (*)(long)> flut54;
    auto lut54idx0 = [](long I) -> long {
        /* GATE 393 (LUT2 _1849_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut54.push_back(ctx.genrate_lut(lut54idx0));
    flut54.push_back(lut54idx0);
    auto fvec54 = [flut54](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut54[i](I));
        return ret;
    };

    std::cerr << "\rLUT54   ";
    long gin54_clear = 1 * ct_y12_clear + 2 * ct_x1_clear;
    std::vector<long> gout54_clear = fvec54(gin54_clear);

    std::vector<RotationPoly> lut55;
    std::vector<long (*)(long)> flut55;
    auto lut55idx0 = [](long I) -> long {
        /* GATE 440 (LUT2 _1896_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut55.push_back(ctx.genrate_lut(lut55idx0));
    flut55.push_back(lut55idx0);
    auto fvec55 = [flut55](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut55[i](I));
        return ret;
    };

    std::cerr << "\rLUT55   ";
    long gin55_clear = 1 * ct_y14_clear + 2 * ct_x0_clear;
    std::vector<long> gout55_clear = fvec55(gin55_clear);

    std::vector<RotationPoly> lut56;
    std::vector<long (*)(long)> flut56;
    auto lut56idx0 = [](long I) -> long {
        /* GATE 83 (LUT2 _1539_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut56.push_back(ctx.genrate_lut(lut56idx0));
    flut56.push_back(lut56idx0);
    auto fvec56 = [flut56](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut56[i](I));
        return ret;
    };

    std::cerr << "\rLUT56   ";
    long gin56_clear = 1 * ct_y3_clear + 2 * ct_x2_clear;
    std::vector<long> gout56_clear = fvec56(gin56_clear);

    std::vector<RotationPoly> lut57;
    std::vector<long (*)(long)> flut57;
    auto lut57idx0 = [](long I) -> long {
        /* GATE 202 (LUT2 _1658_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut57.push_back(ctx.genrate_lut(lut57idx0));
    flut57.push_back(lut57idx0);
    auto fvec57 = [flut57](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut57[i](I));
        return ret;
    };

    std::cerr << "\rLUT57   ";
    long gin57_clear = 1 * ct_x9_clear + 2 * ct_y0_clear;
    std::vector<long> gout57_clear = fvec57(gin57_clear);

    std::vector<RotationPoly> lut58;
    std::vector<long (*)(long)> flut58;
    auto lut58idx0 = [](long I) -> long {
        /* GATE 382 (LUT2 _1838_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut58.push_back(ctx.genrate_lut(lut58idx0));
    flut58.push_back(lut58idx0);
    auto fvec58 = [flut58](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut58[i](I));
        return ret;
    };

    std::cerr << "\rLUT58   ";
    long gin58_clear = 1 * ct_y6_clear + 2 * ct_x7_clear;
    std::vector<long> gout58_clear = fvec58(gin58_clear);

    std::vector<RotationPoly> lut59;
    std::vector<long (*)(long)> flut59;
    auto lut59idx0 = [](long I) -> long {
        /* GATE 415 (LUT2 _1871_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut59.push_back(ctx.genrate_lut(lut59idx0));
    flut59.push_back(lut59idx0);
    auto fvec59 = [flut59](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut59[i](I));
        return ret;
    };

    std::cerr << "\rLUT59   ";
    long gin59_clear = 1 * ct_x13_clear + 2 * ct_y1_clear;
    std::vector<long> gout59_clear = fvec59(gin59_clear);

    std::vector<RotationPoly> lut60;
    std::vector<long (*)(long)> flut60;
    auto lut60idx0 = [](long I) -> long {
        /* GATE 421 (LUT2 _1877_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut60.push_back(ctx.genrate_lut(lut60idx0));
    flut60.push_back(lut60idx0);
    auto fvec60 = [flut60](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut60[i](I));
        return ret;
    };

    std::cerr << "\rLUT60   ";
    long gin60_clear = 1 * ct_y3_clear + 2 * ct_x11_clear;
    std::vector<long> gout60_clear = fvec60(gin60_clear);

    std::vector<RotationPoly> lut61;
    std::vector<long (*)(long)> flut61;
    auto lut61idx0 = [](long I) -> long {
        /* GATE 5 (LUT2 _1461_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut61.push_back(ctx.genrate_lut(lut61idx0));
    flut61.push_back(lut61idx0);
    auto fvec61 = [flut61](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut61[i](I));
        return ret;
    };

    std::cerr << "\rLUT61   ";
    long gin61_clear = 1 * ct_op6_clear + 2 * ct_op7_clear;
    std::vector<long> gout61_clear = fvec61(gin61_clear);

    std::vector<RotationPoly> lut62;
    std::vector<long (*)(long)> flut62;
    auto lut62idx0 = [](long I) -> long {
        /* GATE 40 (LUT2 _1496_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut62.push_back(ctx.genrate_lut(lut62idx0));
    flut62.push_back(lut62idx0);
    auto fvec62 = [flut62](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut62[i](I));
        return ret;
    };

    std::cerr << "\rLUT62   ";
    long gin62_clear = 1 * ct_y1_clear + 2 * ct_x2_clear;
    std::vector<long> gout62_clear = fvec62(gin62_clear);

    std::vector<RotationPoly> lut63;
    std::vector<long (*)(long)> flut63;
    auto lut63idx0 = [](long I) -> long {
        /* GATE 77 (LUT2 _1533_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut63.push_back(ctx.genrate_lut(lut63idx0));
    flut63.push_back(lut63idx0);
    auto fvec63 = [flut63](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut63[i](I));
        return ret;
    };

    std::cerr << "\rLUT63   ";
    long gin63_clear = 1 * ct_x4_clear + 2 * ct_y1_clear;
    std::vector<long> gout63_clear = fvec63(gin63_clear);

    std::vector<RotationPoly> lut64;
    std::vector<long (*)(long)> flut64;
    auto lut64idx0 = [](long I) -> long {
        /* GATE 479 (LUT2 _1935_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut64.push_back(ctx.genrate_lut(lut64idx0));
    flut64.push_back(lut64idx0);
    auto fvec64 = [flut64](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut64[i](I));
        return ret;
    };

    std::cerr << "\rLUT64   ";
    long gin64_clear = 1 * ct_y14_clear + 2 * ct_x1_clear;
    std::vector<long> gout64_clear = fvec64(gin64_clear);

    std::vector<RotationPoly> lut65;
    std::vector<long (*)(long)> flut65;
    auto lut65idx0 = [](long I) -> long {
        /* GATE 164 (LUT2 _1620_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut65.push_back(ctx.genrate_lut(lut65idx0));
    flut65.push_back(lut65idx0);
    auto fvec65 = [flut65](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut65[i](I));
        return ret;
    };

    std::cerr << "\rLUT65   ";
    long gin65_clear = 1 * ct_x8_clear + 2 * ct_y0_clear;
    std::vector<long> gout65_clear = fvec65(gin65_clear);

    std::vector<RotationPoly> lut66;
    std::vector<long (*)(long)> flut66;
    auto lut66idx0 = [](long I) -> long {
        /* GATE 237 (LUT2 _1693_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut66.push_back(ctx.genrate_lut(lut66idx0));
    flut66.push_back(lut66idx0);
    auto fvec66 = [flut66](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut66[i](I));
        return ret;
    };

    std::cerr << "\rLUT66   ";
    long gin66_clear = 1 * ct_x9_clear + 2 * ct_y1_clear;
    std::vector<long> gout66_clear = fvec66(gin66_clear);

    std::vector<RotationPoly> lut67;
    std::vector<long (*)(long)> flut67;
    auto lut67idx0 = [](long I) -> long {
        /* GATE 168 (LUT2 _1624_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut67.push_back(ctx.genrate_lut(lut67idx0));
    flut67.push_back(lut67idx0);
    auto fvec67 = [flut67](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut67[i](I));
        return ret;
    };

    std::cerr << "\rLUT67   ";
    long gin67_clear = 1 * ct_y3_clear + 2 * ct_x5_clear;
    std::vector<long> gout67_clear = fvec67(gin67_clear);

    std::vector<RotationPoly> lut68;
    std::vector<long (*)(long)> flut68;
    auto lut68idx0 = [](long I) -> long {
        /* GATE 345 (LUT2 _1801_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut68.push_back(ctx.genrate_lut(lut68idx0));
    flut68.push_back(lut68idx0);
    auto fvec68 = [flut68](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut68[i](I));
        return ret;
    };

    std::cerr << "\rLUT68   ";
    long gin68_clear = 1 * ct_y9_clear + 2 * ct_x3_clear;
    std::vector<long> gout68_clear = fvec68(gin68_clear);

    std::vector<RotationPoly> lut69;
    std::vector<long (*)(long)> flut69;
    auto lut69idx0 = [](long I) -> long {
        /* GATE 283 (LUT2 _1739_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut69.push_back(ctx.genrate_lut(lut69idx0));
    flut69.push_back(lut69idx0);
    auto fvec69 = [flut69](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut69[i](I));
        return ret;
    };

    std::cerr << "\rLUT69   ";
    long gin69_clear = 1 * ct_y4_clear + 2 * ct_x7_clear;
    std::vector<long> gout69_clear = fvec69(gin69_clear);

    std::vector<RotationPoly> lut70;
    std::vector<long (*)(long)> flut70;
    auto lut70idx0 = [](long I) -> long {
        /* GATE 488 (LUT3 _1944_ INIT 0x78 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut70.push_back(ctx.genrate_lut(lut70idx0));
    flut70.push_back(lut70idx0);
    auto fvec70 = [flut70](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut70[i](I));
        return ret;
    };

    std::cerr << "\rLUT70   ";
    long gin70_clear = 1 * ct_y1_clear + 2 * ct_y15_clear + 4 * ct_x14_clear;
    std::vector<long> gout70_clear = fvec70(gin70_clear);

    std::vector<RotationPoly> lut71;
    std::vector<long (*)(long)> flut71;
    auto lut71idx0 = [](long I) -> long {
        /* GATE 323 (LUT2 _1779_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut71.push_back(ctx.genrate_lut(lut71idx0));
    flut71.push_back(lut71idx0);
    auto fvec71 = [flut71](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut71[i](I));
        return ret;
    };

    std::cerr << "\rLUT71   ";
    long gin71_clear = 1 * ct_x11_clear + 2 * ct_y1_clear;
    std::vector<long> gout71_clear = fvec71(gin71_clear);

    std::vector<RotationPoly> lut72;
    std::vector<long (*)(long)> flut72;
    auto lut72idx0 = [](long I) -> long {
        /* GATE 329 (LUT2 _1785_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut72.push_back(ctx.genrate_lut(lut72idx0));
    flut72.push_back(lut72idx0);
    auto fvec72 = [flut72](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut72[i](I));
        return ret;
    };

    std::cerr << "\rLUT72   ";
    long gin72_clear = 1 * ct_x9_clear + 2 * ct_y3_clear;
    std::vector<long> gout72_clear = fvec72(gin72_clear);

    std::vector<RotationPoly> lut73;
    std::vector<long (*)(long)> flut73;
    auto lut73idx0 = [](long I) -> long {
        /* GATE 462 (LUT2 _1918_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut73.push_back(ctx.genrate_lut(lut73idx0));
    flut73.push_back(lut73idx0);
    auto fvec73 = [flut73](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut73[i](I));
        return ret;
    };

    std::cerr << "\rLUT73   ";
    long gin73_clear = 1 * ct_y12_clear + 2 * ct_x3_clear;
    std::vector<long> gout73_clear = fvec73(gin73_clear);

    std::vector<RotationPoly> lut74;
    std::vector<long (*)(long)> flut74;
    auto lut74idx0 = [](long I) -> long {
        /* GATE 24 (LUT2 _1480_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut74.push_back(ctx.genrate_lut(lut74idx0));
    flut74.push_back(lut74idx0);
    auto fvec74 = [flut74](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut74[i](I));
        return ret;
    };

    std::cerr << "\rLUT74   ";
    long gin74_clear = 1 * gout40_clear[0] + 2 * gout21_clear[0];
    std::vector<long> gout74_clear = fvec74(gin74_clear);

    std::vector<RotationPoly> lut75;
    std::vector<long (*)(long)> flut75;
    auto lut75idx0 = [](long I) -> long {
        /* GATE 212 (LUT2 _1668_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut75.push_back(ctx.genrate_lut(lut75idx0));
    flut75.push_back(lut75idx0);
    auto fvec75 = [flut75](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut75[i](I));
        return ret;
    };

    std::cerr << "\rLUT75   ";
    long gin75_clear = 1 * ct_y8_clear + 2 * ct_x1_clear;
    std::vector<long> gout75_clear = fvec75(gin75_clear);

    std::vector<RotationPoly> lut76;
    std::vector<long (*)(long)> flut76;
    auto lut76idx0 = [](long I) -> long {
        /* GATE 391 (LUT2 _1847_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut76.push_back(ctx.genrate_lut(lut76idx0));
    flut76.push_back(lut76idx0);
    auto fvec76 = [flut76](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut76[i](I));
        return ret;
    };

    std::cerr << "\rLUT76   ";
    long gin76_clear = 1 * ct_x4_clear + 2 * ct_y9_clear;
    std::vector<long> gout76_clear = fvec76(gin76_clear);

    std::vector<RotationPoly> lut77;
    std::vector<long (*)(long)> flut77;
    auto lut77idx0 = [](long I) -> long {
        /* GATE 130 (LUT2 _1586_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut77.push_back(ctx.genrate_lut(lut77idx0));
    flut77.push_back(lut77idx0);
    auto fvec77 = [flut77](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut77[i](I));
        return ret;
    };

    std::cerr << "\rLUT77   ";
    long gin77_clear = 1 * ct_x6_clear + 2 * ct_y1_clear;
    std::vector<long> gout77_clear = fvec77(gin77_clear);

    std::vector<RotationPoly> lut78;
    std::vector<long (*)(long)> flut78;
    auto lut78idx0 = [](long I) -> long {
        /* GATE 465 (LUT3 _1921_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut78.push_back(ctx.genrate_lut(lut78idx0));
    flut78.push_back(lut78idx0);
    auto lut78idx1 = [](long I) -> long {
        /* GATE 434 (LUT3 _1890_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut78.push_back(ctx.genrate_lut(lut78idx1));
    flut78.push_back(lut78idx1);
    auto fvec78 = [flut78](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut78[i](I));
        return ret;
    };

    std::cerr << "\rLUT78   ";
    long gin78_clear = 1 * gout1_clear[0] + 2 * gout16_clear[0] + 4 * gout51_clear[0];
    std::vector<long> gout78_clear = fvec78(gin78_clear);

    std::vector<RotationPoly> lut79;
    std::vector<long (*)(long)> flut79;
    auto lut79idx0 = [](long I) -> long {
        /* GATE 419 (LUT2 _1875_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut79.push_back(ctx.genrate_lut(lut79idx0));
    flut79.push_back(lut79idx0);
    auto fvec79 = [flut79](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut79[i](I));
        return ret;
    };

    std::cerr << "\rLUT79   ";
    long gin79_clear = 1 * ct_x10_clear + 2 * ct_y4_clear;
    std::vector<long> gout79_clear = fvec79(gin79_clear);

    std::vector<RotationPoly> lut80;
    std::vector<long (*)(long)> flut80;
    auto lut80idx0 = [](long I) -> long {
        /* GATE 485 (LUT3 _1941_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut80.push_back(ctx.genrate_lut(lut80idx0));
    flut80.push_back(lut80idx0);
    auto fvec80 = [flut80](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut80[i](I));
        return ret;
    };

    std::cerr << "\rLUT80   ";
    long gin80_clear = 1 * ct_y2_clear + 2 * ct_x13_clear + 4 * gout42_clear[0];
    std::vector<long> gout80_clear = fvec80(gin80_clear);

    std::vector<RotationPoly> lut81;
    std::vector<long (*)(long)> flut81;
    auto lut81idx0 = [](long I) -> long {
        /* GATE 175 (LUT2 _1631_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut81.push_back(ctx.genrate_lut(lut81idx0));
    flut81.push_back(lut81idx0);
    auto fvec81 = [flut81](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut81[i](I));
        return ret;
    };

    std::cerr << "\rLUT81   ";
    long gin81_clear = 1 * ct_y6_clear + 2 * ct_x2_clear;
    std::vector<long> gout81_clear = fvec81(gin81_clear);

    std::vector<RotationPoly> lut82;
    std::vector<long (*)(long)> flut82;
    auto lut82idx0 = [](long I) -> long {
        /* GATE 280 (LUT2 _1736_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut82.push_back(ctx.genrate_lut(lut82idx0));
    flut82.push_back(lut82idx0);
    auto fvec82 = [flut82](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut82[i](I));
        return ret;
    };

    std::cerr << "\rLUT82   ";
    long gin82_clear = 1 * ct_x9_clear + 2 * ct_y2_clear;
    std::vector<long> gout82_clear = fvec82(gin82_clear);

    std::vector<RotationPoly> lut83;
    std::vector<long (*)(long)> flut83;
    auto lut83idx0 = [](long I) -> long {
        /* GATE 16 (LUT2 _1472_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut83.push_back(ctx.genrate_lut(lut83idx0));
    flut83.push_back(lut83idx0);
    auto fvec83 = [flut83](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut83[i](I));
        return ret;
    };

    std::cerr << "\rLUT83   ";
    long gin83_clear = 1 * ct_y0_clear + 2 * ct_x1_clear;
    std::vector<long> gout83_clear = fvec83(gin83_clear);

    std::vector<RotationPoly> lut84;
    std::vector<long (*)(long)> flut84;
    auto lut84idx0 = [](long I) -> long {
        /* GATE 201 (LUT2 _1657_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut84.push_back(ctx.genrate_lut(lut84idx0));
    flut84.push_back(lut84idx0);
    auto fvec84 = [flut84](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut84[i](I));
        return ret;
    };

    std::cerr << "\rLUT84   ";
    long gin84_clear = 1 * ct_y2_clear + 2 * ct_x7_clear;
    std::vector<long> gout84_clear = fvec84(gin84_clear);

    std::vector<RotationPoly> lut85;
    std::vector<long (*)(long)> flut85;
    auto lut85idx0 = [](long I) -> long {
        /* GATE 57 (LUT2 _1513_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut85.push_back(ctx.genrate_lut(lut85idx0));
    flut85.push_back(lut85idx0);
    auto fvec85 = [flut85](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut85[i](I));
        return ret;
    };

    std::cerr << "\rLUT85   ";
    long gin85_clear = 1 * ct_x3_clear + 2 * ct_y1_clear;
    std::vector<long> gout85_clear = fvec85(gin85_clear);

    std::vector<RotationPoly> lut86;
    std::vector<long (*)(long)> flut86;
    auto lut86idx0 = [](long I) -> long {
        /* GATE 38 (LUT3 _1494_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut86.push_back(ctx.genrate_lut(lut86idx0));
    flut86.push_back(lut86idx0);
    auto lut86idx1 = [](long I) -> long {
        /* GATE 26 (LUT3 _1482_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut86.push_back(ctx.genrate_lut(lut86idx1));
    flut86.push_back(lut86idx1);
    auto fvec86 = [flut86](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut86[i](I));
        return ret;
    };

    std::cerr << "\rLUT86   ";
    long gin86_clear = 1 * gout40_clear[0] + 2 * gout0_clear[0] + 4 * gout38_clear[0];
    std::vector<long> gout86_clear = fvec86(gin86_clear);

    std::vector<RotationPoly> lut87;
    std::vector<long (*)(long)> flut87;
    auto lut87idx0 = [](long I) -> long {
        /* GATE 135 (LUT2 _1591_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut87.push_back(ctx.genrate_lut(lut87idx0));
    flut87.push_back(lut87idx0);
    auto fvec87 = [flut87](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut87[i](I));
        return ret;
    };

    std::cerr << "\rLUT87   ";
    long gin87_clear = 1 * ct_y5_clear + 2 * ct_x2_clear;
    std::vector<long> gout87_clear = fvec87(gin87_clear);

    std::vector<RotationPoly> lut88;
    std::vector<long (*)(long)> flut88;
    auto lut88idx0 = [](long I) -> long {
        /* GATE 281 (LUT2 _1737_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut88.push_back(ctx.genrate_lut(lut88idx0));
    flut88.push_back(lut88idx0);
    auto fvec88 = [flut88](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut88[i](I));
        return ret;
    };

    std::cerr << "\rLUT88   ";
    long gin88_clear = 1 * ct_x11_clear + 2 * ct_y0_clear;
    std::vector<long> gout88_clear = fvec88(gin88_clear);

    std::vector<RotationPoly> lut89;
    std::vector<long (*)(long)> flut89;
    auto lut89idx0 = [](long I) -> long {
        /* GATE 162 (LUT2 _1618_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut89.push_back(ctx.genrate_lut(lut89idx0));
    flut89.push_back(lut89idx0);
    auto fvec89 = [flut89](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut89[i](I));
        return ret;
    };

    std::cerr << "\rLUT89   ";
    long gin89_clear = 1 * ct_y1_clear + 2 * ct_x7_clear;
    std::vector<long> gout89_clear = fvec89(gin89_clear);

    std::vector<RotationPoly> lut90;
    std::vector<long (*)(long)> flut90;
    auto lut90idx0 = [](long I) -> long {
        /* GATE 343 (LUT2 _1799_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut90.push_back(ctx.genrate_lut(lut90idx0));
    flut90.push_back(lut90idx0);
    auto fvec90 = [flut90](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut90[i](I));
        return ret;
    };

    std::cerr << "\rLUT90   ";
    long gin90_clear = 1 * ct_x2_clear + 2 * ct_y10_clear;
    std::vector<long> gout90_clear = fvec90(gin90_clear);

    std::vector<RotationPoly> lut91;
    std::vector<long (*)(long)> flut91;
    auto lut91idx0 = [](long I) -> long {
        /* GATE 285 (LUT2 _1741_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut91.push_back(ctx.genrate_lut(lut91idx0));
    flut91.push_back(lut91idx0);
    auto fvec91 = [flut91](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut91[i](I));
        return ret;
    };

    std::cerr << "\rLUT91   ";
    long gin91_clear = 1 * ct_x8_clear + 2 * ct_y3_clear;
    std::vector<long> gout91_clear = fvec91(gin91_clear);

    std::vector<RotationPoly> lut92;
    std::vector<long (*)(long)> flut92;
    auto lut92idx0 = [](long I) -> long {
        /* GATE 103 (LUT2 _1559_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut92.push_back(ctx.genrate_lut(lut92idx0));
    flut92.push_back(lut92idx0);
    auto fvec92 = [flut92](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut92[i](I));
        return ret;
    };

    std::cerr << "\rLUT92   ";
    long gin92_clear = 1 * ct_x4_clear + 2 * ct_y2_clear;
    std::vector<long> gout92_clear = fvec92(gin92_clear);

    std::vector<RotationPoly> lut93;
    std::vector<long (*)(long)> flut93;
    auto lut93idx0 = [](long I) -> long {
        /* GATE 108 (LUT2 _1564_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut93.push_back(ctx.genrate_lut(lut93idx0));
    flut93.push_back(lut93idx0);
    auto fvec93 = [flut93](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut93[i](I));
        return ret;
    };

    std::cerr << "\rLUT93   ";
    long gin93_clear = 1 * ct_y3_clear + 2 * ct_x3_clear;
    std::vector<long> gout93_clear = fvec93(gin93_clear);

    std::vector<RotationPoly> lut94;
    std::vector<long (*)(long)> flut94;
    auto lut94idx0 = [](long I) -> long {
        /* GATE 416 (LUT2 _1872_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut94.push_back(ctx.genrate_lut(lut94idx0));
    flut94.push_back(lut94idx0);
    auto fvec94 = [flut94](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut94[i](I));
        return ret;
    };

    std::cerr << "\rLUT94   ";
    long gin94_clear = 1 * ct_y2_clear + 2 * ct_x12_clear;
    std::vector<long> gout94_clear = fvec94(gin94_clear);

    std::vector<RotationPoly> lut95;
    std::vector<long (*)(long)> flut95;
    auto lut95idx0 = [](long I) -> long {
        /* GATE 414 (LUT3 _1870_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut95.push_back(ctx.genrate_lut(lut95idx0));
    flut95.push_back(lut95idx0);
    auto lut95idx1 = [](long I) -> long {
        /* GATE 475 (LUT3 _1931_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut95.push_back(ctx.genrate_lut(lut95idx1));
    flut95.push_back(lut95idx1);
    auto fvec95 = [flut95](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut95[i](I));
        return ret;
    };

    std::cerr << "\rLUT95   ";
    long gin95_clear = 1 * gout59_clear[0] + 2 * gout94_clear[0] + 4 * gout26_clear[0];
    std::vector<long> gout95_clear = fvec95(gin95_clear);

    std::vector<RotationPoly> lut96;
    std::vector<long (*)(long)> flut96;
    auto lut96idx0 = [](long I) -> long {
        /* GATE 166 (LUT2 _1622_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut96.push_back(ctx.genrate_lut(lut96idx0));
    flut96.push_back(lut96idx0);
    auto fvec96 = [flut96](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut96[i](I));
        return ret;
    };

    std::cerr << "\rLUT96   ";
    long gin96_clear = 1 * ct_x4_clear + 2 * ct_y4_clear;
    std::vector<long> gout96_clear = fvec96(gin96_clear);

    std::vector<RotationPoly> lut97;
    std::vector<long (*)(long)> flut97;
    auto lut97idx0 = [](long I) -> long {
        /* GATE 104 (LUT2 _1560_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut97.push_back(ctx.genrate_lut(lut97idx0));
    flut97.push_back(lut97idx0);
    auto fvec97 = [flut97](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut97[i](I));
        return ret;
    };

    std::cerr << "\rLUT97   ";
    long gin97_clear = 1 * ct_x6_clear + 2 * ct_y0_clear;
    std::vector<long> gout97_clear = fvec97(gin97_clear);

    std::vector<RotationPoly> lut98;
    std::vector<long (*)(long)> flut98;
    auto lut98idx0 = [](long I) -> long {
        /* GATE 374 (LUT2 _1830_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut98.push_back(ctx.genrate_lut(lut98idx0));
    flut98.push_back(lut98idx0);
    auto fvec98 = [flut98](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut98[i](I));
        return ret;
    };

    std::cerr << "\rLUT98   ";
    long gin98_clear = 1 * ct_y5_clear + 2 * ct_x8_clear;
    std::vector<long> gout98_clear = fvec98(gin98_clear);

    std::vector<RotationPoly> lut99;
    std::vector<long (*)(long)> flut99;
    auto lut99idx0 = [](long I) -> long {
        /* GATE 426 (LUT2 _1882_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut99.push_back(ctx.genrate_lut(lut99idx0));
    flut99.push_back(lut99idx0);
    auto fvec99 = [flut99](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut99[i](I));
        return ret;
    };

    std::cerr << "\rLUT99   ";
    long gin99_clear = 1 * ct_y7_clear + 2 * ct_x7_clear;
    std::vector<long> gout99_clear = fvec99(gin99_clear);

    std::vector<RotationPoly> lut100;
    std::vector<long (*)(long)> flut100;
    auto lut100idx0 = [](long I) -> long {
        /* GATE 61 (LUT2 _1517_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut100.push_back(ctx.genrate_lut(lut100idx0));
    flut100.push_back(lut100idx0);
    auto fvec100 = [flut100](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut100[i](I));
        return ret;
    };

    std::cerr << "\rLUT100   ";
    long gin100_clear = 1 * ct_y3_clear + 2 * ct_x1_clear;
    std::vector<long> gout100_clear = fvec100(gin100_clear);

    std::vector<RotationPoly> lut101;
    std::vector<long (*)(long)> flut101;
    auto lut101idx0 = [](long I) -> long {
        /* GATE 76 (LUT3 _1532_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut101.push_back(ctx.genrate_lut(lut101idx0));
    flut101.push_back(lut101idx0);
    auto lut101idx1 = [](long I) -> long {
        /* GATE 100 (LUT3 _1556_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut101.push_back(ctx.genrate_lut(lut101idx1));
    flut101.push_back(lut101idx1);
    auto fvec101 = [flut101](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut101[i](I));
        return ret;
    };

    std::cerr << "\rLUT101   ";
    long gin101_clear = 1 * gout63_clear[0] + 2 * gout12_clear[0] + 4 * gout23_clear[0];
    std::vector<long> gout101_clear = fvec101(gin101_clear);

    std::vector<RotationPoly> lut102;
    std::vector<long (*)(long)> flut102;
    auto lut102idx0 = [](long I) -> long {
        /* GATE 369 (LUT2 _1825_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut102.push_back(ctx.genrate_lut(lut102idx0));
    flut102.push_back(lut102idx0);
    auto fvec102 = [flut102](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut102[i](I));
        return ret;
    };

    std::cerr << "\rLUT102   ";
    long gin102_clear = 1 * ct_y1_clear + 2 * ct_x12_clear;
    std::vector<long> gout102_clear = fvec102(gin102_clear);

    std::vector<RotationPoly> lut103;
    std::vector<long (*)(long)> flut103;
    auto lut103idx0 = [](long I) -> long {
        /* GATE 250 (LUT2 _1706_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut103.push_back(ctx.genrate_lut(lut103idx0));
    flut103.push_back(lut103idx0);
    auto fvec103 = [flut103](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut103[i](I));
        return ret;
    };

    std::cerr << "\rLUT103   ";
    long gin103_clear = 1 * ct_y6_clear + 2 * ct_x4_clear;
    std::vector<long> gout103_clear = fvec103(gin103_clear);

    std::vector<RotationPoly> lut104;
    std::vector<long (*)(long)> flut104;
    auto lut104idx0 = [](long I) -> long {
        /* GATE 291 (LUT2 _1747_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut104.push_back(ctx.genrate_lut(lut104idx0));
    flut104.push_back(lut104idx0);
    auto fvec104 = [flut104](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut104[i](I));
        return ret;
    };

    std::cerr << "\rLUT104   ";
    long gin104_clear = 1 * ct_x3_clear + 2 * ct_y8_clear;
    std::vector<long> gout104_clear = fvec104(gin104_clear);

    std::vector<RotationPoly> lut105;
    std::vector<long (*)(long)> flut105;
    auto lut105idx0 = [](long I) -> long {
        /* GATE 425 (LUT3 _1881_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut105.push_back(ctx.genrate_lut(lut105idx0));
    flut105.push_back(lut105idx0);
    auto lut105idx1 = [](long I) -> long {
        /* GATE 472 (LUT3 _1928_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut105.push_back(ctx.genrate_lut(lut105idx1));
    flut105.push_back(lut105idx1);
    auto fvec105 = [flut105](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut105[i](I));
        return ret;
    };

    std::cerr << "\rLUT105   ";
    long gin105_clear = 1 * gout99_clear[0] + 2 * gout5_clear[0] + 4 * gout46_clear[0];
    std::vector<long> gout105_clear = fvec105(gin105_clear);

    std::vector<RotationPoly> lut106;
    std::vector<long (*)(long)> flut106;
    auto lut106idx0 = [](long I) -> long {
        /* GATE 75 (LUT3 _1531_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut106.push_back(ctx.genrate_lut(lut106idx0));
    flut106.push_back(lut106idx0);
    auto lut106idx1 = [](long I) -> long {
        /* GATE 56 (LUT3 _1512_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut106.push_back(ctx.genrate_lut(lut106idx1));
    flut106.push_back(lut106idx1);
    auto fvec106 = [flut106](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut106[i](I));
        return ret;
    };

    std::cerr << "\rLUT106   ";
    long gin106_clear = 1 * gout85_clear[0] + 2 * gout28_clear[0] + 4 * gout11_clear[0];
    std::vector<long> gout106_clear = fvec106(gin106_clear);

    std::vector<RotationPoly> lut107;
    std::vector<long (*)(long)> flut107;
    auto lut107idx0 = [](long I) -> long {
        /* GATE 461 (LUT3 _1917_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut107.push_back(ctx.genrate_lut(lut107idx0));
    flut107.push_back(lut107idx0);
    auto fvec107 = [flut107](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut107[i](I));
        return ret;
    };

    std::cerr << "\rLUT107   ";
    long gin107_clear = 1 * ct_y11_clear + 2 * ct_x4_clear + 4 * gout73_clear[0];
    std::vector<long> gout107_clear = fvec107(gin107_clear);

    std::vector<RotationPoly> lut108;
    std::vector<long (*)(long)> flut108;
    auto lut108idx0 = [](long I) -> long {
        /* GATE 468 (LUT3 _1924_ INIT 0x78 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut108.push_back(ctx.genrate_lut(lut108idx0));
    flut108.push_back(lut108idx0);
    auto fvec108 = [flut108](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut108[i](I));
        return ret;
    };

    std::cerr << "\rLUT108   ";
    long gin108_clear = 1 * gout43_clear[0] + 2 * ct_x8_clear + 4 * ct_y7_clear;
    std::vector<long> gout108_clear = fvec108(gin108_clear);

    std::vector<RotationPoly> lut109;
    std::vector<long (*)(long)> flut109;
    auto lut109idx0 = [](long I) -> long {
        /* GATE 282 (LUT3 _1738_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut109.push_back(ctx.genrate_lut(lut109idx0));
    flut109.push_back(lut109idx0);
    auto lut109idx1 = [](long I) -> long {
        /* GATE 332 (LUT3 _1788_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut109.push_back(ctx.genrate_lut(lut109idx1));
    flut109.push_back(lut109idx1);
    auto fvec109 = [flut109](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut109[i](I));
        return ret;
    };

    std::cerr << "\rLUT109   ";
    long gin109_clear = 1 * gout69_clear[0] + 2 * gout50_clear[0] + 4 * gout91_clear[0];
    std::vector<long> gout109_clear = fvec109(gin109_clear);

    std::vector<RotationPoly> lut110;
    std::vector<long (*)(long)> flut110;
    auto lut110idx0 = [](long I) -> long {
        /* GATE 300 (LUT2 _1756_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut110.push_back(ctx.genrate_lut(lut110idx0));
    flut110.push_back(lut110idx0);
    auto fvec110 = [flut110](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut110[i](I));
        return ret;
    };

    std::cerr << "\rLUT110   ";
    long gin110_clear = 1 * ct_y9_clear + 2 * ct_x2_clear;
    std::vector<long> gout110_clear = fvec110(gin110_clear);

    std::vector<RotationPoly> lut111;
    std::vector<long (*)(long)> flut111;
    auto lut111idx0 = [](long I) -> long {
        /* GATE 424 (LUT3 _1880_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut111.push_back(ctx.genrate_lut(lut111idx0));
    flut111.push_back(lut111idx0);
    auto lut111idx1 = [](long I) -> long {
        /* GATE 372 (LUT3 _1828_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut111.push_back(ctx.genrate_lut(lut111idx1));
    flut111.push_back(lut111idx1);
    auto fvec111 = [flut111](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut111[i](I));
        return ret;
    };

    std::cerr << "\rLUT111   ";
    long gin111_clear = 1 * gout27_clear[0] + 2 * gout98_clear[0] + 4 * gout44_clear[0];
    std::vector<long> gout111_clear = fvec111(gin111_clear);

    std::vector<RotationPoly> lut112;
    std::vector<long (*)(long)> flut112;
    auto lut112idx0 = [](long I) -> long {
        /* GATE 322 (LUT3 _1778_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut112.push_back(ctx.genrate_lut(lut112idx0));
    flut112.push_back(lut112idx0);
    auto lut112idx1 = [](long I) -> long {
        /* GATE 367 (LUT3 _1823_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut112.push_back(ctx.genrate_lut(lut112idx1));
    flut112.push_back(lut112idx1);
    auto fvec112 = [flut112](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut112[i](I));
        return ret;
    };

    std::cerr << "\rLUT112   ";
    long gin112_clear = 1 * gout71_clear[0] + 2 * gout9_clear[0] + 4 * gout15_clear[0];
    std::vector<long> gout112_clear = fvec112(gin112_clear);

    std::vector<RotationPoly> lut113;
    std::vector<long (*)(long)> flut113;
    auto lut113idx0 = [](long I) -> long {
        /* GATE 235 (LUT3 _1691_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut113.push_back(ctx.genrate_lut(lut113idx0));
    flut113.push_back(lut113idx0);
    auto lut113idx1 = [](long I) -> long {
        /* GATE 199 (LUT3 _1655_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut113.push_back(ctx.genrate_lut(lut113idx1));
    flut113.push_back(lut113idx1);
    auto fvec113 = [flut113](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut113[i](I));
        return ret;
    };

    std::cerr << "\rLUT113   ";
    long gin113_clear = 1 * gout14_clear[0] + 2 * gout84_clear[0] + 4 * gout57_clear[0];
    std::vector<long> gout113_clear = fvec113(gin113_clear);

    std::vector<RotationPoly> lut114;
    std::vector<long (*)(long)> flut114;
    auto lut114idx0 = [](long I) -> long {
        /* GATE 444 (LUT2 _1900_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut114.push_back(ctx.genrate_lut(lut114idx0));
    flut114.push_back(lut114idx0);
    auto fvec114 = [flut114](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut114[i](I));
        return ret;
    };

    std::cerr << "\rLUT114   ";
    long gin114_clear = 1 * gout6_clear[0] + 2 * gout19_clear[0];
    std::vector<long> gout114_clear = fvec114(gin114_clear);

    std::vector<RotationPoly> lut115;
    std::vector<long (*)(long)> flut115;
    auto lut115idx0 = [](long I) -> long {
        /* GATE 4 (LUT3 _1460_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut115.push_back(ctx.genrate_lut(lut115idx0));
    flut115.push_back(lut115idx0);
    auto fvec115 = [flut115](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut115[i](I));
        return ret;
    };

    std::cerr << "\rLUT115   ";
    long gin115_clear = 1 * ct_op4_clear + 2 * ct_op5_clear + 4 * gout61_clear[0];
    std::vector<long> gout115_clear = fvec115(gin115_clear);

    std::vector<RotationPoly> lut116;
    std::vector<long (*)(long)> flut116;
    auto lut116idx0 = [](long I) -> long {
        /* GATE 334 (LUT2 _1790_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut116.push_back(ctx.genrate_lut(lut116idx0));
    flut116.push_back(lut116idx0);
    auto fvec116 = [flut116](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut116[i](I));
        return ret;
    };

    std::cerr << "\rLUT116   ";
    long gin116_clear = 1 * ct_y7_clear + 2 * ct_x5_clear;
    std::vector<long> gout116_clear = fvec116(gin116_clear);

    std::vector<RotationPoly> lut117;
    std::vector<long (*)(long)> flut117;
    auto lut117idx0 = [](long I) -> long {
        /* GATE 239 (LUT2 _1695_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut117.push_back(ctx.genrate_lut(lut117idx0));
    flut117.push_back(lut117idx0);
    auto fvec117 = [flut117](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut117[i](I));
        return ret;
    };

    std::cerr << "\rLUT117   ";
    long gin117_clear = 1 * ct_x10_clear + 2 * ct_y0_clear;
    std::vector<long> gout117_clear = fvec117(gin117_clear);

    std::vector<RotationPoly> lut118;
    std::vector<long (*)(long)> flut118;
    auto lut118idx0 = [](long I) -> long {
        /* GATE 460 (LUT2 _1916_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut118.push_back(ctx.genrate_lut(lut118idx0));
    flut118.push_back(lut118idx0);
    auto fvec118 = [flut118](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut118[i](I));
        return ret;
    };

    std::cerr << "\rLUT118   ";
    long gin118_clear = 1 * ct_y9_clear + 2 * ct_x6_clear;
    std::vector<long> gout118_clear = fvec118(gin118_clear);

    std::vector<RotationPoly> lut119;
    std::vector<long (*)(long)> flut119;
    auto lut119idx0 = [](long I) -> long {
        /* GATE 321 (LUT3 _1777_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut119.push_back(ctx.genrate_lut(lut119idx0));
    flut119.push_back(lut119idx0);
    auto lut119idx1 = [](long I) -> long {
        /* GATE 278 (LUT3 _1734_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut119.push_back(ctx.genrate_lut(lut119idx1));
    flut119.push_back(lut119idx1);
    auto fvec119 = [flut119](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut119[i](I));
        return ret;
    };

    std::cerr << "\rLUT119   ";
    long gin119_clear = 1 * gout47_clear[0] + 2 * gout82_clear[0] + 4 * gout88_clear[0];
    std::vector<long> gout119_clear = fvec119(gin119_clear);

    std::vector<RotationPoly> lut120;
    std::vector<long (*)(long)> flut120;
    auto lut120idx0 = [](long I) -> long {
        /* GATE 238 (LUT2 _1694_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut120.push_back(ctx.genrate_lut(lut120idx0));
    flut120.push_back(lut120idx0);
    auto fvec120 = [flut120](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut120[i](I));
        return ret;
    };

    std::cerr << "\rLUT120   ";
    long gin120_clear = 1 * ct_x8_clear + 2 * ct_y2_clear;
    std::vector<long> gout120_clear = fvec120(gin120_clear);

    std::vector<RotationPoly> lut121;
    std::vector<long (*)(long)> flut121;
    auto lut121idx0 = [](long I) -> long {
        /* GATE 43 (LUT2 _1499_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut121.push_back(ctx.genrate_lut(lut121idx0));
    flut121.push_back(lut121idx0);
    auto fvec121 = [flut121](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut121[i](I));
        return ret;
    };

    std::cerr << "\rLUT121   ";
    long gin121_clear = 1 * ct_y3_clear + 2 * ct_x0_clear;
    std::vector<long> gout121_clear = fvec121(gin121_clear);

    std::vector<RotationPoly> lut122;
    std::vector<long (*)(long)> flut122;
    auto lut122idx0 = [](long I) -> long {
        /* GATE 204 (LUT2 _1660_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut122.push_back(ctx.genrate_lut(lut122idx0));
    flut122.push_back(lut122idx0);
    auto fvec122 = [flut122](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut122[i](I));
        return ret;
    };

    std::cerr << "\rLUT122   ";
    long gin122_clear = 1 * ct_y4_clear + 2 * ct_x5_clear;
    std::vector<long> gout122_clear = fvec122(gin122_clear);

    std::vector<RotationPoly> lut123;
    std::vector<long (*)(long)> flut123;
    auto lut123idx0 = [](long I) -> long {
        /* GATE 42 (LUT2 _1498_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut123.push_back(ctx.genrate_lut(lut123idx0));
    flut123.push_back(lut123idx0);
    auto fvec123 = [flut123](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut123[i](I));
        return ret;
    };

    std::cerr << "\rLUT123   ";
    long gin123_clear = 1 * ct_x3_clear + 2 * ct_y0_clear;
    std::vector<long> gout123_clear = fvec123(gin123_clear);

    std::vector<RotationPoly> lut124;
    std::vector<long (*)(long)> flut124;
    auto lut124idx0 = [](long I) -> long {
        /* GATE 389 (LUT2 _1845_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut124.push_back(ctx.genrate_lut(lut124idx0));
    flut124.push_back(lut124idx0);
    auto fvec124 = [flut124](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut124[i](I));
        return ret;
    };

    std::cerr << "\rLUT124   ";
    long gin124_clear = 1 * ct_x3_clear + 2 * ct_y10_clear;
    std::vector<long> gout124_clear = fvec124(gin124_clear);

    std::vector<RotationPoly> lut125;
    std::vector<long (*)(long)> flut125;
    auto lut125idx0 = [](long I) -> long {
        /* GATE 82 (LUT2 _1538_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut125.push_back(ctx.genrate_lut(lut125idx0));
    flut125.push_back(lut125idx0);
    auto fvec125 = [flut125](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut125[i](I));
        return ret;
    };

    std::cerr << "\rLUT125   ";
    long gin125_clear = 1 * ct_y5_clear + 2 * ct_x0_clear;
    std::vector<long> gout125_clear = fvec125(gin125_clear);

    std::vector<RotationPoly> lut126;
    std::vector<long (*)(long)> flut126;
    auto lut126idx0 = [](long I) -> long {
        /* GATE 392 (LUT3 _1848_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut126.push_back(ctx.genrate_lut(lut126idx0));
    flut126.push_back(lut126idx0);
    auto fvec126 = [flut126](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut126[i](I));
        return ret;
    };

    std::cerr << "\rLUT126   ";
    long gin126_clear = 1 * gout54_clear[0] + 2 * ct_y13_clear + 4 * ct_x0_clear;
    std::vector<long> gout126_clear = fvec126(gin126_clear);

    std::vector<RotationPoly> lut127;
    std::vector<long (*)(long)> flut127;
    auto lut127idx0 = [](long I) -> long {
        /* GATE 388 (LUT3 _1844_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut127.push_back(ctx.genrate_lut(lut127idx0));
    flut127.push_back(lut127idx0);
    auto lut127idx1 = [](long I) -> long {
        /* GATE 433 (LUT3 _1889_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut127.push_back(ctx.genrate_lut(lut127idx1));
    flut127.push_back(lut127idx1);
    auto fvec127 = [flut127](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut127[i](I));
        return ret;
    };

    std::cerr << "\rLUT127   ";
    long gin127_clear = 1 * gout124_clear[0] + 2 * gout22_clear[0] + 4 * gout76_clear[0];
    std::vector<long> gout127_clear = fvec127(gin127_clear);

    std::vector<RotationPoly> lut128;
    std::vector<long (*)(long)> flut128;
    auto lut128idx0 = [](long I) -> long {
        /* GATE 102 (LUT2 _1558_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut128.push_back(ctx.genrate_lut(lut128idx0));
    flut128.push_back(lut128idx0);
    auto fvec128 = [flut128](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut128[i](I));
        return ret;
    };

    std::cerr << "\rLUT128   ";
    long gin128_clear = 1 * ct_y1_clear + 2 * ct_x5_clear;
    std::vector<long> gout128_clear = fvec128(gin128_clear);

    std::vector<RotationPoly> lut129;
    std::vector<long (*)(long)> flut129;
    auto lut129idx0 = [](long I) -> long {
        /* GATE 243 (LUT2 _1699_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut129.push_back(ctx.genrate_lut(lut129idx0));
    flut129.push_back(lut129idx0);
    auto fvec129 = [flut129](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut129[i](I));
        return ret;
    };

    std::cerr << "\rLUT129   ";
    long gin129_clear = 1 * ct_y3_clear + 2 * ct_x7_clear;
    std::vector<long> gout129_clear = fvec129(gin129_clear);

    std::vector<RotationPoly> lut130;
    std::vector<long (*)(long)> flut130;
    auto lut130idx0 = [](long I) -> long {
        /* GATE 387 (LUT3 _1843_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut130.push_back(ctx.genrate_lut(lut130idx0));
    flut130.push_back(lut130idx0);
    auto lut130idx1 = [](long I) -> long {
        /* GATE 342 (LUT3 _1798_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut130.push_back(ctx.genrate_lut(lut130idx1));
    flut130.push_back(lut130idx1);
    auto fvec130 = [flut130](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut130[i](I));
        return ret;
    };

    std::cerr << "\rLUT130   ";
    long gin130_clear = 1 * gout90_clear[0] + 2 * gout33_clear[0] + 4 * gout68_clear[0];
    std::vector<long> gout130_clear = fvec130(gin130_clear);

    std::vector<RotationPoly> lut131;
    std::vector<long (*)(long)> flut131;
    auto lut131idx0 = [](long I) -> long {
        /* GATE 464 (LUT3 _1920_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut131.push_back(ctx.genrate_lut(lut131idx0));
    flut131.push_back(lut131idx0);
    auto fvec131 = [flut131](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut131[i](I));
        return ret;
    };

    std::cerr << "\rLUT131   ";
    long gin131_clear = 1 * ct_y13_clear + 2 * ct_x2_clear + 4 * gout78_clear[0];
    std::vector<long> gout131_clear = fvec131(gin131_clear);

    std::vector<RotationPoly> lut132;
    std::vector<long (*)(long)> flut132;
    auto lut132idx0 = [](long I) -> long {
        /* GATE 420 (LUT2 _1876_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut132.push_back(ctx.genrate_lut(lut132idx0));
    flut132.push_back(lut132idx0);
    auto fvec132 = [flut132](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut132[i](I));
        return ret;
    };

    std::cerr << "\rLUT132   ";
    long gin132_clear = 1 * ct_x9_clear + 2 * ct_y5_clear;
    std::vector<long> gout132_clear = fvec132(gin132_clear);

    std::vector<RotationPoly> lut133;
    std::vector<long (*)(long)> flut133;
    auto lut133idx0 = [](long I) -> long {
        /* GATE 206 (LUT2 _1662_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut133.push_back(ctx.genrate_lut(lut133idx0));
    flut133.push_back(lut133idx0);
    auto fvec133 = [flut133](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut133[i](I));
        return ret;
    };

    std::cerr << "\rLUT133   ";
    long gin133_clear = 1 * ct_y3_clear + 2 * ct_x6_clear;
    std::vector<long> gout133_clear = fvec133(gin133_clear);

    std::vector<RotationPoly> lut134;
    std::vector<long (*)(long)> flut134;
    auto lut134idx0 = [](long I) -> long {
        /* GATE 441 (LUT2 _1897_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut134.push_back(ctx.genrate_lut(lut134idx0));
    flut134.push_back(lut134idx0);
    auto fvec134 = [flut134](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut134[i](I));
        return ret;
    };

    std::cerr << "\rLUT134   ";
    long gin134_clear = 1 * ct_y12_clear + 2 * ct_x2_clear;
    std::vector<long> gout134_clear = fvec134(gin134_clear);

    std::vector<RotationPoly> lut135;
    std::vector<long (*)(long)> flut135;
    auto lut135idx0 = [](long I) -> long {
        /* GATE 381 (LUT2 _1837_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut135.push_back(ctx.genrate_lut(lut135idx0));
    flut135.push_back(lut135idx0);
    auto fvec135 = [flut135](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut135[i](I));
        return ret;
    };

    std::cerr << "\rLUT135   ";
    long gin135_clear = 1 * ct_y8_clear + 2 * ct_x5_clear;
    std::vector<long> gout135_clear = fvec135(gin135_clear);

    std::vector<RotationPoly> lut136;
    std::vector<long (*)(long)> flut136;
    auto lut136idx0 = [](long I) -> long {
        /* GATE 298 (LUT2 _1754_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut136.push_back(ctx.genrate_lut(lut136idx0));
    flut136.push_back(lut136idx0);
    auto fvec136 = [flut136](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut136[i](I));
        return ret;
    };

    std::cerr << "\rLUT136   ";
    long gin136_clear = 1 * ct_y10_clear + 2 * ct_x1_clear;
    std::vector<long> gout136_clear = fvec136(gin136_clear);

    std::vector<RotationPoly> lut137;
    std::vector<long (*)(long)> flut137;
    auto lut137idx0 = [](long I) -> long {
        /* GATE 60 (LUT3 _1516_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut137.push_back(ctx.genrate_lut(lut137idx0));
    flut137.push_back(lut137idx0);
    auto fvec137 = [flut137](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut137[i](I));
        return ret;
    };

    std::cerr << "\rLUT137   ";
    long gin137_clear = 1 * gout100_clear[0] + 2 * ct_y4_clear + 4 * ct_x0_clear;
    std::vector<long> gout137_clear = fvec137(gin137_clear);

    std::vector<RotationPoly> lut138;
    std::vector<long (*)(long)> flut138;
    auto lut138idx0 = [](long I) -> long {
        /* GATE 55 (LUT3 _1511_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut138.push_back(ctx.genrate_lut(lut138idx0));
    flut138.push_back(lut138idx0);
    auto lut138idx1 = [](long I) -> long {
        /* GATE 39 (LUT3 _1495_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut138.push_back(ctx.genrate_lut(lut138idx1));
    flut138.push_back(lut138idx1);
    auto fvec138 = [flut138](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut138[i](I));
        return ret;
    };

    std::cerr << "\rLUT138   ";
    long gin138_clear = 1 * gout62_clear[0] + 2 * gout2_clear[0] + 4 * gout123_clear[0];
    std::vector<long> gout138_clear = fvec138(gin138_clear);

    std::vector<RotationPoly> lut139;
    std::vector<long (*)(long)> flut139;
    auto lut139idx0 = [](long I) -> long {
        /* GATE 290 (LUT2 _1746_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut139.push_back(ctx.genrate_lut(lut139idx0));
    flut139.push_back(lut139idx0);
    auto fvec139 = [flut139](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut139[i](I));
        return ret;
    };

    std::cerr << "\rLUT139   ";
    long gin139_clear = 1 * ct_y7_clear + 2 * ct_x4_clear;
    std::vector<long> gout139_clear = fvec139(gin139_clear);

    std::vector<RotationPoly> lut140;
    std::vector<long (*)(long)> flut140;
    auto lut140idx0 = [](long I) -> long {
        /* GATE 248 (LUT2 _1704_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut140.push_back(ctx.genrate_lut(lut140idx0));
    flut140.push_back(lut140idx0);
    auto fvec140 = [flut140](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut140[i](I));
        return ret;
    };

    std::cerr << "\rLUT140   ";
    long gin140_clear = 1 * ct_y7_clear + 2 * ct_x3_clear;
    std::vector<long> gout140_clear = fvec140(gin140_clear);

    std::vector<RotationPoly> lut141;
    std::vector<long (*)(long)> flut141;
    auto lut141idx0 = [](long I) -> long {
        /* GATE 327 (LUT2 _1783_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut141.push_back(ctx.genrate_lut(lut141idx0));
    flut141.push_back(lut141idx0);
    auto fvec141 = [flut141](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut141[i](I));
        return ret;
    };

    std::cerr << "\rLUT141   ";
    long gin141_clear = 1 * ct_x8_clear + 2 * ct_y4_clear;
    std::vector<long> gout141_clear = fvec141(gin141_clear);

    std::vector<RotationPoly> lut142;
    std::vector<long (*)(long)> flut142;
    auto lut142idx0 = [](long I) -> long {
        /* GATE 336 (LUT2 _1792_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut142.push_back(ctx.genrate_lut(lut142idx0));
    flut142.push_back(lut142idx0);
    auto fvec142 = [flut142](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut142[i](I));
        return ret;
    };

    std::cerr << "\rLUT142   ";
    long gin142_clear = 1 * ct_y6_clear + 2 * ct_x6_clear;
    std::vector<long> gout142_clear = fvec142(gin142_clear);

    std::vector<RotationPoly> lut143;
    std::vector<long (*)(long)> flut143;
    auto lut143idx0 = [](long I) -> long {
        /* GATE 140 (LUT2 _1596_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut143.push_back(ctx.genrate_lut(lut143idx0));
    flut143.push_back(lut143idx0);
    auto fvec143 = [flut143](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut143[i](I));
        return ret;
    };

    std::cerr << "\rLUT143   ";
    long gin143_clear = 1 * ct_y6_clear + 2 * ct_x1_clear;
    std::vector<long> gout143_clear = fvec143(gin143_clear);

    std::vector<RotationPoly> lut144;
    std::vector<long (*)(long)> flut144;
    auto lut144idx0 = [](long I) -> long {
        /* GATE 132 (LUT2 _1588_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut144.push_back(ctx.genrate_lut(lut144idx0));
    flut144.push_back(lut144idx0);
    auto fvec144 = [flut144](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut144[i](I));
        return ret;
    };

    std::cerr << "\rLUT144   ";
    long gin144_clear = 1 * ct_y0_clear + 2 * ct_x7_clear;
    std::vector<long> gout144_clear = fvec144(gin144_clear);

    std::vector<RotationPoly> lut145;
    std::vector<long (*)(long)> flut145;
    auto lut145idx0 = [](long I) -> long {
        /* GATE 297 (LUT3 _1753_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut145.push_back(ctx.genrate_lut(lut145idx0));
    flut145.push_back(lut145idx0);
    auto lut145idx1 = [](long I) -> long {
        /* GATE 341 (LUT3 _1797_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut145.push_back(ctx.genrate_lut(lut145idx1));
    flut145.push_back(lut145idx1);
    auto fvec145 = [flut145](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut145[i](I));
        return ret;
    };

    std::cerr << "\rLUT145   ";
    long gin145_clear = 1 * gout136_clear[0] + 2 * gout30_clear[0] + 4 * gout110_clear[0];
    std::vector<long> gout145_clear = fvec145(gin145_clear);

    std::vector<RotationPoly> lut146;
    std::vector<long (*)(long)> flut146;
    auto lut146idx0 = [](long I) -> long {
        /* GATE 163 (LUT2 _1619_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut146.push_back(ctx.genrate_lut(lut146idx0));
    flut146.push_back(lut146idx0);
    auto fvec146 = [flut146](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut146[i](I));
        return ret;
    };

    std::cerr << "\rLUT146   ";
    long gin146_clear = 1 * ct_y2_clear + 2 * ct_x6_clear;
    std::vector<long> gout146_clear = fvec146(gin146_clear);

    std::vector<RotationPoly> lut147;
    std::vector<long (*)(long)> flut147;
    auto lut147idx0 = [](long I) -> long {
        /* GATE 138 (LUT3 _1594_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut147.push_back(ctx.genrate_lut(lut147idx0));
    flut147.push_back(lut147idx0);
    auto lut147idx1 = [](long I) -> long {
        /* GATE 105 (LUT3 _1561_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut147.push_back(ctx.genrate_lut(lut147idx1));
    flut147.push_back(lut147idx1);
    auto fvec147 = [flut147](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut147[i](I));
        return ret;
    };

    std::cerr << "\rLUT147   ";
    long gin147_clear = 1 * gout24_clear[0] + 2 * gout52_clear[0] + 4 * gout93_clear[0];
    std::vector<long> gout147_clear = fvec147(gin147_clear);

    std::vector<RotationPoly> lut148;
    std::vector<long (*)(long)> flut148;
    auto lut148idx0 = [](long I) -> long {
        /* GATE 288 (LUT3 _1744_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut148.push_back(ctx.genrate_lut(lut148idx0));
    flut148.push_back(lut148idx0);
    auto lut148idx1 = [](long I) -> long {
        /* GATE 240 (LUT3 _1696_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut148.push_back(ctx.genrate_lut(lut148idx1));
    flut148.push_back(lut148idx1);
    auto fvec148 = [flut148](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut148[i](I));
        return ret;
    };

    std::cerr << "\rLUT148   ";
    long gin148_clear = 1 * gout29_clear[0] + 2 * gout13_clear[0] + 4 * gout129_clear[0];
    std::vector<long> gout148_clear = fvec148(gin148_clear);

    std::vector<RotationPoly> lut149;
    std::vector<long (*)(long)> flut149;
    auto lut149idx0 = [](long I) -> long {
        /* GATE 368 (LUT3 _1824_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut149.push_back(ctx.genrate_lut(lut149idx0));
    flut149.push_back(lut149idx0);
    auto lut149idx1 = [](long I) -> long {
        /* GATE 413 (LUT3 _1869_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut149.push_back(ctx.genrate_lut(lut149idx1));
    flut149.push_back(lut149idx1);
    auto fvec149 = [flut149](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut149[i](I));
        return ret;
    };

    std::cerr << "\rLUT149   ";
    long gin149_clear = 1 * gout102_clear[0] + 2 * gout7_clear[0] + 4 * gout41_clear[0];
    std::vector<long> gout149_clear = fvec149(gin149_clear);

    std::vector<RotationPoly> lut150;
    std::vector<long (*)(long)> flut150;
    auto lut150idx0 = [](long I) -> long {
        /* GATE 253 (LUT3 _1709_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut150.push_back(ctx.genrate_lut(lut150idx0));
    flut150.push_back(lut150idx0);
    auto lut150idx1 = [](long I) -> long {
        /* GATE 296 (LUT3 _1752_ INIT 0x80 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut150.push_back(ctx.genrate_lut(lut150idx1));
    flut150.push_back(lut150idx1);
    auto fvec150 = [flut150](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut150[i](I));
        return ret;
    };

    std::cerr << "\rLUT150   ";
    long gin150_clear = 1 * gout36_clear[0] + 2 * ct_y10_clear + 4 * ct_x0_clear;
    std::vector<long> gout150_clear = fvec150(gin150_clear);

    std::vector<RotationPoly> lut151;
    std::vector<long (*)(long)> flut151;
    auto lut151idx0 = [](long I) -> long {
        /* GATE 110 (LUT3 _1566_ INIT 0x17 PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut151.push_back(ctx.genrate_lut(lut151idx0));
    flut151.push_back(lut151idx0);
    auto lut151idx1 = [](long I) -> long {
        /* GATE 80 (LUT3 _1536_ INIT 0x96 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut151.push_back(ctx.genrate_lut(lut151idx1));
    flut151.push_back(lut151idx1);
    auto fvec151 = [flut151](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut151[i](I));
        return ret;
    };

    std::cerr << "\rLUT151   ";
    long gin151_clear = 1 * gout125_clear[0] + 2 * gout56_clear[0] + 4 * gout37_clear[0];
    std::vector<long> gout151_clear = fvec151(gin151_clear);

    std::vector<RotationPoly> lut152;
    std::vector<long (*)(long)> flut152;
    auto lut152idx0 = [](long I) -> long {
        /* GATE 209 (LUT3 _1665_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut152.push_back(ctx.genrate_lut(lut152idx0));
    flut152.push_back(lut152idx0);
    auto lut152idx1 = [](long I) -> long {
        /* GATE 165 (LUT3 _1621_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut152.push_back(ctx.genrate_lut(lut152idx1));
    flut152.push_back(lut152idx1);
    auto fvec152 = [flut152](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut152[i](I));
        return ret;
    };

    std::cerr << "\rLUT152   ";
    long gin152_clear = 1 * gout96_clear[0] + 2 * gout32_clear[0] + 4 * gout67_clear[0];
    std::vector<long> gout152_clear = fvec152(gin152_clear);

    std::vector<RotationPoly> lut153;
    std::vector<long (*)(long)> flut153;
    auto lut153idx0 = [](long I) -> long {
        /* GATE 287 (LUT3 _1743_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut153.push_back(ctx.genrate_lut(lut153idx0));
    flut153.push_back(lut153idx0);
    auto lut153idx1 = [](long I) -> long {
        /* GATE 247 (LUT3 _1703_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut153.push_back(ctx.genrate_lut(lut153idx1));
    flut153.push_back(lut153idx1);
    auto fvec153 = [flut153](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut153[i](I));
        return ret;
    };

    std::cerr << "\rLUT153   ";
    long gin153_clear = 1 * gout140_clear[0] + 2 * gout34_clear[0] + 4 * gout103_clear[0];
    std::vector<long> gout153_clear = fvec153(gin153_clear);

    std::vector<RotationPoly> lut154;
    std::vector<long (*)(long)> flut154;
    auto lut154idx0 = [](long I) -> long {
        /* GATE 245 (LUT3 _1701_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut154.push_back(ctx.genrate_lut(lut154idx0));
    flut154.push_back(lut154idx0);
    auto lut154idx1 = [](long I) -> long {
        /* GATE 210 (LUT3 _1666_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut154.push_back(ctx.genrate_lut(lut154idx1));
    flut154.push_back(lut154idx1);
    auto fvec154 = [flut154](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut154[i](I));
        return ret;
    };

    std::cerr << "\rLUT154   ";
    long gin154_clear = 1 * gout39_clear[0] + 2 * gout75_clear[0] + 4 * gout4_clear[0];
    std::vector<long> gout154_clear = fvec154(gin154_clear);

    std::vector<RotationPoly> lut155;
    std::vector<long (*)(long)> flut155;
    auto lut155idx0 = [](long I) -> long {
        /* GATE 208 (LUT3 _1664_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut155.push_back(ctx.genrate_lut(lut155idx0));
    flut155.push_back(lut155idx0);
    auto lut155idx1 = [](long I) -> long {
        /* GATE 172 (LUT3 _1628_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut155.push_back(ctx.genrate_lut(lut155idx1));
    flut155.push_back(lut155idx1);
    auto fvec155 = [flut155](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut155[i](I));
        return ret;
    };

    std::cerr << "\rLUT155   ";
    long gin155_clear = 1 * gout17_clear[0] + 2 * gout45_clear[0] + 4 * gout81_clear[0];
    std::vector<long> gout155_clear = fvec155(gin155_clear);

    std::vector<RotationPoly> lut156;
    std::vector<long (*)(long)> flut156;
    auto lut156idx0 = [](long I) -> long {
        /* GATE 333 (LUT3 _1789_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut156.push_back(ctx.genrate_lut(lut156idx0));
    flut156.push_back(lut156idx0);
    auto lut156idx1 = [](long I) -> long {
        /* GATE 377 (LUT3 _1833_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut156.push_back(ctx.genrate_lut(lut156idx1));
    flut156.push_back(lut156idx1);
    auto fvec156 = [flut156](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut156[i](I));
        return ret;
    };

    std::cerr << "\rLUT156   ";
    long gin156_clear = 1 * gout116_clear[0] + 2 * gout18_clear[0] + 4 * gout142_clear[0];
    std::vector<long> gout156_clear = fvec156(gin156_clear);

    std::vector<RotationPoly> lut157;
    std::vector<long (*)(long)> flut157;
    auto lut157idx0 = [](long I) -> long {
        /* GATE 67 (LUT3 _1523_ INIT 0x10 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut157.push_back(ctx.genrate_lut(lut157idx0));
    flut157.push_back(lut157idx0);
    auto fvec157 = [flut157](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut157[i](I));
        return ret;
    };

    std::cerr << "\rLUT157   ";
    long gin157_clear = 1 * gout20_clear[0] + 2 * ct_y3_clear + 4 * ct_y4_clear;
    std::vector<long> gout157_clear = fvec157(gin157_clear);

    std::vector<RotationPoly> lut158;
    std::vector<long (*)(long)> flut158;
    auto lut158idx0 = [](long I) -> long {
        /* GATE 203 (LUT3 _1659_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut158.push_back(ctx.genrate_lut(lut158idx0));
    flut158.push_back(lut158idx0);
    auto lut158idx1 = [](long I) -> long {
        /* GATE 246 (LUT3 _1702_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut158.push_back(ctx.genrate_lut(lut158idx1));
    flut158.push_back(lut158idx1);
    auto fvec158 = [flut158](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut158[i](I));
        return ret;
    };

    std::cerr << "\rLUT158   ";
    long gin158_clear = 1 * gout122_clear[0] + 2 * gout53_clear[0] + 4 * gout133_clear[0];
    std::vector<long> gout158_clear = fvec158(gin158_clear);

    std::vector<RotationPoly> lut159;
    std::vector<long (*)(long)> flut159;
    auto lut159idx0 = [](long I) -> long {
        /* GATE 128 (LUT3 _1584_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut159.push_back(ctx.genrate_lut(lut159idx0));
    flut159.push_back(lut159idx0);
    auto lut159idx1 = [](long I) -> long {
        /* GATE 101 (LUT3 _1557_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut159.push_back(ctx.genrate_lut(lut159idx1));
    flut159.push_back(lut159idx1);
    auto fvec159 = [flut159](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut159[i](I));
        return ret;
    };

    std::cerr << "\rLUT159   ";
    long gin159_clear = 1 * gout128_clear[0] + 2 * gout92_clear[0] + 4 * gout97_clear[0];
    std::vector<long> gout159_clear = fvec159(gin159_clear);

    std::vector<RotationPoly> lut160;
    std::vector<long (*)(long)> flut160;
    auto lut160idx0 = [](long I) -> long {
        /* GATE 430 (LUT3 _1886_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut160.push_back(ctx.genrate_lut(lut160idx0));
    flut160.push_back(lut160idx0);
    auto lut160idx1 = [](long I) -> long {
        /* GATE 386 (LUT3 _1842_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut160.push_back(ctx.genrate_lut(lut160idx1));
    flut160.push_back(lut160idx1);
    auto fvec160 = [flut160](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut160[i](I));
        return ret;
    };

    std::cerr << "\rLUT160   ";
    long gin160_clear = 1 * gout130_clear[0] + 2 * gout127_clear[0] + 4 * gout126_clear[0];
    std::vector<long> gout160_clear = fvec160(gin160_clear);

    std::vector<RotationPoly> lut161;
    std::vector<long (*)(long)> flut161;
    auto lut161idx0 = [](long I) -> long {
        /* GATE 289 (LUT3 _1745_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut161.push_back(ctx.genrate_lut(lut161idx0));
    flut161.push_back(lut161idx0);
    auto lut161idx1 = [](long I) -> long {
        /* GATE 331 (LUT3 _1787_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut161.push_back(ctx.genrate_lut(lut161idx1));
    flut161.push_back(lut161idx1);
    auto fvec161 = [flut161](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut161[i](I));
        return ret;
    };

    std::cerr << "\rLUT161   ";
    long gin161_clear = 1 * gout139_clear[0] + 2 * gout104_clear[0] + 4 * gout8_clear[0];
    std::vector<long> gout161_clear = fvec161(gin161_clear);

    std::vector<RotationPoly> lut162;
    std::vector<long (*)(long)> flut162;
    auto lut162idx0 = [](long I) -> long {
        /* GATE 326 (LUT3 _1782_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut162.push_back(ctx.genrate_lut(lut162idx0));
    flut162.push_back(lut162idx0);
    auto lut162idx1 = [](long I) -> long {
        /* GATE 378 (LUT3 _1834_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut162.push_back(ctx.genrate_lut(lut162idx1));
    flut162.push_back(lut162idx1);
    auto fvec162 = [flut162](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut162[i](I));
        return ret;
    };

    std::cerr << "\rLUT162   ";
    long gin162_clear = 1 * gout141_clear[0] + 2 * gout35_clear[0] + 4 * gout72_clear[0];
    std::vector<long> gout162_clear = fvec162(gin162_clear);

    std::vector<RotationPoly> lut163;
    std::vector<long (*)(long)> flut163;
    auto lut163idx0 = [](long I) -> long {
        /* GATE 129 (LUT3 _1585_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut163.push_back(ctx.genrate_lut(lut163idx0));
    flut163.push_back(lut163idx0);
    auto lut163idx1 = [](long I) -> long {
        /* GATE 160 (LUT3 _1616_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut163.push_back(ctx.genrate_lut(lut163idx1));
    flut163.push_back(lut163idx1);
    auto fvec163 = [flut163](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut163[i](I));
        return ret;
    };

    std::cerr << "\rLUT163   ";
    long gin163_clear = 1 * gout77_clear[0] + 2 * gout25_clear[0] + 4 * gout144_clear[0];
    std::vector<long> gout163_clear = fvec163(gin163_clear);

    std::vector<RotationPoly> lut164;
    std::vector<long (*)(long)> flut164;
    auto lut164idx0 = [](long I) -> long {
        /* GATE 54 (LUT3 _1510_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut164.push_back(ctx.genrate_lut(lut164idx0));
    flut164.push_back(lut164idx0);
    auto lut164idx1 = [](long I) -> long {
        /* GATE 73 (LUT3 _1529_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut164.push_back(ctx.genrate_lut(lut164idx1));
    flut164.push_back(lut164idx1);
    auto fvec164 = [flut164](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut164[i](I));
        return ret;
    };

    std::cerr << "\rLUT164   ";
    long gin164_clear = 1 * gout138_clear[0] + 2 * gout106_clear[1] + 4 * gout137_clear[0];
    std::vector<long> gout164_clear = fvec164(gin164_clear);

    std::vector<RotationPoly> lut165;
    std::vector<long (*)(long)> flut165;
    auto lut165idx0 = [](long I) -> long {
        /* GATE 384 (LUT3 _1840_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut165.push_back(ctx.genrate_lut(lut165idx0));
    flut165.push_back(lut165idx0);
    auto lut165idx1 = [](long I) -> long {
        /* GATE 340 (LUT3 _1796_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut165.push_back(ctx.genrate_lut(lut165idx1));
    flut165.push_back(lut165idx1);
    auto fvec165 = [flut165](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut165[i](I));
        return ret;
    };

    std::cerr << "\rLUT165   ";
    long gin165_clear = 1 * gout145_clear[1] + 2 * gout130_clear[1] + 4 * gout6_clear[0];
    std::vector<long> gout165_clear = fvec165(gin165_clear);

    std::vector<RotationPoly> lut166;
    std::vector<long (*)(long)> flut166;
    auto lut166idx0 = [](long I) -> long {
        /* GATE 478 (LUT3 _1934_ INIT 0x4b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut166.push_back(ctx.genrate_lut(lut166idx0));
    flut166.push_back(lut166idx0);
    auto fvec166 = [flut166](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut166[i](I));
        return ret;
    };

    std::cerr << "\rLUT166   ";
    long gin166_clear = 1 * ct_x0_clear + 2 * ct_y15_clear + 4 * gout64_clear[0];
    std::vector<long> gout166_clear = fvec166(gin166_clear);

    std::vector<RotationPoly> lut167;
    std::vector<long (*)(long)> flut167;
    auto lut167idx0 = [](long I) -> long {
        /* GATE 15 (LUT3 _1471_ INIT 0x78 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut167.push_back(ctx.genrate_lut(lut167idx0));
    flut167.push_back(lut167idx0);
    auto fvec167 = [flut167](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut167[i](I));
        return ret;
    };

    std::cerr << "\rLUT167   ";
    long gin167_clear = 1 * ct_y1_clear + 2 * gout83_clear[0] + 4 * ct_x0_clear;
    std::vector<long> gout167_clear = fvec167(gin167_clear);

    std::vector<RotationPoly> lut168;
    std::vector<long (*)(long)> flut168;
    auto lut168idx0 = [](long I) -> long {
        /* GATE 339 (LUT3 _1795_ INIT 0xb2 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut168.push_back(ctx.genrate_lut(lut168idx0));
    flut168.push_back(lut168idx0);
    auto lut168idx1 = [](long I) -> long {
        /* GATE 286 (LUT3 _1742_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut168.push_back(ctx.genrate_lut(lut168idx1));
    flut168.push_back(lut168idx1);
    auto fvec168 = [flut168](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut168[i](I));
        return ret;
    };

    std::cerr << "\rLUT168   ";
    long gin168_clear = 1 * gout153_clear[0] + 2 * gout148_clear[0] + 4 * gout161_clear[0];
    std::vector<long> gout168_clear = fvec168(gin168_clear);

    std::vector<RotationPoly> lut169;
    std::vector<long (*)(long)> flut169;
    auto lut169idx0 = [](long I) -> long {
        /* GATE 295 (LUT2 _1751_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut169.push_back(ctx.genrate_lut(lut169idx0));
    flut169.push_back(lut169idx0);
    auto lut169idx1 = [](long I) -> long {
        /* GATE 338 (LUT2 _1794_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut169.push_back(ctx.genrate_lut(lut169idx1));
    flut169.push_back(lut169idx1);
    auto fvec169 = [flut169](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut169[i](I));
        return ret;
    };

    std::cerr << "\rLUT169   ";
    long gin169_clear = 1 * gout150_clear[1] + 2 * gout145_clear[0];
    std::vector<long> gout169_clear = fvec169(gin169_clear);

    std::vector<RotationPoly> lut170;
    std::vector<long (*)(long)> flut170;
    auto lut170idx0 = [](long I) -> long {
        /* GATE 487 (LUT3 _1943_ INIT 0x87 PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut170.push_back(ctx.genrate_lut(lut170idx0));
    flut170.push_back(lut170idx0);
    auto fvec170 = [flut170](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut170[i](I));
        return ret;
    };

    std::cerr << "\rLUT170   ";
    long gin170_clear = 1 * ct_x15_clear + 2 * gout70_clear[0] + 4 * ct_y0_clear;
    std::vector<long> gout170_clear = fvec170(gin170_clear);

    std::vector<RotationPoly> lut171;
    std::vector<long (*)(long)> flut171;
    auto lut171idx0 = [](long I) -> long {
        /* GATE 244 (LUT3 _1700_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut171.push_back(ctx.genrate_lut(lut171idx0));
    flut171.push_back(lut171idx0);
    auto lut171idx1 = [](long I) -> long {
        /* GATE 294 (LUT3 _1750_ INIT 0xb2 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut171.push_back(ctx.genrate_lut(lut171idx1));
    flut171.push_back(lut171idx1);
    auto fvec171 = [flut171](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut171[i](I));
        return ret;
    };

    std::cerr << "\rLUT171   ";
    long gin171_clear = 1 * gout154_clear[0] + 2 * gout158_clear[1] + 4 * gout153_clear[1];
    std::vector<long> gout171_clear = fvec171(gin171_clear);

    std::vector<RotationPoly> lut172;
    std::vector<long (*)(long)> flut172;
    auto lut172idx0 = [](long I) -> long {
        /* GATE 36 (LUT2 _1492_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut172.push_back(ctx.genrate_lut(lut172idx0));
    flut172.push_back(lut172idx0);
    auto lut172idx1 = [](long I) -> long {
        /* GATE 23 (LUT2 _1479_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut172.push_back(ctx.genrate_lut(lut172idx1));
    flut172.push_back(lut172idx1);
    auto fvec172 = [flut172](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut172[i](I));
        return ret;
    };

    std::cerr << "\rLUT172   ";
    long gin172_clear = 1 * gout74_clear[0] + 2 * gout86_clear[1];
    std::vector<long> gout172_clear = fvec172(gin172_clear);

    std::vector<RotationPoly> lut173;
    std::vector<long (*)(long)> flut173;
    auto lut173idx0 = [](long I) -> long {
        /* GATE 471 (LUT3 _1927_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut173.push_back(ctx.genrate_lut(lut173idx0));
    flut173.push_back(lut173idx0);
    auto lut173idx1 = [](long I) -> long {
        /* GATE 418 (LUT3 _1874_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut173.push_back(ctx.genrate_lut(lut173idx1));
    flut173.push_back(lut173idx1);
    auto fvec173 = [flut173](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut173[i](I));
        return ret;
    };

    std::cerr << "\rLUT173   ";
    long gin173_clear = 1 * gout79_clear[0] + 2 * gout132_clear[0] + 4 * gout60_clear[0];
    std::vector<long> gout173_clear = fvec173(gin173_clear);

    std::vector<RotationPoly> lut174;
    std::vector<long (*)(long)> flut174;
    auto lut174idx0 = [](long I) -> long {
        /* GATE 438 (LUT3 _1894_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut174.push_back(ctx.genrate_lut(lut174idx0));
    flut174.push_back(lut174idx0);
    auto lut174idx1 = [](long I) -> long {
        /* GATE 480 (LUT3 _1936_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut174.push_back(ctx.genrate_lut(lut174idx1));
    flut174.push_back(lut174idx1);
    auto fvec174 = [flut174](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut174[i](I));
        return ret;
    };

    std::cerr << "\rLUT174   ";
    long gin174_clear = 1 * gout19_clear[0] + 2 * gout55_clear[0] + 4 * gout134_clear[0];
    std::vector<long> gout174_clear = fvec174(gin174_clear);

    std::vector<RotationPoly> lut175;
    std::vector<long (*)(long)> flut175;
    auto lut175idx0 = [](long I) -> long {
        /* GATE 84 (LUT2 _1540_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut175.push_back(ctx.genrate_lut(lut175idx0));
    flut175.push_back(lut175idx0);
    auto fvec175 = [flut175](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut175[i](I));
        return ret;
    };

    std::cerr << "\rLUT175   ";
    long gin175_clear = 1 * gout37_clear[0] + 2 * gout121_clear[0];
    std::vector<long> gout175_clear = fvec175(gin175_clear);

    std::vector<RotationPoly> lut176;
    std::vector<long (*)(long)> flut176;
    auto lut176idx0 = [](long I) -> long {
        /* GATE 277 (LUT3 _1733_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut176.push_back(ctx.genrate_lut(lut176idx0));
    flut176.push_back(lut176idx0);
    auto lut176idx1 = [](long I) -> long {
        /* GATE 236 (LUT3 _1692_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut176.push_back(ctx.genrate_lut(lut176idx1));
    flut176.push_back(lut176idx1);
    auto fvec176 = [flut176](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut176[i](I));
        return ret;
    };

    std::cerr << "\rLUT176   ";
    long gin176_clear = 1 * gout66_clear[0] + 2 * gout120_clear[0] + 4 * gout117_clear[0];
    std::vector<long> gout176_clear = fvec176(gin176_clear);

    std::vector<RotationPoly> lut177;
    std::vector<long (*)(long)> flut177;
    auto lut177idx0 = [](long I) -> long {
        /* GATE 198 (LUT3 _1654_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut177.push_back(ctx.genrate_lut(lut177idx0));
    flut177.push_back(lut177idx0);
    auto lut177idx1 = [](long I) -> long {
        /* GATE 161 (LUT3 _1617_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut177.push_back(ctx.genrate_lut(lut177idx1));
    flut177.push_back(lut177idx1);
    auto fvec177 = [flut177](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut177[i](I));
        return ret;
    };

    std::cerr << "\rLUT177   ";
    long gin177_clear = 1 * gout89_clear[0] + 2 * gout146_clear[0] + 4 * gout65_clear[0];
    std::vector<long> gout177_clear = fvec177(gin177_clear);

    std::vector<RotationPoly> lut178;
    std::vector<long (*)(long)> flut178;
    auto lut178idx0 = [](long I) -> long {
        /* GATE 116 (LUT3 _1572_ INIT 0x10 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut178.push_back(ctx.genrate_lut(lut178idx0));
    flut178.push_back(lut178idx0);
    auto fvec178 = [flut178](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut178[i](I));
        return ret;
    };

    std::cerr << "\rLUT178   ";
    long gin178_clear = 1 * gout157_clear[0] + 2 * ct_y5_clear + 4 * ct_y6_clear;
    std::vector<long> gout178_clear = fvec178(gin178_clear);

    std::vector<RotationPoly> lut179;
    std::vector<long (*)(long)> flut179;
    auto lut179idx0 = [](long I) -> long {
        /* GATE 171 (LUT3 _1627_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut179.push_back(ctx.genrate_lut(lut179idx0));
    flut179.push_back(lut179idx0);
    auto lut179idx1 = [](long I) -> long {
        /* GATE 133 (LUT3 _1589_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut179.push_back(ctx.genrate_lut(lut179idx1));
    flut179.push_back(lut179idx1);
    auto fvec179 = [flut179](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut179[i](I));
        return ret;
    };

    std::cerr << "\rLUT179   ";
    long gin179_clear = 1 * gout49_clear[0] + 2 * gout87_clear[0] + 4 * gout31_clear[0];
    std::vector<long> gout179_clear = fvec179(gin179_clear);

    std::vector<RotationPoly> lut180;
    std::vector<long (*)(long)> flut180;
    auto lut180idx0 = [](long I) -> long {
        /* GATE 170 (LUT3 _1626_ INIT 0x80 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut180.push_back(ctx.genrate_lut(lut180idx0));
    flut180.push_back(lut180idx0);
    auto lut180idx1 = [](long I) -> long {
        /* GATE 139 (LUT3 _1595_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut180.push_back(ctx.genrate_lut(lut180idx1));
    flut180.push_back(lut180idx1);
    auto fvec180 = [flut180](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut180[i](I));
        return ret;
    };

    std::cerr << "\rLUT180   ";
    long gin180_clear = 1 * gout143_clear[0] + 2 * ct_y7_clear + 4 * ct_x0_clear;
    std::vector<long> gout180_clear = fvec180(gin180_clear);

    std::vector<RotationPoly> lut181;
    std::vector<long (*)(long)> flut181;
    auto lut181idx0 = [](long I) -> long {
        /* GATE 3 (LUT3 _1459_ INIT 0x80 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut181.push_back(ctx.genrate_lut(lut181idx0));
    flut181.push_back(lut181idx0);
    auto fvec181 = [flut181](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut181[i](I));
        return ret;
    };

    std::cerr << "\rLUT181   ";
    long gin181_clear = 1 * gout3_clear[1] + 2 * ct_op0_clear + 4 * gout115_clear[0];
    std::vector<long> gout181_clear = fvec181(gin181_clear);

    std::vector<RotationPoly> lut182;
    std::vector<long (*)(long)> flut182;
    auto lut182idx0 = [](long I) -> long {
        /* GATE 169 (LUT3 _1625_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut182.push_back(ctx.genrate_lut(lut182idx0));
    flut182.push_back(lut182idx0);
    auto lut182idx1 = [](long I) -> long {
        /* GATE 215 (LUT3 _1671_ INIT 0x71 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut182.push_back(ctx.genrate_lut(lut182idx1));
    flut182.push_back(lut182idx1);
    auto fvec182 = [flut182](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut182[i](I));
        return ret;
    };

    std::cerr << "\rLUT182   ";
    long gin182_clear = 1 * gout180_clear[0] + 2 * gout179_clear[0] + 4 * gout155_clear[1];
    std::vector<long> gout182_clear = fvec182(gin182_clear);

    std::vector<RotationPoly> lut183;
    std::vector<long (*)(long)> flut183;
    auto lut183idx0 = [](long I) -> long {
        /* GATE 252 (LUT3 _1708_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut183.push_back(ctx.genrate_lut(lut183idx0));
    flut183.push_back(lut183idx0);
    auto lut183idx1 = [](long I) -> long {
        /* GATE 207 (LUT3 _1663_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut183.push_back(ctx.genrate_lut(lut183idx1));
    flut183.push_back(lut183idx1);
    auto fvec183 = [flut183](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut183[i](I));
        return ret;
    };

    std::cerr << "\rLUT183   ";
    long gin183_clear = 1 * gout155_clear[0] + 2 * gout154_clear[1] + 4 * gout152_clear[0];
    std::vector<long> gout183_clear = fvec183(gin183_clear);

    std::vector<RotationPoly> lut184;
    std::vector<long (*)(long)> flut184;
    auto lut184idx0 = [](long I) -> long {
        /* GATE 90 (LUT3 _1546_ INIT 0xb0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut184.push_back(ctx.genrate_lut(lut184idx0));
    flut184.push_back(lut184idx0);
    auto lut184idx1 = [](long I) -> long {
        /* GATE 66 (LUT3 _1522_ INIT 0xb4 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut184.push_back(ctx.genrate_lut(lut184idx1));
    flut184.push_back(lut184idx1);
    auto fvec184 = [flut184](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut184[i](I));
        return ret;
    };

    std::cerr << "\rLUT184   ";
    long gin184_clear = 1 * gout157_clear[0] + 2 * ct_y5_clear + 4 * gout181_clear[0];
    std::vector<long> gout184_clear = fvec184(gin184_clear);

    std::vector<RotationPoly> lut185;
    std::vector<long (*)(long)> flut185;
    auto lut185idx0 = [](long I) -> long {
        /* GATE 459 (LUT3 _1915_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut185.push_back(ctx.genrate_lut(lut185idx0));
    flut185.push_back(lut185idx0);
    auto fvec185 = [flut185](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut185[i](I));
        return ret;
    };

    std::cerr << "\rLUT185   ";
    long gin185_clear = 1 * ct_y8_clear + 2 * ct_x7_clear + 4 * gout118_clear[0];
    std::vector<long> gout185_clear = fvec185(gin185_clear);

    std::vector<RotationPoly> lut186;
    std::vector<long (*)(long)> flut186;
    auto lut186idx0 = [](long I) -> long {
        /* GATE 109 (LUT3 _1565_ INIT 0x87 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut186.push_back(ctx.genrate_lut(lut186idx0));
    flut186.push_back(lut186idx0);
    auto lut186idx1 = [](long I) -> long {
        /* GATE 141 (LUT3 _1597_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut186.push_back(ctx.genrate_lut(lut186idx1));
    flut186.push_back(lut186idx1);
    auto fvec186 = [flut186](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut186[i](I));
        return ret;
    };

    std::cerr << "\rLUT186   ";
    long gin186_clear = 1 * gout151_clear[0] + 2 * ct_y6_clear + 4 * ct_x0_clear;
    std::vector<long> gout186_clear = fvec186(gin186_clear);

    std::vector<RotationPoly> lut187;
    std::vector<long (*)(long)> flut187;
    auto lut187idx0 = [](long I) -> long {
        /* GATE 423 (LUT3 _1879_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut187.push_back(ctx.genrate_lut(lut187idx0));
    flut187.push_back(lut187idx0);
    auto lut187idx1 = [](long I) -> long {
        /* GATE 379 (LUT3 _1835_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut187.push_back(ctx.genrate_lut(lut187idx1));
    flut187.push_back(lut187idx1);
    auto fvec187 = [flut187](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut187[i](I));
        return ret;
    };

    std::cerr << "\rLUT187   ";
    long gin187_clear = 1 * gout48_clear[0] + 2 * gout135_clear[0] + 4 * gout58_clear[0];
    std::vector<long> gout187_clear = fvec187(gin187_clear);

    std::vector<RotationPoly> lut188;
    std::vector<long (*)(long)> flut188;
    auto lut188idx0 = [](long I) -> long {
        /* GATE 467 (LUT3 _1923_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut188.push_back(ctx.genrate_lut(lut188idx0));
    flut188.push_back(lut188idx0);
    auto fvec188 = [flut188](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut188[i](I));
        return ret;
    };

    std::cerr << "\rLUT188   ";
    long gin188_clear = 1 * gout108_clear[0] + 2 * gout173_clear[0] + 4 * gout105_clear[1];
    std::vector<long> gout188_clear = fvec188(gin188_clear);

    std::vector<RotationPoly> lut189;
    std::vector<long (*)(long)> flut189;
    auto lut189idx0 = [](long I) -> long {
        /* GATE 276 (LUT3 _1732_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut189.push_back(ctx.genrate_lut(lut189idx0));
    flut189.push_back(lut189idx0);
    auto lut189idx1 = [](long I) -> long {
        /* GATE 319 (LUT3 _1775_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut189.push_back(ctx.genrate_lut(lut189idx1));
    flut189.push_back(lut189idx1);
    auto fvec189 = [flut189](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut189[i](I));
        return ret;
    };

    std::cerr << "\rLUT189   ";
    long gin189_clear = 1 * gout176_clear[0] + 2 * gout119_clear[1] + 4 * gout109_clear[0];
    std::vector<long> gout189_clear = fvec189(gin189_clear);

    std::vector<RotationPoly> lut190;
    std::vector<long (*)(long)> flut190;
    auto lut190idx0 = [](long I) -> long {
        /* GATE 33 (LUT3 _1489_ INIT 0xb4 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut190.push_back(ctx.genrate_lut(lut190idx0));
    flut190.push_back(lut190idx0);
    auto lut190idx1 = [](long I) -> long {
        /* GATE 49 (LUT3 _1505_ INIT 0xb0 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut190.push_back(ctx.genrate_lut(lut190idx1));
    flut190.push_back(lut190idx1);
    auto fvec190 = [flut190](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut190[i](I));
        return ret;
    };

    std::cerr << "\rLUT190   ";
    long gin190_clear = 1 * gout20_clear[0] + 2 * gout181_clear[0] + 4 * ct_y3_clear;
    std::vector<long> gout190_clear = fvec190(gin190_clear);

    std::vector<RotationPoly> lut191;
    std::vector<long (*)(long)> flut191;
    auto lut191idx0 = [](long I) -> long {
        /* GATE 197 (LUT3 _1653_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut191.push_back(ctx.genrate_lut(lut191idx0));
    flut191.push_back(lut191idx0);
    auto lut191idx1 = [](long I) -> long {
        /* GATE 233 (LUT3 _1689_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut191.push_back(ctx.genrate_lut(lut191idx1));
    flut191.push_back(lut191idx1);
    auto fvec191 = [flut191](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut191[i](I));
        return ret;
    };

    std::cerr << "\rLUT191   ";
    long gin191_clear = 1 * gout177_clear[0] + 2 * gout113_clear[1] + 4 * gout158_clear[0];
    std::vector<long> gout191_clear = fvec191(gin191_clear);

    std::vector<RotationPoly> lut192;
    std::vector<long (*)(long)> flut192;
    auto lut192idx0 = [](long I) -> long {
        /* GATE 89 (LUT2 _1545_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut192.push_back(ctx.genrate_lut(lut192idx0));
    flut192.push_back(lut192idx0);
    auto fvec192 = [flut192](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut192[i](I));
        return ret;
    };

    std::cerr << "\rLUT192   ";
    long gin192_clear = 1 * gout184_clear[0] + 2 * ct_y6_clear;
    std::vector<long> gout192_clear = fvec192(gin192_clear);

    std::vector<RotationPoly> lut193;
    std::vector<long (*)(long)> flut193;
    auto lut193idx0 = [](long I) -> long {
        /* GATE 12 (LUT3 _1468_ INIT 0x87 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut193.push_back(ctx.genrate_lut(lut193idx0));
    flut193.push_back(lut193idx0);
    auto lut193idx1 = [](long I) -> long {
        /* GATE 22 (LUT3 _1478_ INIT 0xe0 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut193.push_back(ctx.genrate_lut(lut193idx1));
    flut193.push_back(lut193idx1);
    auto fvec193 = [flut193](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut193[i](I));
        return ret;
    };

    std::cerr << "\rLUT193   ";
    long gin193_clear = 1 * gout181_clear[0] + 2 * ct_y1_clear + 4 * ct_y0_clear;
    std::vector<long> gout193_clear = fvec193(gin193_clear);

    std::vector<RotationPoly> lut194;
    std::vector<long (*)(long)> flut194;
    auto lut194idx0 = [](long I) -> long {
        /* GATE 11 (LUT3 _1467_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut194.push_back(ctx.genrate_lut(lut194idx0));
    flut194.push_back(lut194idx0);
    auto lut194idx1 = [](long I) -> long {
        /* GATE 20 (LUT3 _1476_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut194.push_back(ctx.genrate_lut(lut194idx1));
    flut194.push_back(lut194idx1);
    auto fvec194 = [flut194](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut194[i](I));
        return ret;
    };

    std::cerr << "\rLUT194   ";
    long gin194_clear = 1 * gout193_clear[0] + 2 * gout21_clear[0] + 4 * ct_x1_clear;
    std::vector<long> gout194_clear = fvec194(gin194_clear);

    std::vector<RotationPoly> lut195;
    std::vector<long (*)(long)> flut195;
    auto lut195idx0 = [](long I) -> long {
        /* GATE 9 (LUT3 _1465_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut195.push_back(ctx.genrate_lut(lut195idx0));
    flut195.push_back(lut195idx0);
    auto fvec195 = [flut195](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut195[i](I));
        return ret;
    };

    std::cerr << "\rLUT195   ";
    long gin195_clear = 1 * ct_op0_clear + 2 * gout3_clear[0] + 4 * gout115_clear[0];
    std::vector<long> gout195_clear = fvec195(gin195_clear);

    std::vector<RotationPoly> lut196;
    std::vector<long (*)(long)> flut196;
    auto lut196idx0 = [](long I) -> long {
        /* GATE 458 (LUT3 _1914_ INIT 0x78 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut196.push_back(ctx.genrate_lut(lut196idx0));
    flut196.push_back(lut196idx0);
    auto fvec196 = [flut196](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut196[i](I));
        return ret;
    };

    std::cerr << "\rLUT196   ";
    long gin196_clear = 1 * ct_y10_clear + 2 * gout185_clear[0] + 4 * ct_x5_clear;
    std::vector<long> gout196_clear = fvec196(gin196_clear);

    std::vector<RotationPoly> lut197;
    std::vector<long (*)(long)> flut197;
    auto lut197idx0 = [](long I) -> long {
        /* GATE 412 (LUT3 _1868_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut197.push_back(ctx.genrate_lut(lut197idx0));
    flut197.push_back(lut197idx0);
    auto lut197idx1 = [](long I) -> long {
        /* GATE 483 (LUT3 _1939_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut197.push_back(ctx.genrate_lut(lut197idx1));
    flut197.push_back(lut197idx1);
    auto fvec197 = [flut197](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut197[i](I));
        return ret;
    };

    std::cerr << "\rLUT197   ";
    long gin197_clear = 1 * gout149_clear[1] + 2 * gout95_clear[0] + 4 * gout173_clear[1];
    std::vector<long> gout197_clear = fvec197(gin197_clear);

    std::vector<RotationPoly> lut198;
    std::vector<long (*)(long)> flut198;
    auto lut198idx0 = [](long I) -> long {
        /* GATE 176 (LUT2 _1632_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut198.push_back(ctx.genrate_lut(lut198idx0));
    flut198.push_back(lut198idx0);
    auto lut198idx1 = [](long I) -> long {
        /* GATE 137 (LUT2 _1593_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut198.push_back(ctx.genrate_lut(lut198idx1));
    flut198.push_back(lut198idx1);
    auto fvec198 = [flut198](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut198[i](I));
        return ret;
    };

    std::cerr << "\rLUT198   ";
    long gin198_clear = 1 * gout147_clear[0] + 2 * gout180_clear[1];
    std::vector<long> gout198_clear = fvec198(gin198_clear);

    std::vector<RotationPoly> lut199;
    std::vector<long (*)(long)> flut199;
    auto lut199idx0 = [](long I) -> long {
        /* GATE 484 (LUT2 _1940_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut199.push_back(ctx.genrate_lut(lut199idx0));
    flut199.push_back(lut199idx0);
    auto fvec199 = [flut199](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut199[i](I));
        return ret;
    };

    std::cerr << "\rLUT199   ";
    long gin199_clear = 1 * gout80_clear[0] + 2 * gout170_clear[0];
    std::vector<long> gout199_clear = fvec199(gin199_clear);

    std::vector<RotationPoly> lut200;
    std::vector<long (*)(long)> flut200;
    auto lut200idx0 = [](long I) -> long {
        /* GATE 411 (LUT3 _1867_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut200.push_back(ctx.genrate_lut(lut200idx0));
    flut200.push_back(lut200idx0);
    auto lut200idx1 = [](long I) -> long {
        /* GATE 366 (LUT3 _1822_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut200.push_back(ctx.genrate_lut(lut200idx1));
    flut200.push_back(lut200idx1);
    auto fvec200 = [flut200](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut200[i](I));
        return ret;
    };

    std::cerr << "\rLUT200   ";
    long gin200_clear = 1 * gout112_clear[1] + 2 * gout149_clear[0] + 4 * gout111_clear[1];
    std::vector<long> gout200_clear = fvec200(gin200_clear);

    std::vector<RotationPoly> lut201;
    std::vector<long (*)(long)> flut201;
    auto lut201idx0 = [](long I) -> long {
        /* GATE 74 (LUT3 _1530_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut201.push_back(ctx.genrate_lut(lut201idx0));
    flut201.push_back(lut201idx0);
    auto lut201idx1 = [](long I) -> long {
        /* GATE 98 (LUT3 _1554_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut201.push_back(ctx.genrate_lut(lut201idx1));
    flut201.push_back(lut201idx1);
    auto fvec201 = [flut201](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut201[i](I));
        return ret;
    };

    std::cerr << "\rLUT201   ";
    long gin201_clear = 1 * gout106_clear[0] + 2 * gout101_clear[0] + 4 * gout151_clear[1];
    std::vector<long> gout201_clear = fvec201(gin201_clear);

    std::vector<RotationPoly> lut202;
    std::vector<long (*)(long)> flut202;
    auto lut202idx0 = [](long I) -> long {
        /* GATE 234 (LUT3 _1690_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut202.push_back(ctx.genrate_lut(lut202idx0));
    flut202.push_back(lut202idx0);
    auto lut202idx1 = [](long I) -> long {
        /* GATE 275 (LUT3 _1731_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut202.push_back(ctx.genrate_lut(lut202idx1));
    flut202.push_back(lut202idx1);
    auto fvec202 = [flut202](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut202[i](I));
        return ret;
    };

    std::cerr << "\rLUT202   ";
    long gin202_clear = 1 * gout113_clear[0] + 2 * gout176_clear[1] + 4 * gout148_clear[1];
    std::vector<long> gout202_clear = fvec202(gin202_clear);

    std::vector<RotationPoly> lut203;
    std::vector<long (*)(long)> flut203;
    auto lut203idx0 = [](long I) -> long {
        /* GATE 301 (LUT2 _1757_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut203.push_back(ctx.genrate_lut(lut203idx0));
    flut203.push_back(lut203idx0);
    auto lut203idx1 = [](long I) -> long {
        /* GATE 251 (LUT2 _1707_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut203.push_back(ctx.genrate_lut(lut203idx1));
    flut203.push_back(lut203idx1);
    auto fvec203 = [flut203](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut203[i](I));
        return ret;
    };

    std::cerr << "\rLUT203   ";
    long gin203_clear = 1 * gout183_clear[0] + 2 * gout150_clear[0];
    std::vector<long> gout203_clear = fvec203(gin203_clear);

    std::vector<RotationPoly> lut204;
    std::vector<long (*)(long)> flut204;
    auto lut204idx0 = [](long I) -> long {
        /* GATE 422 (LUT3 _1878_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut204.push_back(ctx.genrate_lut(lut204idx0));
    flut204.push_back(lut204idx0);
    auto lut204idx1 = [](long I) -> long {
        /* GATE 463 (LUT3 _1919_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut204.push_back(ctx.genrate_lut(lut204idx1));
    flut204.push_back(lut204idx1);
    auto fvec204 = [flut204](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut204[i](I));
        return ret;
    };

    std::cerr << "\rLUT204   ";
    long gin204_clear = 1 * gout187_clear[0] + 2 * gout105_clear[0] + 4 * gout111_clear[0];
    std::vector<long> gout204_clear = fvec204(gin204_clear);

    std::vector<RotationPoly> lut205;
    std::vector<long (*)(long)> flut205;
    auto lut205idx0 = [](long I) -> long {
        /* GATE 320 (LUT3 _1776_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut205.push_back(ctx.genrate_lut(lut205idx0));
    flut205.push_back(lut205idx0);
    auto lut205idx1 = [](long I) -> long {
        /* GATE 365 (LUT3 _1821_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut205.push_back(ctx.genrate_lut(lut205idx1));
    flut205.push_back(lut205idx1);
    auto fvec205 = [flut205](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut205[i](I));
        return ret;
    };

    std::cerr << "\rLUT205   ";
    long gin205_clear = 1 * gout119_clear[0] + 2 * gout112_clear[0] + 4 * gout162_clear[0];
    std::vector<long> gout205_clear = fvec205(gin205_clear);

    std::vector<RotationPoly> lut206;
    std::vector<long (*)(long)> flut206;
    auto lut206idx0 = [](long I) -> long {
        /* GATE 126 (LUT3 _1582_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut206.push_back(ctx.genrate_lut(lut206idx0));
    flut206.push_back(lut206idx0);
    auto lut206idx1 = [](long I) -> long {
        /* GATE 99 (LUT3 _1555_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut206.push_back(ctx.genrate_lut(lut206idx1));
    flut206.push_back(lut206idx1);
    auto fvec206 = [flut206](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut206[i](I));
        return ret;
    };

    std::cerr << "\rLUT206   ";
    long gin206_clear = 1 * gout101_clear[1] + 2 * gout159_clear[1] + 4 * gout147_clear[1];
    std::vector<long> gout206_clear = fvec206(gin206_clear);

    std::vector<RotationPoly> lut207;
    std::vector<long (*)(long)> flut207;
    auto lut207idx0 = [](long I) -> long {
        /* GATE 115 (LUT3 _1571_ INIT 0xb4 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut207.push_back(ctx.genrate_lut(lut207idx0));
    flut207.push_back(lut207idx0);
    auto lut207idx1 = [](long I) -> long {
        /* GATE 147 (LUT3 _1603_ INIT 0xb0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut207.push_back(ctx.genrate_lut(lut207idx1));
    flut207.push_back(lut207idx1);
    auto fvec207 = [flut207](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut207[i](I));
        return ret;
    };

    std::cerr << "\rLUT207   ";
    long gin207_clear = 1 * gout178_clear[0] + 2 * ct_y7_clear + 4 * gout181_clear[0];
    std::vector<long> gout207_clear = fvec207(gin207_clear);

    std::vector<RotationPoly> lut208;
    std::vector<long (*)(long)> flut208;
    auto lut208idx0 = [](long I) -> long {
        /* GATE 37 (LUT3 _1493_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut208.push_back(ctx.genrate_lut(lut208idx0));
    flut208.push_back(lut208idx0);
    auto lut208idx1 = [](long I) -> long {
        /* GATE 53 (LUT3 _1509_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut208.push_back(ctx.genrate_lut(lut208idx1));
    flut208.push_back(lut208idx1);
    auto fvec208 = [flut208](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut208[i](I));
        return ret;
    };

    std::cerr << "\rLUT208   ";
    long gin208_clear = 1 * gout86_clear[0] + 2 * gout138_clear[1] + 4 * gout121_clear[0];
    std::vector<long> gout208_clear = fvec208(gin208_clear);

    std::vector<RotationPoly> lut209;
    std::vector<long (*)(long)> flut209;
    auto lut209idx0 = [](long I) -> long {
        /* GATE 473 (LUT3 _1929_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut209.push_back(ctx.genrate_lut(lut209idx0));
    flut209.push_back(lut209idx0);
    auto lut209idx1 = [](long I) -> long {
        /* GATE 432 (LUT3 _1888_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut209.push_back(ctx.genrate_lut(lut209idx1));
    flut209.push_back(lut209idx1);
    auto fvec209 = [flut209](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut209[i](I));
        return ret;
    };

    std::cerr << "\rLUT209   ";
    long gin209_clear = 1 * gout127_clear[1] + 2 * gout78_clear[1] + 4 * gout174_clear[0];
    std::vector<long> gout209_clear = fvec209(gin209_clear);

    std::vector<RotationPoly> lut210;
    std::vector<long (*)(long)> flut210;
    auto lut210idx0 = [](long I) -> long {
        /* GATE 293 (LUT2 _1749_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut210.push_back(ctx.genrate_lut(lut210idx0));
    flut210.push_back(lut210idx0);
    auto lut210idx1 = [](long I) -> long {
        /* GATE 347 (LUT2 _1803_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut210.push_back(ctx.genrate_lut(lut210idx1));
    flut210.push_back(lut210idx1);
    auto fvec210 = [flut210](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut210[i](I));
        return ret;
    };

    std::cerr << "\rLUT210   ";
    long gin210_clear = 1 * gout171_clear[1] + 2 * gout169_clear[0];
    std::vector<long> gout210_clear = fvec210(gin210_clear);

    std::vector<RotationPoly> lut211;
    std::vector<long (*)(long)> flut211;
    auto lut211idx0 = [](long I) -> long {
        /* GATE 376 (LUT3 _1832_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut211.push_back(ctx.genrate_lut(lut211idx0));
    flut211.push_back(lut211idx0);
    auto lut211idx1 = [](long I) -> long {
        /* GATE 431 (LUT3 _1887_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut211.push_back(ctx.genrate_lut(lut211idx1));
    flut211.push_back(lut211idx1);
    auto fvec211 = [flut211](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut211[i](I));
        return ret;
    };

    std::cerr << "\rLUT211   ";
    long gin211_clear = 1 * gout156_clear[1] + 2 * gout187_clear[1] + 4 * gout162_clear[1];
    std::vector<long> gout211_clear = fvec211(gin211_clear);

    std::vector<RotationPoly> lut212;
    std::vector<long (*)(long)> flut212;
    auto lut212idx0 = [](long I) -> long {
        /* GATE 8 (LUT3 _1464_ INIT 0x94 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut212.push_back(ctx.genrate_lut(lut212idx0));
    flut212.push_back(lut212idx0);
    auto fvec212 = [flut212](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut212[i](I));
        return ret;
    };

    std::cerr << "\rLUT212   ";
    long gin212_clear = 1 * ct_y0_clear + 2 * ct_x0_clear + 4 * gout195_clear[0];
    std::vector<long> gout212_clear = fvec212(gin212_clear);

    std::vector<RotationPoly> lut213;
    std::vector<long (*)(long)> flut213;
    auto lut213idx0 = [](long I) -> long {
        /* GATE 337 (LUT3 _1793_ INIT 0x69 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut213.push_back(ctx.genrate_lut(lut213idx0));
    flut213.push_back(lut213idx0);
    auto lut213idx1 = [](long I) -> long {
        /* GATE 394 (LUT3 _1850_ INIT 0x71 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut213.push_back(ctx.genrate_lut(lut213idx1));
    flut213.push_back(lut213idx1);
    auto fvec213 = [flut213](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut213[i](I));
        return ret;
    };

    std::cerr << "\rLUT213   ";
    long gin213_clear = 1 * gout169_clear[1] + 2 * gout165_clear[1] + 4 * gout168_clear[0];
    std::vector<long> gout213_clear = fvec213(gin213_clear);

    std::vector<RotationPoly> lut214;
    std::vector<long (*)(long)> flut214;
    auto lut214idx0 = [](long I) -> long {
        /* GATE 114 (LUT2 _1570_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut214.push_back(ctx.genrate_lut(lut214idx0));
    flut214.push_back(lut214idx0);
    auto fvec214 = [flut214](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut214[i](I));
        return ret;
    };

    std::cerr << "\rLUT214   ";
    long gin214_clear = 1 * gout207_clear[0] + 2 * ct_x7_clear;
    std::vector<long> gout214_clear = fvec214(gin214_clear);

    std::vector<RotationPoly> lut215;
    std::vector<long (*)(long)> flut215;
    auto lut215idx0 = [](long I) -> long {
        /* GATE 158 (LUT3 _1614_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut215.push_back(ctx.genrate_lut(lut215idx0));
    flut215.push_back(lut215idx0);
    auto lut215idx1 = [](long I) -> long {
        /* GATE 127 (LUT3 _1583_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut215.push_back(ctx.genrate_lut(lut215idx1));
    flut215.push_back(lut215idx1);
    auto fvec215 = [flut215](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut215[i](I));
        return ret;
    };

    std::cerr << "\rLUT215   ";
    long gin215_clear = 1 * gout159_clear[0] + 2 * gout163_clear[0] + 4 * gout179_clear[1];
    std::vector<long> gout215_clear = fvec215(gin215_clear);

    std::vector<RotationPoly> lut216;
    std::vector<long (*)(long)> flut216;
    auto lut216idx0 = [](long I) -> long {
        /* GATE 72 (LUT3 _1528_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut216.push_back(ctx.genrate_lut(lut216idx0));
    flut216.push_back(lut216idx0);
    auto lut216idx1 = [](long I) -> long {
        /* GATE 96 (LUT3 _1552_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut216.push_back(ctx.genrate_lut(lut216idx1));
    flut216.push_back(lut216idx1);
    auto fvec216 = [flut216](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut216[i](I));
        return ret;
    };

    std::cerr << "\rLUT216   ";
    long gin216_clear = 1 * gout164_clear[1] + 2 * gout201_clear[0] + 4 * gout175_clear[0];
    std::vector<long> gout216_clear = fvec216(gin216_clear);

    std::vector<RotationPoly> lut217;
    std::vector<long (*)(long)> flut217;
    auto lut217idx0 = [](long I) -> long {
        /* GATE 232 (LUT3 _1688_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut217.push_back(ctx.genrate_lut(lut217idx0));
    flut217.push_back(lut217idx0);
    auto lut217idx1 = [](long I) -> long {
        /* GATE 273 (LUT3 _1729_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut217.push_back(ctx.genrate_lut(lut217idx1));
    flut217.push_back(lut217idx1);
    auto fvec217 = [flut217](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut217[i](I));
        return ret;
    };

    std::cerr << "\rLUT217   ";
    long gin217_clear = 1 * gout191_clear[1] + 2 * gout202_clear[0] + 4 * gout171_clear[0];
    std::vector<long> gout217_clear = fvec217(gin217_clear);

    std::vector<RotationPoly> lut218;
    std::vector<long (*)(long)> flut218;
    auto lut218idx0 = [](long I) -> long {
        /* GATE 474 (LUT3 _1930_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut218.push_back(ctx.genrate_lut(lut218idx0));
    flut218.push_back(lut218idx0);
    auto fvec218 = [flut218](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut218[i](I));
        return ret;
    };

    std::cerr << "\rLUT218   ";
    long gin218_clear = 1 * ct_y4_clear + 2 * ct_x11_clear + 4 * gout95_clear[1];
    std::vector<long> gout218_clear = fvec218(gin218_clear);

    std::vector<RotationPoly> lut219;
    std::vector<long (*)(long)> flut219;
    auto lut219idx0 = [](long I) -> long {
        /* GATE 21 (LUT2 _1477_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut219.push_back(ctx.genrate_lut(lut219idx0));
    flut219.push_back(lut219idx0);
    auto fvec219 = [flut219](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut219[i](I));
        return ret;
    };

    std::cerr << "\rLUT219   ";
    long gin219_clear = 1 * gout193_clear[1] + 2 * ct_y2_clear;
    std::vector<long> gout219_clear = fvec219(gin219_clear);

    std::vector<RotationPoly> lut220;
    std::vector<long (*)(long)> flut220;
    auto lut220idx0 = [](long I) -> long {
        /* GATE 330 (LUT3 _1786_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut220.push_back(ctx.genrate_lut(lut220idx0));
    flut220.push_back(lut220idx0);
    auto lut220idx1 = [](long I) -> long {
        /* GATE 385 (LUT3 _1841_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut220.push_back(ctx.genrate_lut(lut220idx1));
    flut220.push_back(lut220idx1);
    auto fvec220 = [flut220](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut220[i](I));
        return ret;
    };

    std::cerr << "\rLUT220   ";
    long gin220_clear = 1 * gout161_clear[1] + 2 * gout156_clear[0] + 4 * gout109_clear[1];
    std::vector<long> gout220_clear = fvec220(gin220_clear);

    std::vector<RotationPoly> lut221;
    std::vector<long (*)(long)> flut221;
    auto lut221idx0 = [](long I) -> long {
        /* GATE 48 (LUT2 _1504_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut221.push_back(ctx.genrate_lut(lut221idx0));
    flut221.push_back(lut221idx0);
    auto fvec221 = [flut221](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut221[i](I));
        return ret;
    };

    std::cerr << "\rLUT221   ";
    long gin221_clear = 1 * gout190_clear[1] + 2 * ct_y4_clear;
    std::vector<long> gout221_clear = fvec221(gin221_clear);

    std::vector<RotationPoly> lut222;
    std::vector<long (*)(long)> flut222;
    auto lut222idx0 = [](long I) -> long {
        /* GATE 159 (LUT3 _1615_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut222.push_back(ctx.genrate_lut(lut222idx0));
    flut222.push_back(lut222idx0);
    auto lut222idx1 = [](long I) -> long {
        /* GATE 196 (LUT3 _1652_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut222.push_back(ctx.genrate_lut(lut222idx1));
    flut222.push_back(lut222idx1);
    auto fvec222 = [flut222](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut222[i](I));
        return ret;
    };

    std::cerr << "\rLUT222   ";
    long gin222_clear = 1 * gout163_clear[1] + 2 * gout177_clear[1] + 4 * gout152_clear[1];
    std::vector<long> gout222_clear = fvec222(gin222_clear);

    std::vector<RotationPoly> lut223;
    std::vector<long (*)(long)> flut223;
    auto lut223idx0 = [](long I) -> long {
        /* GATE 184 (LUT3 _1640_ INIT 0x10 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut223.push_back(ctx.genrate_lut(lut223idx0));
    flut223.push_back(lut223idx0);
    auto fvec223 = [flut223](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut223[i](I));
        return ret;
    };

    std::cerr << "\rLUT223   ";
    long gin223_clear = 1 * gout178_clear[0] + 2 * ct_y7_clear + 4 * ct_y8_clear;
    std::vector<long> gout223_clear = fvec223(gin223_clear);

    std::vector<RotationPoly> lut224;
    std::vector<long (*)(long)> flut224;
    auto lut224idx0 = [](long I) -> long {
        /* GATE 482 (LUT3 _1938_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut224.push_back(ctx.genrate_lut(lut224idx0));
    flut224.push_back(lut224idx0);
    auto lut224idx1 = [](long I) -> long {
        /* GATE 410 (LUT3 _1866_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut224.push_back(ctx.genrate_lut(lut224idx1));
    flut224.push_back(lut224idx1);
    auto fvec224 = [flut224](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut224[i](I));
        return ret;
    };

    std::cerr << "\rLUT224   ";
    long gin224_clear = 1 * gout200_clear[0] + 2 * gout197_clear[0] + 4 * gout204_clear[0];
    std::vector<long> gout224_clear = fvec224(gin224_clear);

    std::vector<RotationPoly> lut225;
    std::vector<long (*)(long)> flut225;
    auto lut225idx0 = [](long I) -> long {
        /* GATE 157 (LUT3 _1613_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut225.push_back(ctx.genrate_lut(lut225idx0));
    flut225.push_back(lut225idx0);
    auto lut225idx1 = [](long I) -> long {
        /* GATE 194 (LUT3 _1650_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut225.push_back(ctx.genrate_lut(lut225idx1));
    flut225.push_back(lut225idx1);
    auto fvec225 = [flut225](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut225[i](I));
        return ret;
    };

    std::cerr << "\rLUT225   ";
    long gin225_clear = 1 * gout215_clear[0] + 2 * gout222_clear[0] + 4 * gout182_clear[0];
    std::vector<long> gout225_clear = fvec225(gin225_clear);

    std::vector<RotationPoly> lut226;
    std::vector<long (*)(long)> flut226;
    auto lut226idx0 = [](long I) -> long {
        /* GATE 477 (LUT3 _1933_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut226.push_back(ctx.genrate_lut(lut226idx0));
    flut226.push_back(lut226idx0);
    auto lut226idx1 = [](long I) -> long {
        /* GATE 429 (LUT3 _1885_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut226.push_back(ctx.genrate_lut(lut226idx1));
    flut226.push_back(lut226idx1);
    auto fvec226 = [flut226](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut226[i](I));
        return ret;
    };

    std::cerr << "\rLUT226   ";
    long gin226_clear = 1 * gout160_clear[0] + 2 * gout209_clear[1] + 4 * gout211_clear[1];
    std::vector<long> gout226_clear = fvec226(gin226_clear);

    std::vector<RotationPoly> lut227;
    std::vector<long (*)(long)> flut227;
    auto lut227idx0 = [](long I) -> long {
        /* GATE 364 (LUT3 _1820_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut227.push_back(ctx.genrate_lut(lut227idx0));
    flut227.push_back(lut227idx0);
    auto lut227idx1 = [](long I) -> long {
        /* GATE 409 (LUT3 _1865_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut227.push_back(ctx.genrate_lut(lut227idx1));
    flut227.push_back(lut227idx1);
    auto fvec227 = [flut227](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut227[i](I));
        return ret;
    };

    std::cerr << "\rLUT227   ";
    long gin227_clear = 1 * gout205_clear[1] + 2 * gout200_clear[1] + 4 * gout211_clear[0];
    std::vector<long> gout227_clear = fvec227(gin227_clear);

    std::vector<RotationPoly> lut228;
    std::vector<long (*)(long)> flut228;
    auto lut228idx0 = [](long I) -> long {
        /* GATE 476 (LUT3 _1932_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut228.push_back(ctx.genrate_lut(lut228idx0));
    flut228.push_back(lut228idx0);
    auto fvec228 = [flut228](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut228[i](I));
        return ret;
    };

    std::cerr << "\rLUT228   ";
    long gin228_clear = 1 * gout226_clear[0] + 2 * gout166_clear[0] + 4 * gout174_clear[1];
    std::vector<long> gout228_clear = fvec228(gin228_clear);

    std::vector<RotationPoly> lut229;
    std::vector<long (*)(long)> flut229;
    auto lut229idx0 = [](long I) -> long {
        /* GATE 363 (LUT3 _1819_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut229.push_back(ctx.genrate_lut(lut229idx0));
    flut229.push_back(lut229idx0);
    auto lut229idx1 = [](long I) -> long {
        /* GATE 318 (LUT3 _1774_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut229.push_back(ctx.genrate_lut(lut229idx1));
    flut229.push_back(lut229idx1);
    auto fvec229 = [flut229](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut229[i](I));
        return ret;
    };

    std::cerr << "\rLUT229   ";
    long gin229_clear = 1 * gout189_clear[1] + 2 * gout205_clear[0] + 4 * gout220_clear[0];
    std::vector<long> gout229_clear = fvec229(gin229_clear);

    std::vector<RotationPoly> lut230;
    std::vector<long (*)(long)> flut230;
    auto lut230idx0 = [](long I) -> long {
        /* GATE 2 (LUT3 _1458_ INIT 0x7 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut230.push_back(ctx.genrate_lut(lut230idx0));
    flut230.push_back(lut230idx0);
    auto fvec230 = [flut230](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut230[i](I));
        return ret;
    };

    std::cerr << "\rLUT230   ";
    long gin230_clear = 1 * gout3_clear[0] + 2 * gout115_clear[0] + 4 * gout181_clear[0];
    std::vector<long> gout230_clear = fvec230(gin230_clear);

    std::vector<RotationPoly> lut231;
    std::vector<long (*)(long)> flut231;
    auto lut231idx0 = [](long I) -> long {
        /* GATE 32 (LUT3 _1488_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut231.push_back(ctx.genrate_lut(lut231idx0));
    flut231.push_back(lut231idx0);
    auto lut231idx1 = [](long I) -> long {
        /* GATE 19 (LUT3 _1475_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut231.push_back(ctx.genrate_lut(lut231idx1));
    flut231.push_back(lut231idx1);
    auto fvec231 = [flut231](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut231[i](I));
        return ret;
    };

    std::cerr << "\rLUT231   ";
    long gin231_clear = 1 * gout194_clear[1] + 2 * gout219_clear[0] + 4 * ct_x2_clear;
    std::vector<long> gout231_clear = fvec231(gin231_clear);

    std::vector<RotationPoly> lut232;
    std::vector<long (*)(long)> flut232;
    auto lut232idx0 = [](long I) -> long {
        /* GATE 52 (LUT2 _1508_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut232.push_back(ctx.genrate_lut(lut232idx0));
    flut232.push_back(lut232idx0);
    auto lut232idx1 = [](long I) -> long {
        /* GATE 71 (LUT2 _1527_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut232.push_back(ctx.genrate_lut(lut232idx1));
    flut232.push_back(lut232idx1);
    auto fvec232 = [flut232](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut232[i](I));
        return ret;
    };

    std::cerr << "\rLUT232   ";
    long gin232_clear = 1 * gout208_clear[1] + 2 * gout164_clear[0];
    std::vector<long> gout232_clear = fvec232(gin232_clear);

    std::vector<RotationPoly> lut233;
    std::vector<long (*)(long)> flut233;
    auto lut233idx0 = [](long I) -> long {
        /* GATE 97 (LUT3 _1553_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut233.push_back(ctx.genrate_lut(lut233idx0));
    flut233.push_back(lut233idx0);
    auto lut233idx1 = [](long I) -> long {
        /* GATE 124 (LUT3 _1580_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut233.push_back(ctx.genrate_lut(lut233idx1));
    flut233.push_back(lut233idx1);
    auto fvec233 = [flut233](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut233[i](I));
        return ret;
    };

    std::cerr << "\rLUT233   ";
    long gin233_clear = 1 * gout201_clear[1] + 2 * gout206_clear[1] + 4 * gout186_clear[0];
    std::vector<long> gout233_clear = fvec233(gin233_clear);

    std::vector<RotationPoly> lut234;
    std::vector<long (*)(long)> flut234;
    auto lut234idx0 = [](long I) -> long {
        /* GATE 383 (LUT3 _1839_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut234.push_back(ctx.genrate_lut(lut234idx0));
    flut234.push_back(lut234idx0);
    auto lut234idx1 = [](long I) -> long {
        /* GATE 443 (LUT3 _1899_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut234.push_back(ctx.genrate_lut(lut234idx1));
    flut234.push_back(lut234idx1);
    auto fvec234 = [flut234](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut234[i](I));
        return ret;
    };

    std::cerr << "\rLUT234   ";
    long gin234_clear = 1 * gout165_clear[0] + 2 * gout160_clear[1] + 4 * gout220_clear[1];
    std::vector<long> gout234_clear = fvec234(gin234_clear);

    std::vector<RotationPoly> lut235;
    std::vector<long (*)(long)> flut235;
    auto lut235idx0 = [](long I) -> long {
        /* GATE 255 (LUT3 _1711_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut235.push_back(ctx.genrate_lut(lut235idx0));
    flut235.push_back(lut235idx0);
    auto lut235idx1 = [](long I) -> long {
        /* GATE 214 (LUT3 _1670_ INIT 0x87 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut235.push_back(ctx.genrate_lut(lut235idx1));
    flut235.push_back(lut235idx1);
    auto fvec235 = [flut235](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut235[i](I));
        return ret;
    };

    std::cerr << "\rLUT235   ";
    long gin235_clear = 1 * gout182_clear[1] + 2 * ct_y9_clear + 4 * ct_x0_clear;
    std::vector<long> gout235_clear = fvec235(gin235_clear);

    std::vector<RotationPoly> lut236;
    std::vector<long (*)(long)> flut236;
    auto lut236idx0 = [](long I) -> long {
        /* GATE 362 (LUT3 _1818_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut236.push_back(ctx.genrate_lut(lut236idx0));
    flut236.push_back(lut236idx0);
    auto lut236idx1 = [](long I) -> long {
        /* GATE 407 (LUT3 _1863_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut236.push_back(ctx.genrate_lut(lut236idx1));
    flut236.push_back(lut236idx1);
    auto fvec236 = [flut236](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut236[i](I));
        return ret;
    };

    std::cerr << "\rLUT236   ";
    long gin236_clear = 1 * gout229_clear[0] + 2 * gout227_clear[0] + 4 * gout234_clear[0];
    std::vector<long> gout236_clear = fvec236(gin236_clear);

    std::vector<RotationPoly> lut237;
    std::vector<long (*)(long)> flut237;
    auto lut237idx0 = [](long I) -> long {
        /* GATE 14 (LUT3 _1470_ INIT 0x7 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut237.push_back(ctx.genrate_lut(lut237idx0));
    flut237.push_back(lut237idx0);
    auto fvec237 = [flut237](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut237[i](I));
        return ret;
    };

    std::cerr << "\rLUT237   ";
    long gin237_clear = 1 * gout167_clear[0] + 2 * gout195_clear[0] + 4 * gout230_clear[0];
    std::vector<long> gout237_clear = fvec237(gin237_clear);

    std::vector<RotationPoly> lut238;
    std::vector<long (*)(long)> flut238;
    auto lut238idx0 = [](long I) -> long {
        /* GATE 457 (LUT2 _1913_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut238.push_back(ctx.genrate_lut(lut238idx0));
    flut238.push_back(lut238idx0);
    auto fvec238 = [flut238](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut238[i](I));
        return ret;
    };

    std::cerr << "\rLUT238   ";
    long gin238_clear = 1 * gout196_clear[0] + 2 * gout107_clear[0];
    std::vector<long> gout238_clear = fvec238(gin238_clear);

    std::vector<RotationPoly> lut239;
    std::vector<long (*)(long)> flut239;
    auto lut239idx0 = [](long I) -> long {
        /* GATE 274 (LUT3 _1730_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut239.push_back(ctx.genrate_lut(lut239idx0));
    flut239.push_back(lut239idx0);
    auto lut239idx1 = [](long I) -> long {
        /* GATE 317 (LUT3 _1773_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut239.push_back(ctx.genrate_lut(lut239idx1));
    flut239.push_back(lut239idx1);
    auto fvec239 = [flut239](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut239[i](I));
        return ret;
    };

    std::cerr << "\rLUT239   ";
    long gin239_clear = 1 * gout202_clear[1] + 2 * gout189_clear[0] + 4 * gout168_clear[1];
    std::vector<long> gout239_clear = fvec239(gin239_clear);

    std::vector<RotationPoly> lut240;
    std::vector<long (*)(long)> flut240;
    auto lut240idx0 = [](long I) -> long {
        /* GATE 195 (LUT3 _1651_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut240.push_back(ctx.genrate_lut(lut240idx0));
    flut240.push_back(lut240idx0);
    auto lut240idx1 = [](long I) -> long {
        /* GATE 231 (LUT3 _1687_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut240.push_back(ctx.genrate_lut(lut240idx1));
    flut240.push_back(lut240idx1);
    auto fvec240 = [flut240](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut240[i](I));
        return ret;
    };

    std::cerr << "\rLUT240   ";
    long gin240_clear = 1 * gout222_clear[1] + 2 * gout191_clear[0] + 4 * gout183_clear[1];
    std::vector<long> gout240_clear = fvec240(gin240_clear);

    std::vector<RotationPoly> lut241;
    std::vector<long (*)(long)> flut241;
    auto lut241idx0 = [](long I) -> long {
        /* GATE 31 (LUT3 _1487_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut241.push_back(ctx.genrate_lut(lut241idx0));
    flut241.push_back(lut241idx0);
    auto lut241idx1 = [](long I) -> long {
        /* GATE 47 (LUT3 _1503_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut241.push_back(ctx.genrate_lut(lut241idx1));
    flut241.push_back(lut241idx1);
    auto fvec241 = [flut241](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut241[i](I));
        return ret;
    };

    std::cerr << "\rLUT241   ";
    long gin241_clear = 1 * gout231_clear[0] + 2 * gout190_clear[0] + 4 * ct_x3_clear;
    std::vector<long> gout241_clear = fvec241(gin241_clear);

    std::vector<RotationPoly> lut242;
    std::vector<long (*)(long)> flut242;
    auto lut242idx0 = [](long I) -> long {
        /* GATE 70 (LUT2 _1526_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut242.push_back(ctx.genrate_lut(lut242idx0));
    flut242.push_back(lut242idx0);
    auto lut242idx1 = [](long I) -> long {
        /* GATE 94 (LUT2 _1550_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut242.push_back(ctx.genrate_lut(lut242idx1));
    flut242.push_back(lut242idx1);
    auto fvec242 = [flut242](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut242[i](I));
        return ret;
    };

    std::cerr << "\rLUT242   ";
    long gin242_clear = 1 * gout232_clear[1] + 2 * gout216_clear[0];
    std::vector<long> gout242_clear = fvec242(gin242_clear);

    std::vector<RotationPoly> lut243;
    std::vector<long (*)(long)> flut243;
    auto lut243idx0 = [](long I) -> long {
        /* GATE 222 (LUT3 _1678_ INIT 0xb0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut243.push_back(ctx.genrate_lut(lut243idx0));
    flut243.push_back(lut243idx0);
    auto lut243idx1 = [](long I) -> long {
        /* GATE 183 (LUT3 _1639_ INIT 0xb4 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut243.push_back(ctx.genrate_lut(lut243idx1));
    flut243.push_back(lut243idx1);
    auto fvec243 = [flut243](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut243[i](I));
        return ret;
    };

    std::cerr << "\rLUT243   ";
    long gin243_clear = 1 * gout223_clear[0] + 2 * ct_y9_clear + 4 * gout181_clear[0];
    std::vector<long> gout243_clear = fvec243(gin243_clear);

    std::vector<RotationPoly> lut244;
    std::vector<long (*)(long)> flut244;
    auto lut244idx0 = [](long I) -> long {
        /* GATE 35 (LUT2 _1491_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut244.push_back(ctx.genrate_lut(lut244idx0));
    flut244.push_back(lut244idx0);
    auto lut244idx1 = [](long I) -> long {
        /* GATE 51 (LUT2 _1507_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut244.push_back(ctx.genrate_lut(lut244idx1));
    flut244.push_back(lut244idx1);
    auto fvec244 = [flut244](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut244[i](I));
        return ret;
    };

    std::cerr << "\rLUT244   ";
    long gin244_clear = 1 * gout172_clear[0] + 2 * gout208_clear[0];
    std::vector<long> gout244_clear = fvec244(gin244_clear);

    std::vector<RotationPoly> lut245;
    std::vector<long (*)(long)> flut245;
    auto lut245idx0 = [](long I) -> long {
        /* GATE 262 (LUT3 _1718_ INIT 0x10 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut245.push_back(ctx.genrate_lut(lut245idx0));
    flut245.push_back(lut245idx0);
    auto fvec245 = [flut245](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut245[i](I));
        return ret;
    };

    std::cerr << "\rLUT245   ";
    long gin245_clear = 1 * gout223_clear[0] + 2 * ct_y9_clear + 4 * ct_y10_clear;
    std::vector<long> gout245_clear = fvec245(gin245_clear);

    std::vector<RotationPoly> lut246;
    std::vector<long (*)(long)> flut246;
    auto lut246idx0 = [](long I) -> long {
        /* GATE 481 (LUT3 _1937_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut246.push_back(ctx.genrate_lut(lut246idx0));
    flut246.push_back(lut246idx0);
    auto fvec246 = [flut246](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut246[i](I));
        return ret;
    };

    std::cerr << "\rLUT246   ";
    long gin246_clear = 1 * gout224_clear[0] + 2 * gout197_clear[1] + 4 * gout199_clear[0];
    std::vector<long> gout246_clear = fvec246(gin246_clear);

    std::vector<RotationPoly> lut247;
    std::vector<long (*)(long)> flut247;
    auto lut247idx0 = [](long I) -> long {
        /* GATE 466 (LUT3 _1922_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut247.push_back(ctx.genrate_lut(lut247idx0));
    flut247.push_back(lut247idx0);
    auto fvec247 = [flut247](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut247[i](I));
        return ret;
    };

    std::cerr << "\rLUT247   ";
    long gin247_clear = 1 * gout188_clear[0] + 2 * gout209_clear[0] + 4 * gout218_clear[0];
    std::vector<long> gout247_clear = fvec247(gin247_clear);

    std::vector<RotationPoly> lut248;
    std::vector<long (*)(long)> flut248;
    auto lut248idx0 = [](long I) -> long {
        /* GATE 1 (LUT2 _1457_ INIT 0xe PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut248.push_back(ctx.genrate_lut(lut248idx0));
    flut248.push_back(lut248idx0);
    auto fvec248 = [flut248](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut248[i](I));
        return ret;
    };

    std::cerr << "\rLUT248   ";
    long gin248_clear = 1 * gout212_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout248_clear = fvec248(gin248_clear);

    std::vector<RotationPoly> lut249;
    std::vector<long (*)(long)> flut249;
    auto lut249idx0 = [](long I) -> long {
        /* GATE 122 (LUT2 _1578_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut249.push_back(ctx.genrate_lut(lut249idx0));
    flut249.push_back(lut249idx0);
    auto lut249idx1 = [](long I) -> long {
        /* GATE 95 (LUT2 _1551_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut249.push_back(ctx.genrate_lut(lut249idx1));
    flut249.push_back(lut249idx1);
    auto fvec249 = [flut249](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut249[i](I));
        return ret;
    };

    std::cerr << "\rLUT249   ";
    long gin249_clear = 1 * gout216_clear[1] + 2 * gout233_clear[0];
    std::vector<long> gout249_clear = fvec249(gin249_clear);

    std::vector<RotationPoly> lut250;
    std::vector<long (*)(long)> flut250;
    auto lut250idx0 = [](long I) -> long {
        /* GATE 146 (LUT3 _1602_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut250.push_back(ctx.genrate_lut(lut250idx0));
    flut250.push_back(lut250idx0);
    auto lut250idx1 = [](long I) -> long {
        /* GATE 181 (LUT3 _1637_ INIT 0x60 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut250.push_back(ctx.genrate_lut(lut250idx1));
    flut250.push_back(lut250idx1);
    auto fvec250 = [flut250](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut250[i](I));
        return ret;
    };

    std::cerr << "\rLUT250   ";
    long gin250_clear = 1 * gout207_clear[1] + 2 * ct_x8_clear + 4 * ct_y8_clear;
    std::vector<long> gout250_clear = fvec250(gin250_clear);

    std::vector<RotationPoly> lut251;
    std::vector<long (*)(long)> flut251;
    auto lut251idx0 = [](long I) -> long {
        /* GATE 182 (LUT2 _1638_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut251.push_back(ctx.genrate_lut(lut251idx0));
    flut251.push_back(lut251idx0);
    auto fvec251 = [flut251](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut251[i](I));
        return ret;
    };

    std::cerr << "\rLUT251   ";
    long gin251_clear = 1 * gout243_clear[1] + 2 * ct_x9_clear;
    std::vector<long> gout251_clear = fvec251(gin251_clear);

    std::vector<RotationPoly> lut252;
    std::vector<long (*)(long)> flut252;
    auto lut252idx0 = [](long I) -> long {
        /* GATE 261 (LUT3 _1717_ INIT 0x4b PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut252.push_back(ctx.genrate_lut(lut252idx0));
    flut252.push_back(lut252idx0);
    auto lut252idx1 = [](long I) -> long {
        /* GATE 308 (LUT3 _1764_ INIT 0x4f PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut252.push_back(ctx.genrate_lut(lut252idx1));
    flut252.push_back(lut252idx1);
    auto fvec252 = [flut252](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut252[i](I));
        return ret;
    };

    std::cerr << "\rLUT252   ";
    long gin252_clear = 1 * gout245_clear[0] + 2 * ct_y11_clear + 4 * gout181_clear[0];
    std::vector<long> gout252_clear = fvec252(gin252_clear);

    std::vector<RotationPoly> lut253;
    std::vector<long (*)(long)> flut253;
    auto lut253idx0 = [](long I) -> long {
        /* GATE 455 (LUT3 _1911_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut253.push_back(ctx.genrate_lut(lut253idx0));
    flut253.push_back(lut253idx0);
    auto lut253idx1 = [](long I) -> long {
        /* GATE 408 (LUT3 _1864_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut253.push_back(ctx.genrate_lut(lut253idx1));
    flut253.push_back(lut253idx1);
    auto fvec253 = [flut253](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut253[i](I));
        return ret;
    };

    std::cerr << "\rLUT253   ";
    long gin253_clear = 1 * gout227_clear[1] + 2 * gout224_clear[1] + 4 * gout226_clear[1];
    std::vector<long> gout253_clear = fvec253(gin253_clear);

    std::vector<RotationPoly> lut254;
    std::vector<long (*)(long)> flut254;
    auto lut254idx0 = [](long I) -> long {
        /* GATE 193 (LUT3 _1649_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut254.push_back(ctx.genrate_lut(lut254idx0));
    flut254.push_back(lut254idx0);
    auto lut254idx1 = [](long I) -> long {
        /* GATE 229 (LUT3 _1685_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut254.push_back(ctx.genrate_lut(lut254idx1));
    flut254.push_back(lut254idx1);
    auto fvec254 = [flut254](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut254[i](I));
        return ret;
    };

    std::cerr << "\rLUT254   ";
    long gin254_clear = 1 * gout225_clear[1] + 2 * gout240_clear[0] + 4 * gout235_clear[1];
    std::vector<long> gout254_clear = fvec254(gin254_clear);

    std::vector<RotationPoly> lut255;
    std::vector<long (*)(long)> flut255;
    auto lut255idx0 = [](long I) -> long {
        /* GATE 490 (LUT2 _1946_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut255.push_back(ctx.genrate_lut(lut255idx0));
    flut255.push_back(lut255idx0);
    auto lut255idx1 = [](long I) -> long {
        /* GATE 442 (LUT2 _1898_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut255.push_back(ctx.genrate_lut(lut255idx1));
    flut255.push_back(lut255idx1);
    auto fvec255 = [flut255](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut255[i](I));
        return ret;
    };

    std::cerr << "\rLUT255   ";
    long gin255_clear = 1 * gout234_clear[1] + 2 * gout114_clear[0];
    std::vector<long> gout255_clear = fvec255(gin255_clear);

    std::vector<RotationPoly> lut256;
    std::vector<long (*)(long)> flut256;
    auto lut256idx0 = [](long I) -> long {
        /* GATE 272 (LUT3 _1728_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut256.push_back(ctx.genrate_lut(lut256idx0));
    flut256.push_back(lut256idx0);
    auto lut256idx1 = [](long I) -> long {
        /* GATE 315 (LUT3 _1771_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut256.push_back(ctx.genrate_lut(lut256idx1));
    flut256.push_back(lut256idx1);
    auto fvec256 = [flut256](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut256[i](I));
        return ret;
    };

    std::cerr << "\rLUT256   ";
    long gin256_clear = 1 * gout217_clear[1] + 2 * gout239_clear[0] + 4 * gout210_clear[0];
    std::vector<long> gout256_clear = fvec256(gin256_clear);

    std::vector<RotationPoly> lut257;
    std::vector<long (*)(long)> flut257;
    auto lut257idx0 = [](long I) -> long {
        /* GATE 271 (LUT3 _1727_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut257.push_back(ctx.genrate_lut(lut257idx0));
    flut257.push_back(lut257idx0);
    auto lut257idx1 = [](long I) -> long {
        /* GATE 230 (LUT3 _1686_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut257.push_back(ctx.genrate_lut(lut257idx1));
    flut257.push_back(lut257idx1);
    auto fvec257 = [flut257](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut257[i](I));
        return ret;
    };

    std::cerr << "\rLUT257   ";
    long gin257_clear = 1 * gout240_clear[1] + 2 * gout217_clear[0] + 4 * gout203_clear[1];
    std::vector<long> gout257_clear = fvec257(gin257_clear);

    std::vector<RotationPoly> lut258;
    std::vector<long (*)(long)> flut258;
    auto lut258idx0 = [](long I) -> long {
        /* GATE 18 (LUT3 _1474_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut258.push_back(ctx.genrate_lut(lut258idx0));
    flut258.push_back(lut258idx0);
    auto fvec258 = [flut258](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut258[i](I));
        return ret;
    };

    std::cerr << "\rLUT258   ";
    long gin258_clear = 1 * gout172_clear[1] + 2 * gout231_clear[1] + 4 * gout195_clear[0];
    std::vector<long> gout258_clear = fvec258(gin258_clear);

    std::vector<RotationPoly> lut259;
    std::vector<long (*)(long)> flut259;
    auto lut259idx0 = [](long I) -> long {
        /* GATE 125 (LUT3 _1581_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut259.push_back(ctx.genrate_lut(lut259idx0));
    flut259.push_back(lut259idx0);
    auto lut259idx1 = [](long I) -> long {
        /* GATE 156 (LUT3 _1612_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut259.push_back(ctx.genrate_lut(lut259idx1));
    flut259.push_back(lut259idx1);
    auto fvec259 = [flut259](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut259[i](I));
        return ret;
    };

    std::cerr << "\rLUT259   ";
    long gin259_clear = 1 * gout206_clear[0] + 2 * gout215_clear[1] + 4 * gout198_clear[1];
    std::vector<long> gout259_clear = fvec259(gin259_clear);

    std::vector<RotationPoly> lut260;
    std::vector<long (*)(long)> flut260;
    auto lut260idx0 = [](long I) -> long {
        /* GATE 17 (LUT2 _1473_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut260.push_back(ctx.genrate_lut(lut260idx0));
    flut260.push_back(lut260idx0);
    auto fvec260 = [flut260](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut260[i](I));
        return ret;
    };

    std::cerr << "\rLUT260   ";
    long gin260_clear = 1 * gout258_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout260_clear = fvec260(gin260_clear);

    std::vector<RotationPoly> lut261;
    std::vector<long (*)(long)> flut261;
    auto lut261idx0 = [](long I) -> long {
        /* GATE 10 (LUT3 _1466_ INIT 0x4f PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut261.push_back(ctx.genrate_lut(lut261idx0));
    flut261.push_back(lut261idx0);
    auto fvec261 = [flut261](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut261[i](I));
        return ret;
    };

    std::cerr << "\rLUT261   ";
    long gin261_clear = 1 * gout194_clear[0] + 2 * gout237_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout261_clear = fvec261(gin261_clear);

    std::vector<RotationPoly> lut262;
    std::vector<long (*)(long)> flut262;
    auto lut262idx0 = [](long I) -> long {
        /* GATE 123 (LUT3 _1579_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut262.push_back(ctx.genrate_lut(lut262idx0));
    flut262.push_back(lut262idx0);
    auto lut262idx1 = [](long I) -> long {
        /* GATE 154 (LUT3 _1610_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut262.push_back(ctx.genrate_lut(lut262idx1));
    flut262.push_back(lut262idx1);
    auto fvec262 = [flut262](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut262[i](I));
        return ret;
    };

    std::cerr << "\rLUT262   ";
    long gin262_clear = 1 * gout233_clear[1] + 2 * gout259_clear[0] + 4 * gout186_clear[1];
    std::vector<long> gout262_clear = fvec262(gin262_clear);

    std::vector<RotationPoly> lut263;
    std::vector<long (*)(long)> flut263;
    auto lut263idx0 = [](long I) -> long {
        /* GATE 456 (LUT3 _1912_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut263.push_back(ctx.genrate_lut(lut263idx0));
    flut263.push_back(lut263idx0);
    auto fvec263 = [flut263](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut263[i](I));
        return ret;
    };

    std::cerr << "\rLUT263   ";
    long gin263_clear = 1 * gout238_clear[0] + 2 * gout204_clear[1] + 4 * gout131_clear[0];
    std::vector<long> gout263_clear = fvec263(gin263_clear);

    std::vector<RotationPoly> lut264;
    std::vector<long (*)(long)> flut264;
    auto lut264idx0 = [](long I) -> long {
        /* GATE 221 (LUT3 _1677_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut264.push_back(ctx.genrate_lut(lut264idx0));
    flut264.push_back(lut264idx0);
    auto lut264idx1 = [](long I) -> long {
        /* GATE 263 (LUT3 _1719_ INIT 0x60 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut264.push_back(ctx.genrate_lut(lut264idx1));
    flut264.push_back(lut264idx1);
    auto fvec264 = [flut264](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut264[i](I));
        return ret;
    };

    std::cerr << "\rLUT264   ";
    long gin264_clear = 1 * gout243_clear[0] + 2 * ct_x10_clear + 4 * ct_y10_clear;
    std::vector<long> gout264_clear = fvec264(gin264_clear);

    std::vector<RotationPoly> lut265;
    std::vector<long (*)(long)> flut265;
    auto lut265idx0 = [](long I) -> long {
        /* GATE 152 (LUT2 _1608_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut265.push_back(ctx.genrate_lut(lut265idx0));
    flut265.push_back(lut265idx0);
    auto lut265idx1 = [](long I) -> long {
        /* GATE 121 (LUT2 _1577_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut265.push_back(ctx.genrate_lut(lut265idx1));
    flut265.push_back(lut265idx1);
    auto fvec265 = [flut265](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut265[i](I));
        return ret;
    };

    std::cerr << "\rLUT265   ";
    long gin265_clear = 1 * gout249_clear[0] + 2 * gout262_clear[0];
    std::vector<long> gout265_clear = fvec265(gin265_clear);

    std::vector<RotationPoly> lut266;
    std::vector<long (*)(long)> flut266;
    auto lut266idx0 = [](long I) -> long {
        /* GATE 454 (LUT3 _1910_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut266.push_back(ctx.genrate_lut(lut266idx0));
    flut266.push_back(lut266idx0);
    auto fvec266 = [flut266](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut266[i](I));
        return ret;
    };

    std::cerr << "\rLUT266   ";
    long gin266_clear = 1 * gout253_clear[0] + 2 * gout263_clear[0] + 4 * gout247_clear[0];
    std::vector<long> gout266_clear = fvec266(gin266_clear);

    std::vector<RotationPoly> lut267;
    std::vector<long (*)(long)> flut267;
    auto lut267idx0 = [](long I) -> long {
        /* GATE 46 (LUT3 _1502_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut267.push_back(ctx.genrate_lut(lut267idx0));
    flut267.push_back(lut267idx0);
    auto lut267idx1 = [](long I) -> long {
        /* GATE 65 (LUT3 _1521_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut267.push_back(ctx.genrate_lut(lut267idx1));
    flut267.push_back(lut267idx1);
    auto fvec267 = [flut267](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut267[i](I));
        return ret;
    };

    std::cerr << "\rLUT267   ";
    long gin267_clear = 1 * gout241_clear[1] + 2 * gout221_clear[0] + 4 * ct_x4_clear;
    std::vector<long> gout267_clear = fvec267(gin267_clear);

    std::vector<RotationPoly> lut268;
    std::vector<long (*)(long)> flut268;
    auto lut268idx0 = [](long I) -> long {
        /* GATE 270 (LUT3 _1726_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut268.push_back(ctx.genrate_lut(lut268idx0));
    flut268.push_back(lut268idx0);
    auto lut268idx1 = [](long I) -> long {
        /* GATE 313 (LUT3 _1769_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut268.push_back(ctx.genrate_lut(lut268idx1));
    flut268.push_back(lut268idx1);
    auto fvec268 = [flut268](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut268[i](I));
        return ret;
    };

    std::cerr << "\rLUT268   ";
    long gin268_clear = 1 * gout257_clear[0] + 2 * gout256_clear[0] + 4 * gout203_clear[0];
    std::vector<long> gout268_clear = fvec268(gin268_clear);

    std::vector<RotationPoly> lut269;
    std::vector<long (*)(long)> flut269;
    auto lut269idx0 = [](long I) -> long {
        /* GATE 155 (LUT3 _1611_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut269.push_back(ctx.genrate_lut(lut269idx0));
    flut269.push_back(lut269idx0);
    auto lut269idx1 = [](long I) -> long {
        /* GATE 192 (LUT3 _1648_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut269.push_back(ctx.genrate_lut(lut269idx1));
    flut269.push_back(lut269idx1);
    auto fvec269 = [flut269](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut269[i](I));
        return ret;
    };

    std::cerr << "\rLUT269   ";
    long gin269_clear = 1 * gout259_clear[1] + 2 * gout225_clear[0] + 4 * gout198_clear[0];
    std::vector<long> gout269_clear = fvec269(gin269_clear);

    std::vector<RotationPoly> lut270;
    std::vector<long (*)(long)> flut270;
    auto lut270idx0 = [](long I) -> long {
        /* GATE 406 (LUT3 _1862_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut270.push_back(ctx.genrate_lut(lut270idx0));
    flut270.push_back(lut270idx0);
    auto lut270idx1 = [](long I) -> long {
        /* GATE 491 (LUT3 _1947_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut270.push_back(ctx.genrate_lut(lut270idx1));
    flut270.push_back(lut270idx1);
    auto fvec270 = [flut270](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut270[i](I));
        return ret;
    };

    std::cerr << "\rLUT270   ";
    long gin270_clear = 1 * gout236_clear[1] + 2 * gout253_clear[1] + 4 * gout255_clear[1];
    std::vector<long> gout270_clear = fvec270(gin270_clear);

    std::vector<RotationPoly> lut271;
    std::vector<long (*)(long)> flut271;
    auto lut271idx0 = [](long I) -> long {
        /* GATE 69 (LUT2 _1525_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut271.push_back(ctx.genrate_lut(lut271idx0));
    flut271.push_back(lut271idx0);
    auto lut271idx1 = [](long I) -> long {
        /* GATE 50 (LUT2 _1506_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut271.push_back(ctx.genrate_lut(lut271idx1));
    flut271.push_back(lut271idx1);
    auto fvec271 = [flut271](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut271[i](I));
        return ret;
    };

    std::cerr << "\rLUT271   ";
    long gin271_clear = 1 * gout244_clear[1] + 2 * gout232_clear[0];
    std::vector<long> gout271_clear = fvec271(gin271_clear);

    std::vector<RotationPoly> lut272;
    std::vector<long (*)(long)> flut272;
    auto lut272idx0 = [](long I) -> long {
        /* GATE 220 (LUT3 _1676_ INIT 0xe8 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut272.push_back(ctx.genrate_lut(lut272idx0));
    flut272.push_back(lut272idx0);
    auto fvec272 = [flut272](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut272[i](I));
        return ret;
    };

    std::cerr << "\rLUT272   ";
    long gin272_clear = 1 * gout243_clear[1] + 2 * ct_x9_clear + 4 * gout250_clear[1];
    std::vector<long> gout272_clear = fvec272(gin272_clear);

    std::vector<RotationPoly> lut273;
    std::vector<long (*)(long)> flut273;
    auto lut273idx0 = [](long I) -> long {
        /* GATE 316 (LUT3 _1772_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut273.push_back(ctx.genrate_lut(lut273idx0));
    flut273.push_back(lut273idx0);
    auto lut273idx1 = [](long I) -> long {
        /* GATE 361 (LUT3 _1817_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut273.push_back(ctx.genrate_lut(lut273idx1));
    flut273.push_back(lut273idx1);
    auto fvec273 = [flut273](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut273[i](I));
        return ret;
    };

    std::cerr << "\rLUT273   ";
    long gin273_clear = 1 * gout239_clear[1] + 2 * gout229_clear[1] + 4 * gout213_clear[0];
    std::vector<long> gout273_clear = fvec273(gin273_clear);

    std::vector<RotationPoly> lut274;
    std::vector<long (*)(long)> flut274;
    auto lut274idx0 = [](long I) -> long {
        /* GATE 92 (LUT2 _1548_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut274.push_back(ctx.genrate_lut(lut274idx0));
    flut274.push_back(lut274idx0);
    auto lut274idx1 = [](long I) -> long {
        /* GATE 68 (LUT2 _1524_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut274.push_back(ctx.genrate_lut(lut274idx1));
    flut274.push_back(lut274idx1);
    auto fvec274 = [flut274](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut274[i](I));
        return ret;
    };

    std::cerr << "\rLUT274   ";
    long gin274_clear = 1 * gout271_clear[0] + 2 * gout242_clear[0];
    std::vector<long> gout274_clear = fvec274(gin274_clear);

    std::vector<RotationPoly> lut275;
    std::vector<long (*)(long)> flut275;
    auto lut275idx0 = [](long I) -> long {
        /* GATE 228 (LUT3 _1684_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut275.push_back(ctx.genrate_lut(lut275idx0));
    flut275.push_back(lut275idx0);
    auto lut275idx1 = [](long I) -> long {
        /* GATE 269 (LUT3 _1725_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut275.push_back(ctx.genrate_lut(lut275idx1));
    flut275.push_back(lut275idx1);
    auto fvec275 = [flut275](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut275[i](I));
        return ret;
    };

    std::cerr << "\rLUT275   ";
    long gin275_clear = 1 * gout254_clear[1] + 2 * gout257_clear[1] + 4 * gout235_clear[0];
    std::vector<long> gout275_clear = fvec275(gin275_clear);

    std::vector<RotationPoly> lut276;
    std::vector<long (*)(long)> flut276;
    auto lut276idx0 = [](long I) -> long {
        /* GATE 314 (LUT3 _1770_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut276.push_back(ctx.genrate_lut(lut276idx0));
    flut276.push_back(lut276idx0);
    auto lut276idx1 = [](long I) -> long {
        /* GATE 359 (LUT3 _1815_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut276.push_back(ctx.genrate_lut(lut276idx1));
    flut276.push_back(lut276idx1);
    auto fvec276 = [flut276](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut276[i](I));
        return ret;
    };

    std::cerr << "\rLUT276   ";
    long gin276_clear = 1 * gout256_clear[1] + 2 * gout273_clear[0] + 4 * gout210_clear[1];
    std::vector<long> gout276_clear = fvec276(gin276_clear);

    std::vector<RotationPoly> lut277;
    std::vector<long (*)(long)> flut277;
    auto lut277idx0 = [](long I) -> long {
        /* GATE 453 (LUT3 _1909_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut277.push_back(ctx.genrate_lut(lut277idx0));
    flut277.push_back(lut277idx0);
    auto fvec277 = [flut277](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut277[i](I));
        return ret;
    };

    std::cerr << "\rLUT277   ";
    long gin277_clear = 1 * gout266_clear[0] + 2 * gout228_clear[0] + 4 * gout246_clear[0];
    std::vector<long> gout277_clear = fvec277(gin277_clear);

    std::vector<RotationPoly> lut278;
    std::vector<long (*)(long)> flut278;
    auto lut278idx0 = [](long I) -> long {
        /* GATE 153 (LUT2 _1609_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut278.push_back(ctx.genrate_lut(lut278idx0));
    flut278.push_back(lut278idx0);
    auto lut278idx1 = [](long I) -> long {
        /* GATE 190 (LUT2 _1646_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut278.push_back(ctx.genrate_lut(lut278idx1));
    flut278.push_back(lut278idx1);
    auto fvec278 = [flut278](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut278[i](I));
        return ret;
    };

    std::cerr << "\rLUT278   ";
    long gin278_clear = 1 * gout262_clear[1] + 2 * gout269_clear[0];
    std::vector<long> gout278_clear = fvec278(gin278_clear);

    std::vector<RotationPoly> lut279;
    std::vector<long (*)(long)> flut279;
    auto lut279idx0 = [](long I) -> long {
        /* GATE 30 (LUT3 _1486_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut279.push_back(ctx.genrate_lut(lut279idx0));
    flut279.push_back(lut279idx0);
    auto fvec279 = [flut279](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut279[i](I));
        return ret;
    };

    std::cerr << "\rLUT279   ";
    long gin279_clear = 1 * gout244_clear[0] + 2 * gout241_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout279_clear = fvec279(gin279_clear);

    std::vector<RotationPoly> lut280;
    std::vector<long (*)(long)> flut280;
    auto lut280idx0 = [](long I) -> long {
        /* GATE 360 (LUT3 _1816_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut280.push_back(ctx.genrate_lut(lut280idx0));
    flut280.push_back(lut280idx0);
    auto lut280idx1 = [](long I) -> long {
        /* GATE 405 (LUT3 _1861_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut280.push_back(ctx.genrate_lut(lut280idx1));
    flut280.push_back(lut280idx1);
    auto fvec280 = [flut280](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut280[i](I));
        return ret;
    };

    std::cerr << "\rLUT280   ";
    long gin280_clear = 1 * gout273_clear[1] + 2 * gout236_clear[0] + 4 * gout213_clear[1];
    std::vector<long> gout280_clear = fvec280(gin280_clear);

    std::vector<RotationPoly> lut281;
    std::vector<long (*)(long)> flut281;
    auto lut281idx0 = [](long I) -> long {
        /* GATE 307 (LUT2 _1763_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut281.push_back(ctx.genrate_lut(lut281idx0));
    flut281.push_back(lut281idx0);
    auto fvec281 = [flut281](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut281[i](I));
        return ret;
    };

    std::cerr << "\rLUT281   ";
    long gin281_clear = 1 * gout252_clear[1] + 2 * ct_y12_clear;
    std::vector<long> gout281_clear = fvec281(gin281_clear);

    std::vector<RotationPoly> lut282;
    std::vector<long (*)(long)> flut282;
    auto lut282idx0 = [](long I) -> long {
        /* GATE 188 (LUT2 _1644_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut282.push_back(ctx.genrate_lut(lut282idx0));
    flut282.push_back(lut282idx0);
    auto lut282idx1 = [](long I) -> long {
        /* GATE 151 (LUT2 _1607_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut282.push_back(ctx.genrate_lut(lut282idx1));
    flut282.push_back(lut282idx1);
    auto fvec282 = [flut282](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut282[i](I));
        return ret;
    };

    std::cerr << "\rLUT282   ";
    long gin282_clear = 1 * gout265_clear[0] + 2 * gout278_clear[0];
    std::vector<long> gout282_clear = fvec282(gin282_clear);

    std::vector<RotationPoly> lut283;
    std::vector<long (*)(long)> flut283;
    auto lut283idx0 = [](long I) -> long {
        /* GATE 312 (LUT2 _1768_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut283.push_back(ctx.genrate_lut(lut283idx0));
    flut283.push_back(lut283idx0);
    auto lut283idx1 = [](long I) -> long {
        /* GATE 357 (LUT2 _1813_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut283.push_back(ctx.genrate_lut(lut283idx1));
    flut283.push_back(lut283idx1);
    auto fvec283 = [flut283](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut283[i](I));
        return ret;
    };

    std::cerr << "\rLUT283   ";
    long gin283_clear = 1 * gout268_clear[1] + 2 * gout276_clear[0];
    std::vector<long> gout283_clear = fvec283(gin283_clear);

    std::vector<RotationPoly> lut284;
    std::vector<long (*)(long)> flut284;
    auto lut284idx0 = [](long I) -> long {
        /* GATE 93 (LUT2 _1549_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut284.push_back(ctx.genrate_lut(lut284idx0));
    flut284.push_back(lut284idx0);
    auto lut284idx1 = [](long I) -> long {
        /* GATE 120 (LUT2 _1576_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut284.push_back(ctx.genrate_lut(lut284idx1));
    flut284.push_back(lut284idx1);
    auto fvec284 = [flut284](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut284[i](I));
        return ret;
    };

    std::cerr << "\rLUT284   ";
    long gin284_clear = 1 * gout242_clear[1] + 2 * gout249_clear[1];
    std::vector<long> gout284_clear = fvec284(gin284_clear);

    std::vector<RotationPoly> lut285;
    std::vector<long (*)(long)> flut285;
    auto lut285idx0 = [](long I) -> long {
        /* GATE 260 (LUT2 _1716_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut285.push_back(ctx.genrate_lut(lut285idx0));
    flut285.push_back(lut285idx0);
    auto fvec285 = [flut285](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut285[i](I));
        return ret;
    };

    std::cerr << "\rLUT285   ";
    long gin285_clear = 1 * gout252_clear[0] + 2 * ct_x11_clear;
    std::vector<long> gout285_clear = fvec285(gin285_clear);

    std::vector<RotationPoly> lut286;
    std::vector<long (*)(long)> flut286;
    auto lut286idx0 = [](long I) -> long {
        /* GATE 29 (LUT2 _1485_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut286.push_back(ctx.genrate_lut(lut286idx0));
    flut286.push_back(lut286idx0);
    auto fvec286 = [flut286](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut286[i](I));
        return ret;
    };

    std::cerr << "\rLUT286   ";
    long gin286_clear = 1 * gout279_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout286_clear = fvec286(gin286_clear);

    std::vector<RotationPoly> lut287;
    std::vector<long (*)(long)> flut287;
    auto lut287idx0 = [](long I) -> long {
        /* GATE 403 (LUT2 _1859_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut287.push_back(ctx.genrate_lut(lut287idx0));
    flut287.push_back(lut287idx0);
    auto lut287idx1 = [](long I) -> long {
        /* GATE 358 (LUT2 _1814_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut287.push_back(ctx.genrate_lut(lut287idx1));
    flut287.push_back(lut287idx1);
    auto fvec287 = [flut287](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut287[i](I));
        return ret;
    };

    std::cerr << "\rLUT287   ";
    long gin287_clear = 1 * gout276_clear[1] + 2 * gout280_clear[0];
    std::vector<long> gout287_clear = fvec287(gin287_clear);

    std::vector<RotationPoly> lut288;
    std::vector<long (*)(long)> flut288;
    auto lut288idx0 = [](long I) -> long {
        /* GATE 119 (LUT2 _1575_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut288.push_back(ctx.genrate_lut(lut288idx0));
    flut288.push_back(lut288idx0);
    auto lut288idx1 = [](long I) -> long {
        /* GATE 91 (LUT2 _1547_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut288.push_back(ctx.genrate_lut(lut288idx1));
    flut288.push_back(lut288idx1);
    auto fvec288 = [flut288](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut288[i](I));
        return ret;
    };

    std::cerr << "\rLUT288   ";
    long gin288_clear = 1 * gout274_clear[0] + 2 * gout284_clear[0];
    std::vector<long> gout288_clear = fvec288(gin288_clear);

    std::vector<RotationPoly> lut289;
    std::vector<long (*)(long)> flut289;
    auto lut289idx0 = [](long I) -> long {
        /* GATE 353 (LUT3 _1809_ INIT 0xb0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut289.push_back(ctx.genrate_lut(lut289idx0));
    flut289.push_back(lut289idx0);
    auto fvec289 = [flut289](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut289[i](I));
        return ret;
    };

    std::cerr << "\rLUT289   ";
    long gin289_clear = 1 * gout252_clear[1] + 2 * ct_y12_clear + 4 * gout181_clear[0];
    std::vector<long> gout289_clear = fvec289(gin289_clear);

    std::vector<RotationPoly> lut290;
    std::vector<long (*)(long)> flut290;
    auto lut290idx0 = [](long I) -> long {
        /* GATE 45 (LUT3 _1501_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut290.push_back(ctx.genrate_lut(lut290idx0));
    flut290.push_back(lut290idx0);
    auto fvec290 = [flut290](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut290[i](I));
        return ret;
    };

    std::cerr << "\rLUT290   ";
    long gin290_clear = 1 * gout271_clear[1] + 2 * gout267_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout290_clear = fvec290(gin290_clear);

    std::vector<RotationPoly> lut291;
    std::vector<long (*)(long)> flut291;
    auto lut291idx0 = [](long I) -> long {
        /* GATE 149 (LUT2 _1605_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut291.push_back(ctx.genrate_lut(lut291idx0));
    flut291.push_back(lut291idx0);
    auto fvec291 = [flut291](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut291[i](I));
        return ret;
    };

    std::cerr << "\rLUT291   ";
    long gin291_clear = 1 * gout288_clear[0] + 2 * gout265_clear[1];
    std::vector<long> gout291_clear = fvec291(gin291_clear);

    std::vector<RotationPoly> lut292;
    std::vector<long (*)(long)> flut292;
    auto lut292idx0 = [](long I) -> long {
        /* GATE 306 (LUT3 _1762_ INIT 0xb2 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut292.push_back(ctx.genrate_lut(lut292idx0));
    flut292.push_back(lut292idx0);
    auto fvec292 = [flut292](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut292[i](I));
        return ret;
    };

    std::cerr << "\rLUT292   ";
    long gin292_clear = 1 * gout252_clear[0] + 2 * ct_x11_clear + 4 * gout264_clear[1];
    std::vector<long> gout292_clear = fvec292(gin292_clear);

    std::vector<RotationPoly> lut293;
    std::vector<long (*)(long)> flut293;
    auto lut293idx0 = [](long I) -> long {
        /* GATE 227 (LUT2 _1683_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut293.push_back(ctx.genrate_lut(lut293idx0));
    flut293.push_back(lut293idx0);
    auto lut293idx1 = [](long I) -> long {
        /* GATE 191 (LUT2 _1647_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut293.push_back(ctx.genrate_lut(lut293idx1));
    flut293.push_back(lut293idx1);
    auto fvec293 = [flut293](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut293[i](I));
        return ret;
    };

    std::cerr << "\rLUT293   ";
    long gin293_clear = 1 * gout269_clear[1] + 2 * gout254_clear[0];
    std::vector<long> gout293_clear = fvec293(gin293_clear);

    std::vector<RotationPoly> lut294;
    std::vector<long (*)(long)> flut294;
    auto lut294idx0 = [](long I) -> long {
        /* GATE 311 (LUT2 _1767_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut294.push_back(ctx.genrate_lut(lut294idx0));
    flut294.push_back(lut294idx0);
    auto lut294idx1 = [](long I) -> long {
        /* GATE 268 (LUT2 _1724_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut294.push_back(ctx.genrate_lut(lut294idx1));
    flut294.push_back(lut294idx1);
    auto fvec294 = [flut294](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut294[i](I));
        return ret;
    };

    std::cerr << "\rLUT294   ";
    long gin294_clear = 1 * gout275_clear[1] + 2 * gout268_clear[0];
    std::vector<long> gout294_clear = fvec294(gin294_clear);

    std::vector<RotationPoly> lut295;
    std::vector<long (*)(long)> flut295;
    auto lut295idx0 = [](long I) -> long {
        /* GATE 44 (LUT2 _1500_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut295.push_back(ctx.genrate_lut(lut295idx0));
    flut295.push_back(lut295idx0);
    auto fvec295 = [flut295](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut295[i](I));
        return ret;
    };

    std::cerr << "\rLUT295   ";
    long gin295_clear = 1 * gout290_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout295_clear = fvec295(gin295_clear);

    std::vector<RotationPoly> lut296;
    std::vector<long (*)(long)> flut296;
    auto lut296idx0 = [](long I) -> long {
        /* GATE 150 (LUT2 _1606_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut296.push_back(ctx.genrate_lut(lut296idx0));
    flut296.push_back(lut296idx0);
    auto fvec296 = [flut296](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut296[i](I));
        return ret;
    };

    std::cerr << "\rLUT296   ";
    long gin296_clear = 1 * gout284_clear[1] + 2 * gout265_clear[1];
    std::vector<long> gout296_clear = fvec296(gin296_clear);

    std::vector<RotationPoly> lut297;
    std::vector<long (*)(long)> flut297;
    auto lut297idx0 = [](long I) -> long {
        /* GATE 400 (LUT3 _1856_ INIT 0xf8 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut297.push_back(ctx.genrate_lut(lut297idx0));
    flut297.push_back(lut297idx0);
    auto lut297idx1 = [](long I) -> long {
        /* GATE 352 (LUT2 _1808_ INIT 0x9 PERM 02) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut297.push_back(ctx.genrate_lut(lut297idx1));
    flut297.push_back(lut297idx1);
    auto fvec297 = [flut297](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut297[i](I));
        return ret;
    };

    std::cerr << "\rLUT297   ";
    long gin297_clear = 1 * gout289_clear[0] + 2 * gout181_clear[0] + 4 * ct_y13_clear;
    std::vector<long> gout297_clear = fvec297(gin297_clear);

    std::vector<RotationPoly> lut298;
    std::vector<long (*)(long)> flut298;
    auto lut298idx0 = [](long I) -> long {
        /* GATE 356 (LUT2 _1812_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut298.push_back(ctx.genrate_lut(lut298idx0));
    flut298.push_back(lut298idx0);
    auto fvec298 = [flut298](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut298[i](I));
        return ret;
    };

    std::cerr << "\rLUT298   ";
    long gin298_clear = 1 * gout283_clear[1] + 2 * gout287_clear[1];
    std::vector<long> gout298_clear = fvec298(gin298_clear);

    std::vector<RotationPoly> lut299;
    std::vector<long (*)(long)> flut299;
    auto lut299idx0 = [](long I) -> long {
        /* GATE 267 (LUT2 _1723_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut299.push_back(ctx.genrate_lut(lut299idx0));
    flut299.push_back(lut299idx0);
    auto lut299idx1 = [](long I) -> long {
        /* GATE 226 (LUT2 _1682_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut299.push_back(ctx.genrate_lut(lut299idx1));
    flut299.push_back(lut299idx1);
    auto fvec299 = [flut299](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut299[i](I));
        return ret;
    };

    std::cerr << "\rLUT299   ";
    long gin299_clear = 1 * gout293_clear[0] + 2 * gout275_clear[0];
    std::vector<long> gout299_clear = fvec299(gin299_clear);

    std::vector<RotationPoly> lut300;
    std::vector<long (*)(long)> flut300;
    auto lut300idx0 = [](long I) -> long {
        /* GATE 88 (LUT3 _1544_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut300.push_back(ctx.genrate_lut(lut300idx0));
    flut300.push_back(lut300idx0);
    auto lut300idx1 = [](long I) -> long {
        /* GATE 64 (LUT3 _1520_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut300.push_back(ctx.genrate_lut(lut300idx1));
    flut300.push_back(lut300idx1);
    auto fvec300 = [flut300](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut300[i](I));
        return ret;
    };

    std::cerr << "\rLUT300   ";
    long gin300_clear = 1 * gout267_clear[1] + 2 * gout184_clear[1] + 4 * ct_x5_clear;
    std::vector<long> gout300_clear = fvec300(gin300_clear);

    std::vector<RotationPoly> lut301;
    std::vector<long (*)(long)> flut301;
    auto lut301idx0 = [](long I) -> long {
        /* GATE 225 (LUT2 _1681_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut301.push_back(ctx.genrate_lut(lut301idx0));
    flut301.push_back(lut301idx0);
    auto lut301idx1 = [](long I) -> long {
        /* GATE 189 (LUT2 _1645_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut301.push_back(ctx.genrate_lut(lut301idx1));
    flut301.push_back(lut301idx1);
    auto fvec301 = [flut301](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut301[i](I));
        return ret;
    };

    std::cerr << "\rLUT301   ";
    long gin301_clear = 1 * gout278_clear[1] + 2 * gout293_clear[1];
    std::vector<long> gout301_clear = fvec301(gin301_clear);

    std::vector<RotationPoly> lut302;
    std::vector<long (*)(long)> flut302;
    auto lut302idx0 = [](long I) -> long {
        /* GATE 113 (LUT3 _1569_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut302.push_back(ctx.genrate_lut(lut302idx0));
    flut302.push_back(lut302idx0);
    auto lut302idx1 = [](long I) -> long {
        /* GATE 87 (LUT3 _1543_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut302.push_back(ctx.genrate_lut(lut302idx1));
    flut302.push_back(lut302idx1);
    auto fvec302 = [flut302](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut302[i](I));
        return ret;
    };

    std::cerr << "\rLUT302   ";
    long gin302_clear = 1 * gout300_clear[0] + 2 * gout192_clear[0] + 4 * ct_x6_clear;
    std::vector<long> gout302_clear = fvec302(gin302_clear);

    std::vector<RotationPoly> lut303;
    std::vector<long (*)(long)> flut303;
    auto lut303idx0 = [](long I) -> long {
        /* GATE 63 (LUT3 _1519_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut303.push_back(ctx.genrate_lut(lut303idx0));
    flut303.push_back(lut303idx0);
    auto fvec303 = [flut303](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut303[i](I));
        return ret;
    };

    std::cerr << "\rLUT303   ";
    long gin303_clear = 1 * gout274_clear[1] + 2 * gout300_clear[1] + 4 * gout195_clear[0];
    std::vector<long> gout303_clear = fvec303(gin303_clear);

    std::vector<RotationPoly> lut304;
    std::vector<long (*)(long)> flut304;
    auto lut304idx0 = [](long I) -> long {
        /* GATE 489 (LUT3 _1945_ INIT 0x4b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut304.push_back(ctx.genrate_lut(lut304idx0));
    flut304.push_back(lut304idx0);
    auto lut304idx1 = [](long I) -> long {
        /* GATE 404 (LUT2 _1860_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut304.push_back(ctx.genrate_lut(lut304idx1));
    flut304.push_back(lut304idx1);
    auto fvec304 = [flut304](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut304[i](I));
        return ret;
    };

    std::cerr << "\rLUT304   ";
    long gin304_clear = 1 * gout280_clear[1] + 2 * gout270_clear[0] + 4 * gout255_clear[0];
    std::vector<long> gout304_clear = fvec304(gin304_clear);

    std::vector<RotationPoly> lut305;
    std::vector<long (*)(long)> flut305;
    auto lut305idx0 = [](long I) -> long {
        /* GATE 145 (LUT3 _1601_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut305.push_back(ctx.genrate_lut(lut305idx0));
    flut305.push_back(lut305idx0);
    auto fvec305 = [flut305](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut305[i](I));
        return ret;
    };

    std::cerr << "\rLUT305   ";
    long gin305_clear = 1 * gout302_clear[0] + 2 * gout207_clear[0] + 4 * ct_x7_clear;
    std::vector<long> gout305_clear = fvec305(gin305_clear);

    std::vector<RotationPoly> lut306;
    std::vector<long (*)(long)> flut306;
    auto lut306idx0 = [](long I) -> long {
        /* GATE 266 (LUT2 _1722_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut306.push_back(ctx.genrate_lut(lut306idx0));
    flut306.push_back(lut306idx0);
    auto fvec306 = [flut306](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut306[i](I));
        return ret;
    };

    std::cerr << "\rLUT306   ";
    long gin306_clear = 1 * gout299_clear[0] + 2 * gout294_clear[1];
    std::vector<long> gout306_clear = fvec306(gin306_clear);

    std::vector<RotationPoly> lut307;
    std::vector<long (*)(long)> flut307;
    auto lut307idx0 = [](long I) -> long {
        /* GATE 399 (LUT2 _1855_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut307.push_back(ctx.genrate_lut(lut307idx0));
    flut307.push_back(lut307idx0);
    auto fvec307 = [flut307](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut307[i](I));
        return ret;
    };

    std::cerr << "\rLUT307   ";
    long gin307_clear = 1 * gout297_clear[0] + 2 * ct_y14_clear;
    std::vector<long> gout307_clear = fvec307(gin307_clear);

    std::vector<RotationPoly> lut308;
    std::vector<long (*)(long)> flut308;
    auto lut308idx0 = [](long I) -> long {
        /* GATE 187 (LUT2 _1643_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut308.push_back(ctx.genrate_lut(lut308idx0));
    flut308.push_back(lut308idx0);
    auto fvec308 = [flut308](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut308[i](I));
        return ret;
    };

    std::cerr << "\rLUT308   ";
    long gin308_clear = 1 * gout282_clear[0] + 2 * gout301_clear[1];
    std::vector<long> gout308_clear = fvec308(gin308_clear);

    std::vector<RotationPoly> lut309;
    std::vector<long (*)(long)> flut309;
    auto lut309idx0 = [](long I) -> long {
        /* GATE 351 (LUT2 _1807_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut309.push_back(ctx.genrate_lut(lut309idx0));
    flut309.push_back(lut309idx0);
    auto fvec309 = [flut309](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut309[i](I));
        return ret;
    };

    std::cerr << "\rLUT309   ";
    long gin309_clear = 1 * gout297_clear[1] + 2 * ct_x13_clear;
    std::vector<long> gout309_clear = fvec309(gin309_clear);

    std::vector<RotationPoly> lut310;
    std::vector<long (*)(long)> flut310;
    auto lut310idx0 = [](long I) -> long {
        /* GATE 118 (LUT3 _1574_ INIT 0x1e PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut310.push_back(ctx.genrate_lut(lut310idx0));
    flut310.push_back(lut310idx0);
    auto fvec310 = [flut310](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut310[i](I));
        return ret;
    };

    std::cerr << "\rLUT310   ";
    long gin310_clear = 1 * gout288_clear[0] + 2 * gout284_clear[1] + 4 * gout265_clear[1];
    std::vector<long> gout310_clear = fvec310(gin310_clear);

    std::vector<RotationPoly> lut311;
    std::vector<long (*)(long)> flut311;
    auto lut311idx0 = [](long I) -> long {
        /* GATE 449 (LUT3 _1905_ INIT 0xe0 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut311.push_back(ctx.genrate_lut(lut311idx0));
    flut311.push_back(lut311idx0);
    auto fvec311 = [flut311](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut311[i](I));
        return ret;
    };

    std::cerr << "\rLUT311   ";
    long gin311_clear = 1 * gout297_clear[0] + 2 * gout181_clear[0] + 4 * ct_y14_clear;
    std::vector<long> gout311_clear = fvec311(gin311_clear);

    std::vector<RotationPoly> lut312;
    std::vector<long (*)(long)> flut312;
    auto lut312idx0 = [](long I) -> long {
        /* GATE 62 (LUT2 _1518_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut312.push_back(ctx.genrate_lut(lut312idx0));
    flut312.push_back(lut312idx0);
    auto fvec312 = [flut312](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut312[i](I));
        return ret;
    };

    std::cerr << "\rLUT312   ";
    long gin312_clear = 1 * gout303_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout312_clear = fvec312(gin312_clear);

    std::vector<RotationPoly> lut313;
    std::vector<long (*)(long)> flut313;
    auto lut313idx0 = [](long I) -> long {
        /* GATE 219 (LUT3 _1675_ INIT 0x40 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut313.push_back(ctx.genrate_lut(lut313idx0));
    flut313.push_back(lut313idx0);
    auto lut313idx1 = [](long I) -> long {
        /* GATE 144 (LUT2 _1600_ INIT 0x9 PERM 12) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut313.push_back(ctx.genrate_lut(lut313idx1));
    flut313.push_back(lut313idx1);
    auto fvec313 = [flut313](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut313[i](I));
        return ret;
    };

    std::cerr << "\rLUT313   ";
    long gin313_clear = 1 * gout251_clear[0] + 2 * gout305_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout313_clear = fvec313(gin313_clear);

    std::vector<RotationPoly> lut314;
    std::vector<long (*)(long)> flut314;
    auto lut314idx0 = [](long I) -> long {
        /* GATE 148 (LUT3 _1604_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut314.push_back(ctx.genrate_lut(lut314idx0));
    flut314.push_back(lut314idx0);
    auto lut314idx1 = [](long I) -> long {
        /* GATE 186 (LUT3 _1642_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut314.push_back(ctx.genrate_lut(lut314idx1));
    flut314.push_back(lut314idx1);
    auto fvec314 = [flut314](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut314[i](I));
        return ret;
    };

    std::cerr << "\rLUT314   ";
    long gin314_clear = 1 * gout291_clear[0] + 2 * gout296_clear[0] + 4 * gout282_clear[1];
    std::vector<long> gout314_clear = fvec314(gin314_clear);

    std::vector<RotationPoly> lut315;
    std::vector<long (*)(long)> flut315;
    auto lut315idx0 = [](long I) -> long {
        /* GATE 452 (LUT3 _1908_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut315.push_back(ctx.genrate_lut(lut315idx0));
    flut315.push_back(lut315idx0);
    auto fvec315 = [flut315](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut315[i](I));
        return ret;
    };

    std::cerr << "\rLUT315   ";
    long gin315_clear = 1 * gout277_clear[0] + 2 * gout304_clear[0] + 4 * gout270_clear[1];
    std::vector<long> gout315_clear = fvec315(gin315_clear);

    std::vector<RotationPoly> lut316;
    std::vector<long (*)(long)> flut316;
    auto lut316idx0 = [](long I) -> long {
        /* GATE 112 (LUT3 _1568_ INIT 0x14 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut316.push_back(ctx.genrate_lut(lut316idx0));
    flut316.push_back(lut316idx0);
    auto fvec316 = [flut316](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut316[i](I));
        return ret;
    };

    std::cerr << "\rLUT316   ";
    long gin316_clear = 1 * gout214_clear[0] + 2 * gout302_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout316_clear = fvec316(gin316_clear);

    std::vector<RotationPoly> lut317;
    std::vector<long (*)(long)> flut317;
    auto lut317idx0 = [](long I) -> long {
        /* GATE 218 (LUT3 _1674_ INIT 0x1e PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut317.push_back(ctx.genrate_lut(lut317idx0));
    flut317.push_back(lut317idx0);
    auto lut317idx1 = [](long I) -> long {
        /* GATE 259 (LUT3 _1715_ INIT 0xe0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut317.push_back(ctx.genrate_lut(lut317idx1));
    flut317.push_back(lut317idx1);
    auto fvec317 = [flut317](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut317[i](I));
        return ret;
    };

    std::cerr << "\rLUT317   ";
    long gin317_clear = 1 * gout313_clear[0] + 2 * gout272_clear[0] + 4 * gout264_clear[0];
    std::vector<long> gout317_clear = fvec317(gin317_clear);

    std::vector<RotationPoly> lut318;
    std::vector<long (*)(long)> flut318;
    auto lut318idx0 = [](long I) -> long {
        /* GATE 180 (LUT3 _1636_ INIT 0xd PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut318.push_back(ctx.genrate_lut(lut318idx0));
    flut318.push_back(lut318idx0);
    auto fvec318 = [flut318](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut318[i](I));
        return ret;
    };

    std::cerr << "\rLUT318   ";
    long gin318_clear = 1 * gout250_clear[1] + 2 * gout305_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout318_clear = fvec318(gin318_clear);

    std::vector<RotationPoly> lut319;
    std::vector<long (*)(long)> flut319;
    auto lut319idx0 = [](long I) -> long {
        /* GATE 117 (LUT2 _1573_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut319.push_back(ctx.genrate_lut(lut319idx0));
    flut319.push_back(lut319idx0);
    auto fvec319 = [flut319](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut319[i](I));
        return ret;
    };

    std::cerr << "\rLUT319   ";
    long gin319_clear = 1 * gout310_clear[0] + 2 * gout195_clear[0];
    std::vector<long> gout319_clear = fvec319(gin319_clear);

    std::vector<RotationPoly> lut320;
    std::vector<long (*)(long)> flut320;
    auto lut320idx0 = [](long I) -> long {
        /* GATE 86 (LUT3 _1542_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut320.push_back(ctx.genrate_lut(lut320idx0));
    flut320.push_back(lut320idx0);
    auto fvec320 = [flut320](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut320[i](I));
        return ret;
    };

    std::cerr << "\rLUT320   ";
    long gin320_clear = 1 * gout288_clear[1] + 2 * gout302_clear[1] + 4 * gout195_clear[0];
    std::vector<long> gout320_clear = fvec320(gin320_clear);

    std::vector<RotationPoly> lut321;
    std::vector<long (*)(long)> flut321;
    auto lut321idx0 = [](long I) -> long {
        /* GATE 111 (LUT3 _1567_ INIT 0xf1 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut321.push_back(ctx.genrate_lut(lut321idx0));
    flut321.push_back(lut321idx0);
    auto fvec321 = [flut321](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut321[i](I));
        return ret;
    };

    std::cerr << "\rLUT321   ";
    long gin321_clear = 1 * gout319_clear[0] + 2 * gout316_clear[0] + 4 * gout230_clear[0];
    std::vector<long> gout321_clear = fvec321(gin321_clear);

    std::vector<RotationPoly> lut322;
    std::vector<long (*)(long)> flut322;
    auto lut322idx0 = [](long I) -> long {
        /* GATE 305 (LUT3 _1761_ INIT 0x7 PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut322.push_back(ctx.genrate_lut(lut322idx0));
    flut322.push_back(lut322idx0);
    auto fvec322 = [flut322](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut322[i](I));
        return ret;
    };

    std::cerr << "\rLUT322   ";
    long gin322_clear = 1 * gout292_clear[0] + 2 * gout317_clear[1] + 4 * gout285_clear[0];
    std::vector<long> gout322_clear = fvec322(gin322_clear);

    std::vector<RotationPoly> lut323;
    std::vector<long (*)(long)> flut323;
    auto lut323idx0 = [](long I) -> long {
        /* GATE 185 (LUT3 _1641_ INIT 0x90 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut323.push_back(ctx.genrate_lut(lut323idx0));
    flut323.push_back(lut323idx0);
    auto fvec323 = [flut323](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut323[i](I));
        return ret;
    };

    std::cerr << "\rLUT323   ";
    long gin323_clear = 1 * gout314_clear[1] + 2 * gout308_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout323_clear = fvec323(gin323_clear);

    std::vector<RotationPoly> lut324;
    std::vector<long (*)(long)> flut324;
    auto lut324idx0 = [](long I) -> long {
        /* GATE 224 (LUT3 _1680_ INIT 0x2b PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut324.push_back(ctx.genrate_lut(lut324idx0));
    flut324.push_back(lut324idx0);
    auto fvec324 = [flut324](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut324[i](I));
        return ret;
    };

    std::cerr << "\rLUT324   ";
    long gin324_clear = 1 * gout282_clear[0] + 2 * gout301_clear[1] + 4 * gout314_clear[1];
    std::vector<long> gout324_clear = fvec324(gin324_clear);

    std::vector<RotationPoly> lut325;
    std::vector<long (*)(long)> flut325;
    auto lut325idx0 = [](long I) -> long {
        /* GATE 85 (LUT2 _1541_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut325.push_back(ctx.genrate_lut(lut325idx0));
    flut325.push_back(lut325idx0);
    auto fvec325 = [flut325](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut325[i](I));
        return ret;
    };

    std::cerr << "\rLUT325   ";
    long gin325_clear = 1 * gout320_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout325_clear = fvec325(gin325_clear);

    std::vector<RotationPoly> lut326;
    std::vector<long (*)(long)> flut326;
    auto lut326idx0 = [](long I) -> long {
        /* GATE 223 (LUT3 _1679_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut326.push_back(ctx.genrate_lut(lut326idx0));
    flut326.push_back(lut326idx0);
    auto lut326idx1 = [](long I) -> long {
        /* GATE 265 (LUT3 _1721_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut326.push_back(ctx.genrate_lut(lut326idx1));
    flut326.push_back(lut326idx1);
    auto fvec326 = [flut326](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut326[i](I));
        return ret;
    };

    std::cerr << "\rLUT326   ";
    long gin326_clear = 1 * gout324_clear[0] + 2 * gout301_clear[0] + 4 * gout299_clear[1];
    std::vector<long> gout326_clear = fvec326(gin326_clear);

    std::vector<RotationPoly> lut327;
    std::vector<long (*)(long)> flut327;
    auto lut327idx0 = [](long I) -> long {
        /* GATE 448 (LUT3 _1904_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut327.push_back(ctx.genrate_lut(lut327idx0));
    flut327.push_back(lut327idx0);
    auto fvec327 = [flut327](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut327[i](I));
        return ret;
    };

    std::cerr << "\rLUT327   ";
    long gin327_clear = 1 * gout311_clear[0] + 2 * ct_x15_clear + 4 * ct_y15_clear;
    std::vector<long> gout327_clear = fvec327(gin327_clear);

    std::vector<RotationPoly> lut328;
    std::vector<long (*)(long)> flut328;
    auto lut328idx0 = [](long I) -> long {
        /* GATE 179 (LUT2 _1635_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut328.push_back(ctx.genrate_lut(lut328idx0));
    flut328.push_back(lut328idx0);
    auto fvec328 = [flut328](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut328[i](I));
        return ret;
    };

    std::cerr << "\rLUT328   ";
    long gin328_clear = 1 * gout318_clear[0] + 2 * gout251_clear[0];
    std::vector<long> gout328_clear = fvec328(gin328_clear);

    std::vector<RotationPoly> lut329;
    std::vector<long (*)(long)> flut329;
    auto lut329idx0 = [](long I) -> long {
        /* GATE 143 (LUT3 _1599_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut329.push_back(ctx.genrate_lut(lut329idx0));
    flut329.push_back(lut329idx0);
    auto fvec329 = [flut329](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut329[i](I));
        return ret;
    };

    std::cerr << "\rLUT329   ";
    long gin329_clear = 1 * gout314_clear[0] + 2 * gout313_clear[1] + 4 * gout195_clear[0];
    std::vector<long> gout329_clear = fvec329(gin329_clear);

    std::vector<RotationPoly> lut330;
    std::vector<long (*)(long)> flut330;
    auto lut330idx0 = [](long I) -> long {
        /* GATE 258 (LUT3 _1714_ INIT 0x1e PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut330.push_back(ctx.genrate_lut(lut330idx0));
    flut330.push_back(lut330idx0);
    auto fvec330 = [flut330](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut330[i](I));
        return ret;
    };

    std::cerr << "\rLUT330   ";
    long gin330_clear = 1 * gout317_clear[1] + 2 * gout264_clear[1] + 4 * gout285_clear[0];
    std::vector<long> gout330_clear = fvec330(gin330_clear);

    std::vector<RotationPoly> lut331;
    std::vector<long (*)(long)> flut331;
    auto lut331idx0 = [](long I) -> long {
        /* GATE 257 (LUT3 _1713_ INIT 0xb PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut331.push_back(ctx.genrate_lut(lut331idx0));
    flut331.push_back(lut331idx0);
    auto fvec331 = [flut331](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut331[i](I));
        return ret;
    };

    std::cerr << "\rLUT331   ";
    long gin331_clear = 1 * gout330_clear[0] + 2 * gout195_clear[0] + 4 * gout230_clear[0];
    std::vector<long> gout331_clear = fvec331(gin331_clear);

    std::vector<RotationPoly> lut332;
    std::vector<long (*)(long)> flut332;
    auto lut332idx0 = [](long I) -> long {
        /* GATE 217 (LUT3 _1673_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut332.push_back(ctx.genrate_lut(lut332idx0));
    flut332.push_back(lut332idx0);
    auto fvec332 = [flut332](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut332[i](I));
        return ret;
    };

    std::cerr << "\rLUT332   ";
    long gin332_clear = 1 * gout326_clear[0] + 2 * gout317_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout332_clear = fvec332(gin332_clear);

    std::vector<RotationPoly> lut333;
    std::vector<long (*)(long)> flut333;
    auto lut333idx0 = [](long I) -> long {
        /* GATE 350 (LUT3 _1806_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut333.push_back(ctx.genrate_lut(lut333idx0));
    flut333.push_back(lut333idx0);
    auto lut333idx1 = [](long I) -> long {
        /* GATE 304 (LUT3 _1760_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut333.push_back(ctx.genrate_lut(lut333idx1));
    flut333.push_back(lut333idx1);
    auto fvec333 = [flut333](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut333[i](I));
        return ret;
    };

    std::cerr << "\rLUT333   ";
    long gin333_clear = 1 * gout322_clear[0] + 2 * gout281_clear[0] + 4 * ct_x12_clear;
    std::vector<long> gout333_clear = fvec333(gin333_clear);

    std::vector<RotationPoly> lut334;
    std::vector<long (*)(long)> flut334;
    auto lut334idx0 = [](long I) -> long {
        /* GATE 142 (LUT2 _1598_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut334.push_back(ctx.genrate_lut(lut334idx0));
    flut334.push_back(lut334idx0);
    auto fvec334 = [flut334](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut334[i](I));
        return ret;
    };

    std::cerr << "\rLUT334   ";
    long gin334_clear = 1 * gout329_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout334_clear = fvec334(gin334_clear);

    std::vector<RotationPoly> lut335;
    std::vector<long (*)(long)> flut335;
    auto lut335idx0 = [](long I) -> long {
        /* GATE 264 (LUT3 _1720_ INIT 0x90 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut335.push_back(ctx.genrate_lut(lut335idx0));
    flut335.push_back(lut335idx0);
    auto fvec335 = [flut335](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut335[i](I));
        return ret;
    };

    std::cerr << "\rLUT335   ";
    long gin335_clear = 1 * gout326_clear[1] + 2 * gout306_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout335_clear = fvec335(gin335_clear);

    std::vector<RotationPoly> lut336;
    std::vector<long (*)(long)> flut336;
    auto lut336idx0 = [](long I) -> long {
        /* GATE 349 (LUT3 _1805_ INIT 0x41 PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut336.push_back(ctx.genrate_lut(lut336idx0));
    flut336.push_back(lut336idx0);
    auto fvec336 = [flut336](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut336[i](I));
        return ret;
    };

    std::cerr << "\rLUT336   ";
    long gin336_clear = 1 * gout309_clear[0] + 2 * gout333_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout336_clear = fvec336(gin336_clear);

    std::vector<RotationPoly> lut337;
    std::vector<long (*)(long)> flut337;
    auto lut337idx0 = [](long I) -> long {
        /* GATE 310 (LUT3 _1766_ INIT 0x2b PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut337.push_back(ctx.genrate_lut(lut337idx0));
    flut337.push_back(lut337idx0);
    auto fvec337 = [flut337](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut337[i](I));
        return ret;
    };

    std::cerr << "\rLUT337   ";
    long gin337_clear = 1 * gout299_clear[0] + 2 * gout294_clear[1] + 4 * gout326_clear[1];
    std::vector<long> gout337_clear = fvec337(gin337_clear);

    std::vector<RotationPoly> lut338;
    std::vector<long (*)(long)> flut338;
    auto lut338idx0 = [](long I) -> long {
        /* GATE 309 (LUT3 _1765_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut338.push_back(ctx.genrate_lut(lut338idx0));
    flut338.push_back(lut338idx0);
    auto lut338idx1 = [](long I) -> long {
        /* GATE 355 (LUT3 _1811_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut338.push_back(ctx.genrate_lut(lut338idx1));
    flut338.push_back(lut338idx1);
    auto fvec338 = [flut338](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut338[i](I));
        return ret;
    };

    std::cerr << "\rLUT338   ";
    long gin338_clear = 1 * gout337_clear[0] + 2 * gout294_clear[0] + 4 * gout283_clear[0];
    std::vector<long> gout338_clear = fvec338(gin338_clear);

    std::vector<RotationPoly> lut339;
    std::vector<long (*)(long)> flut339;
    auto lut339idx0 = [](long I) -> long {
        /* GATE 178 (LUT3 _1634_ INIT 0xb PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut339.push_back(ctx.genrate_lut(lut339idx0));
    flut339.push_back(lut339idx0);
    auto fvec339 = [flut339](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut339[i](I));
        return ret;
    };

    std::cerr << "\rLUT339   ";
    long gin339_clear = 1 * gout328_clear[0] + 2 * gout195_clear[0] + 4 * gout230_clear[0];
    std::vector<long> gout339_clear = fvec339(gin339_clear);

    std::vector<RotationPoly> lut340;
    std::vector<long (*)(long)> flut340;
    auto lut340idx0 = [](long I) -> long {
        /* GATE 216 (LUT2 _1672_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut340.push_back(ctx.genrate_lut(lut340idx0));
    flut340.push_back(lut340idx0);
    auto fvec340 = [flut340](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut340[i](I));
        return ret;
    };

    std::cerr << "\rLUT340   ";
    long gin340_clear = 1 * gout332_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout340_clear = fvec340(gin340_clear);

    std::vector<RotationPoly> lut341;
    std::vector<long (*)(long)> flut341;
    auto lut341idx0 = [](long I) -> long {
        /* GATE 354 (LUT3 _1810_ INIT 0x90 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut341.push_back(ctx.genrate_lut(lut341idx0));
    flut341.push_back(lut341idx0);
    auto fvec341 = [flut341](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut341[i](I));
        return ret;
    };

    std::cerr << "\rLUT341   ";
    long gin341_clear = 1 * gout298_clear[0] + 2 * gout338_clear[1] + 4 * gout195_clear[0];
    std::vector<long> gout341_clear = fvec341(gin341_clear);

    std::vector<RotationPoly> lut342;
    std::vector<long (*)(long)> flut342;
    auto lut342idx0 = [](long I) -> long {
        /* GATE 398 (LUT3 _1854_ INIT 0xb2 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut342.push_back(ctx.genrate_lut(lut342idx0));
    flut342.push_back(lut342idx0);
    auto fvec342 = [flut342](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut342[i](I));
        return ret;
    };

    std::cerr << "\rLUT342   ";
    long gin342_clear = 1 * gout333_clear[0] + 2 * gout297_clear[1] + 4 * ct_x13_clear;
    std::vector<long> gout342_clear = fvec342(gin342_clear);

    std::vector<RotationPoly> lut343;
    std::vector<long (*)(long)> flut343;
    auto lut343idx0 = [](long I) -> long {
        /* GATE 303 (LUT3 _1759_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut343.push_back(ctx.genrate_lut(lut343idx0));
    flut343.push_back(lut343idx0);
    auto fvec343 = [flut343](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut343[i](I));
        return ret;
    };

    std::cerr << "\rLUT343   ";
    long gin343_clear = 1 * gout338_clear[0] + 2 * gout333_clear[1] + 4 * gout195_clear[0];
    std::vector<long> gout343_clear = fvec343(gin343_clear);

    std::vector<RotationPoly> lut344;
    std::vector<long (*)(long)> flut344;
    auto lut344idx0 = [](long I) -> long {
        /* GATE 397 (LUT3 _1853_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut344.push_back(ctx.genrate_lut(lut344idx0));
    flut344.push_back(lut344idx0);
    auto lut344idx1 = [](long I) -> long {
        /* GATE 447 (LUT3 _1903_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut344.push_back(ctx.genrate_lut(lut344idx1));
    flut344.push_back(lut344idx1);
    auto fvec344 = [flut344](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut344[i](I));
        return ret;
    };

    std::cerr << "\rLUT344   ";
    long gin344_clear = 1 * gout342_clear[0] + 2 * gout307_clear[0] + 4 * ct_x14_clear;
    std::vector<long> gout344_clear = fvec344(gin344_clear);

    std::vector<RotationPoly> lut345;
    std::vector<long (*)(long)> flut345;
    auto lut345idx0 = [](long I) -> long {
        /* GATE 256 (LUT2 _1712_ INIT 0xb PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut345.push_back(ctx.genrate_lut(lut345idx0));
    flut345.push_back(lut345idx0);
    auto fvec345 = [flut345](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut345[i](I));
        return ret;
    };

    std::cerr << "\rLUT345   ";
    long gin345_clear = 1 * gout335_clear[0] + 2 * gout331_clear[0];
    std::vector<long> gout345_clear = fvec345(gin345_clear);

    std::vector<RotationPoly> lut346;
    std::vector<long (*)(long)> flut346;
    auto lut346idx0 = [](long I) -> long {
        /* GATE 402 (LUT3 _1858_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut346.push_back(ctx.genrate_lut(lut346idx0));
    flut346.push_back(lut346idx0);
    auto fvec346 = [flut346](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut346[i](I));
        return ret;
    };

    std::cerr << "\rLUT346   ";
    long gin346_clear = 1 * gout338_clear[1] + 2 * gout283_clear[1] + 4 * gout287_clear[1];
    std::vector<long> gout346_clear = fvec346(gin346_clear);

    std::vector<RotationPoly> lut347;
    std::vector<long (*)(long)> flut347;
    auto lut347idx0 = [](long I) -> long {
        /* GATE 451 (LUT3 _1907_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut347.push_back(ctx.genrate_lut(lut347idx0));
    flut347.push_back(lut347idx0);
    auto lut347idx1 = [](long I) -> long {
        /* GATE 401 (LUT3 _1857_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut347.push_back(ctx.genrate_lut(lut347idx1));
    flut347.push_back(lut347idx1);
    auto fvec347 = [flut347](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut347[i](I));
        return ret;
    };

    std::cerr << "\rLUT347   ";
    long gin347_clear = 1 * gout346_clear[0] + 2 * gout287_clear[0] + 4 * gout304_clear[1];
    std::vector<long> gout347_clear = fvec347(gin347_clear);

    std::vector<RotationPoly> lut348;
    std::vector<long (*)(long)> flut348;
    auto lut348idx0 = [](long I) -> long {
        /* GATE 177 (LUT2 _1633_ INIT 0xb PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut348.push_back(ctx.genrate_lut(lut348idx0));
    flut348.push_back(lut348idx0);
    auto fvec348 = [flut348](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut348[i](I));
        return ret;
    };

    std::cerr << "\rLUT348   ";
    long gin348_clear = 1 * gout323_clear[0] + 2 * gout339_clear[0];
    std::vector<long> gout348_clear = fvec348(gin348_clear);

    std::vector<RotationPoly> lut349;
    std::vector<long (*)(long)> flut349;
    auto lut349idx0 = [](long I) -> long {
        /* GATE 348 (LUT3 _1804_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut349.push_back(ctx.genrate_lut(lut349idx0));
    flut349.push_back(lut349idx0);
    auto fvec349 = [flut349](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut349[i](I));
        return ret;
    };

    std::cerr << "\rLUT349   ";
    long gin349_clear = 1 * gout336_clear[0] + 2 * gout341_clear[0] + 4 * gout230_clear[0];
    std::vector<long> gout349_clear = fvec349(gin349_clear);

    std::vector<RotationPoly> lut350;
    std::vector<long (*)(long)> flut350;
    auto lut350idx0 = [](long I) -> long {
        /* GATE 302 (LUT2 _1758_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut350.push_back(ctx.genrate_lut(lut350idx0));
    flut350.push_back(lut350idx0);
    auto fvec350 = [flut350](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut350[i](I));
        return ret;
    };

    std::cerr << "\rLUT350   ";
    long gin350_clear = 1 * gout343_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout350_clear = fvec350(gin350_clear);

    std::vector<RotationPoly> lut351;
    std::vector<long (*)(long)> flut351;
    auto lut351idx0 = [](long I) -> long {
        /* GATE 446 (LUT3 _1902_ INIT 0x41 PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut351.push_back(ctx.genrate_lut(lut351idx0));
    flut351.push_back(lut351idx0);
    auto fvec351 = [flut351](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut351[i](I));
        return ret;
    };

    std::cerr << "\rLUT351   ";
    long gin351_clear = 1 * gout327_clear[0] + 2 * gout344_clear[1] + 4 * gout195_clear[0];
    std::vector<long> gout351_clear = fvec351(gin351_clear);

    std::vector<RotationPoly> lut352;
    std::vector<long (*)(long)> flut352;
    auto lut352idx0 = [](long I) -> long {
        /* GATE 450 (LUT3 _1906_ INIT 0x60 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut352.push_back(ctx.genrate_lut(lut352idx0));
    flut352.push_back(lut352idx0);
    auto fvec352 = [flut352](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut352[i](I));
        return ret;
    };

    std::cerr << "\rLUT352   ";
    long gin352_clear = 1 * gout347_clear[0] + 2 * gout315_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout352_clear = fvec352(gin352_clear);

    std::vector<RotationPoly> lut353;
    std::vector<long (*)(long)> flut353;
    auto lut353idx0 = [](long I) -> long {
        /* GATE 396 (LUT3 _1852_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut353.push_back(ctx.genrate_lut(lut353idx0));
    flut353.push_back(lut353idx0);
    auto fvec353 = [flut353](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut353[i](I));
        return ret;
    };

    std::cerr << "\rLUT353   ";
    long gin353_clear = 1 * gout347_clear[1] + 2 * gout344_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout353_clear = fvec353(gin353_clear);

    std::vector<RotationPoly> lut354;
    std::vector<long (*)(long)> flut354;
    auto lut354idx0 = [](long I) -> long {
        /* GATE 445 (LUT3 _1901_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut354.push_back(ctx.genrate_lut(lut354idx0));
    flut354.push_back(lut354idx0);
    auto fvec354 = [flut354](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut354[i](I));
        return ret;
    };

    std::cerr << "\rLUT354   ";
    long gin354_clear = 1 * gout351_clear[0] + 2 * gout352_clear[0] + 4 * gout230_clear[0];
    std::vector<long> gout354_clear = fvec354(gin354_clear);

    std::vector<RotationPoly> lut355;
    std::vector<long (*)(long)> flut355;
    auto lut355idx0 = [](long I) -> long {
        /* GATE 395 (LUT2 _1851_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut355.push_back(ctx.genrate_lut(lut355idx0));
    flut355.push_back(lut355idx0);
    auto fvec355 = [flut355](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut355[i](I));
        return ret;
    };

    std::cerr << "\rLUT355   ";
    long gin355_clear = 1 * gout353_clear[0] + 2 * gout230_clear[0];
    std::vector<long> gout355_clear = fvec355(gin355_clear);

    std::cerr << "\r          \r";
    std::vector<long> out;
    out.push_back(gout248_clear[0]); /* out0 */
    out.push_back(gout261_clear[0]); /* out1 */
    out.push_back(gout260_clear[0]); /* out2 */
    out.push_back(gout286_clear[0]); /* out3 */
    out.push_back(gout295_clear[0]); /* out4 */
    out.push_back(gout312_clear[0]); /* out5 */
    out.push_back(gout325_clear[0]); /* out6 */
    out.push_back(gout321_clear[0]); /* out7 */
    out.push_back(gout334_clear[0]); /* out8 */
    out.push_back(gout348_clear[0]); /* out9 */
    out.push_back(gout340_clear[0]); /* out10 */
    out.push_back(gout345_clear[0]); /* out11 */
    out.push_back(gout350_clear[0]); /* out12 */
    out.push_back(gout349_clear[0]); /* out13 */
    out.push_back(gout355_clear[0]); /* out14 */
    out.push_back(gout354_clear[0]); /* out15 */
    return out;
}

std::vector<long>
test_sqrt_lut3(FHEContext& ctx, uint16_t num)
{
    long ct_num0_clear = (num >> 0) & 1;
    long ct_num1_clear = (num >> 1) & 1;
    long ct_num2_clear = (num >> 2) & 1;
    long ct_num3_clear = (num >> 3) & 1;
    long ct_num4_clear = (num >> 4) & 1;
    long ct_num5_clear = (num >> 5) & 1;
    long ct_num6_clear = (num >> 6) & 1;
    long ct_num7_clear = (num >> 7) & 1;
    long ct_num8_clear = (num >> 8) & 1;
    long ct_num9_clear = (num >> 9) & 1;
    long ct_num10_clear = (num >> 10) & 1;
    long ct_num11_clear = (num >> 11) & 1;
    long ct_num12_clear = (num >> 12) & 1;
    long ct_num13_clear = (num >> 13) & 1;
    long ct_num14_clear = (num >> 14) & 1;
    long ct_num15_clear = (num >> 15) & 1;

    std::vector<RotationPoly> decomp;
    std::vector<long (*)(long)> fdecomp;
    auto decomp0 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp0));
    fdecomp.push_back(decomp0);
    auto decomp1 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp1));
    fdecomp.push_back(decomp1);
    auto decomp2 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp2));
    fdecomp.push_back(decomp2);
    auto vdecomp = [fdecomp](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 3; ++i)
            ret.push_back(fdecomp[i](I));
        return ret;
    };

    std::vector<RotationPoly> lut0;
    std::vector<long (*)(long)> flut0;
    auto lut0idx0 = [](long I) -> long {
        /* GATE 30 (LUT2 _327_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut0.push_back(ctx.genrate_lut(lut0idx0));
    flut0.push_back(lut0idx0);
    auto fvec0 = [flut0](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut0[i](I));
        return ret;
    };

    std::cerr << "\rLUT0   ";
    long gin0_clear = 1 * ct_num9_clear + 2 * ct_num8_clear;
    std::vector<long> gout0_clear = fvec0(gin0_clear);

    std::vector<RotationPoly> lut1;
    std::vector<long (*)(long)> flut1;
    auto lut1idx0 = [](long I) -> long {
        /* GATE 66 (LUT2 _363_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut1.push_back(ctx.genrate_lut(lut1idx0));
    flut1.push_back(lut1idx0);
    auto fvec1 = [flut1](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut1[i](I));
        return ret;
    };

    std::cerr << "\rLUT1   ";
    long gin1_clear = 1 * ct_num0_clear + 2 * ct_num1_clear;
    std::vector<long> gout1_clear = fvec1(gin1_clear);

    std::vector<RotationPoly> lut2;
    std::vector<long (*)(long)> flut2;
    auto lut2idx0 = [](long I) -> long {
        /* GATE 20 (LUT2 _317_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut2.push_back(ctx.genrate_lut(lut2idx0));
    flut2.push_back(lut2idx0);
    auto lut2idx1 = [](long I) -> long {
        /* GATE 21 (LUT2 _318_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut2.push_back(ctx.genrate_lut(lut2idx1));
    flut2.push_back(lut2idx1);
    auto fvec2 = [flut2](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut2[i](I));
        return ret;
    };

    std::cerr << "\rLUT2   ";
    long gin2_clear = 1 * ct_num14_clear + 2 * ct_num15_clear;
    std::vector<long> gout2_clear = fvec2(gin2_clear);

    std::vector<RotationPoly> lut3;
    std::vector<long (*)(long)> flut3;
    auto lut3idx0 = [](long I) -> long {
        /* GATE 31 (LUT3 _328_ INIT 0xe0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut3.push_back(ctx.genrate_lut(lut3idx0));
    flut3.push_back(lut3idx0);
    auto lut3idx1 = [](long I) -> long {
        /* GATE 19 (LUT3 _316_ INIT 0xb0 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut3.push_back(ctx.genrate_lut(lut3idx1));
    flut3.push_back(lut3idx1);
    auto lut3idx2 = [](long I) -> long {
        /* GATE 25 (LUT3 _322_ INIT 0xd3 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut3.push_back(ctx.genrate_lut(lut3idx2));
    flut3.push_back(lut3idx2);
    auto fvec3 = [flut3](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 3; ++i)
            ret.push_back(flut3[i](I));
        return ret;
    };

    std::cerr << "\rLUT3   ";
    long gin3_clear = 1 * ct_num13_clear + 2 * ct_num12_clear + 4 * gout2_clear[0];
    std::vector<long> gout3_clear = fvec3(gin3_clear);

    std::vector<RotationPoly> lut4;
    std::vector<long (*)(long)> flut4;
    auto lut4idx0 = [](long I) -> long {
        /* GATE 24 (LUT2 _321_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut4.push_back(ctx.genrate_lut(lut4idx0));
    flut4.push_back(lut4idx0);
    auto fvec4 = [flut4](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut4[i](I));
        return ret;
    };

    std::cerr << "\rLUT4   ";
    long gin4_clear = 1 * ct_num13_clear + 2 * ct_num15_clear;
    std::vector<long> gout4_clear = fvec4(gin4_clear);

    std::vector<RotationPoly> lut5;
    std::vector<long (*)(long)> flut5;
    auto lut5idx0 = [](long I) -> long {
        /* GATE 54 (LUT2 _351_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut5.push_back(ctx.genrate_lut(lut5idx0));
    flut5.push_back(lut5idx0);
    auto fvec5 = [flut5](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut5[i](I));
        return ret;
    };

    std::cerr << "\rLUT5   ";
    long gin5_clear = 1 * ct_num3_clear + 2 * ct_num2_clear;
    std::vector<long> gout5_clear = fvec5(gin5_clear);

    std::vector<RotationPoly> lut6;
    std::vector<long (*)(long)> flut6;
    auto lut6idx0 = [](long I) -> long {
        /* GATE 42 (LUT2 _339_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut6.push_back(ctx.genrate_lut(lut6idx0));
    flut6.push_back(lut6idx0);
    auto fvec6 = [flut6](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut6[i](I));
        return ret;
    };

    std::cerr << "\rLUT6   ";
    long gin6_clear = 1 * ct_num5_clear + 2 * ct_num4_clear;
    std::vector<long> gout6_clear = fvec6(gin6_clear);

    std::vector<RotationPoly> lut7;
    std::vector<long (*)(long)> flut7;
    auto lut7idx0 = [](long I) -> long {
        /* GATE 22 (LUT2 _319_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut7.push_back(ctx.genrate_lut(lut7idx0));
    flut7.push_back(lut7idx0);
    auto fvec7 = [flut7](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut7[i](I));
        return ret;
    };

    std::cerr << "\rLUT7   ";
    long gin7_clear = 1 * ct_num11_clear + 2 * ct_num10_clear;
    std::vector<long> gout7_clear = fvec7(gin7_clear);

    std::vector<RotationPoly> lut8;
    std::vector<long (*)(long)> flut8;
    auto lut8idx0 = [](long I) -> long {
        /* GATE 35 (LUT2 _332_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut8.push_back(ctx.genrate_lut(lut8idx0));
    flut8.push_back(lut8idx0);
    auto fvec8 = [flut8](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut8[i](I));
        return ret;
    };

    std::cerr << "\rLUT8   ";
    long gin8_clear = 1 * ct_num7_clear + 2 * ct_num6_clear;
    std::vector<long> gout8_clear = fvec8(gin8_clear);

    std::vector<RotationPoly> lut9;
    std::vector<long (*)(long)> flut9;
    auto lut9idx0 = [](long I) -> long {
        /* GATE 23 (LUT3 _320_ INIT 0xb PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut9.push_back(ctx.genrate_lut(lut9idx0));
    flut9.push_back(lut9idx0);
    auto fvec9 = [flut9](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut9[i](I));
        return ret;
    };

    std::cerr << "\rLUT9   ";
    long gin9_clear = 1 * gout4_clear[0] + 2 * ct_num12_clear + 4 * gout2_clear[0];
    std::vector<long> gout9_clear = fvec9(gin9_clear);

    std::vector<RotationPoly> lut10;
    std::vector<long (*)(long)> flut10;
    auto lut10idx0 = [](long I) -> long {
        /* GATE 26 (LUT3 _323_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut10.push_back(ctx.genrate_lut(lut10idx0));
    flut10.push_back(lut10idx0);
    auto fvec10 = [flut10](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut10[i](I));
        return ret;
    };

    std::cerr << "\rLUT10   ";
    long gin10_clear = 1 * gout7_clear[0] + 2 * gout4_clear[0] + 4 * ct_num12_clear;
    std::vector<long> gout10_clear = fvec10(gin10_clear);

    std::vector<RotationPoly> lut11;
    std::vector<long (*)(long)> flut11;
    auto lut11idx0 = [](long I) -> long {
        /* GATE 18 (LUT3 _315_ INIT 0xb PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut11.push_back(ctx.genrate_lut(lut11idx0));
    flut11.push_back(lut11idx0);
    auto fvec11 = [flut11](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut11[i](I));
        return ret;
    };

    std::cerr << "\rLUT11   ";
    long gin11_clear = 1 * gout9_clear[0] + 2 * gout7_clear[0] + 4 * ct_num12_clear;
    std::vector<long> gout11_clear = fvec11(gin11_clear);

    std::vector<RotationPoly> lut12;
    std::vector<long (*)(long)> flut12;
    auto lut12idx0 = [](long I) -> long {
        /* GATE 17 (LUT3 _314_ INIT 0xe PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut12.push_back(ctx.genrate_lut(lut12idx0));
    flut12.push_back(lut12idx0);
    auto fvec12 = [flut12](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut12[i](I));
        return ret;
    };

    std::cerr << "\rLUT12   ";
    long gin12_clear = 1 * gout3_clear[2] + 2 * gout10_clear[0] + 4 * gout11_clear[0];
    std::vector<long> gout12_clear = fvec12(gin12_clear);

    std::vector<RotationPoly> lut13;
    std::vector<long (*)(long)> flut13;
    auto lut13idx0 = [](long I) -> long {
        /* GATE 33 (LUT2 _330_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut13.push_back(ctx.genrate_lut(lut13idx0));
    flut13.push_back(lut13idx0);
    auto fvec13 = [flut13](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut13[i](I));
        return ret;
    };

    std::cerr << "\rLUT13   ";
    long gin13_clear = 1 * gout3_clear[1] + 2 * gout11_clear[0];
    std::vector<long> gout13_clear = fvec13(gin13_clear);

    std::vector<RotationPoly> lut14;
    std::vector<long (*)(long)> flut14;
    auto lut14idx0 = [](long I) -> long {
        /* GATE 28 (LUT3 _325_ INIT 0x4b PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut14.push_back(ctx.genrate_lut(lut14idx0));
    flut14.push_back(lut14idx0);
    auto fvec14 = [flut14](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut14[i](I));
        return ret;
    };

    std::cerr << "\rLUT14   ";
    long gin14_clear = 1 * ct_num11_clear + 2 * ct_num10_clear + 4 * gout11_clear[0];
    std::vector<long> gout14_clear = fvec14(gin14_clear);

    std::vector<RotationPoly> lut15;
    std::vector<long (*)(long)> flut15;
    auto lut15idx0 = [](long I) -> long {
        /* GATE 29 (LUT3 _326_ INIT 0xca PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut15.push_back(ctx.genrate_lut(lut15idx0));
    flut15.push_back(lut15idx0);
    auto fvec15 = [flut15](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut15[i](I));
        return ret;
    };

    std::cerr << "\rLUT15   ";
    long gin15_clear = 1 * gout0_clear[0] + 2 * ct_num10_clear + 4 * gout11_clear[0];
    std::vector<long> gout15_clear = fvec15(gin15_clear);

    std::vector<RotationPoly> lut16;
    std::vector<long (*)(long)> flut16;
    auto lut16idx0 = [](long I) -> long {
        /* GATE 38 (LUT3 _335_ INIT 0x69 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut16.push_back(ctx.genrate_lut(lut16idx0));
    flut16.push_back(lut16idx0);
    auto lut16idx1 = [](long I) -> long {
        /* GATE 27 (LUT3 _324_ INIT 0xe8 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut16.push_back(ctx.genrate_lut(lut16idx1));
    flut16.push_back(lut16idx1);
    auto fvec16 = [flut16](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut16[i](I));
        return ret;
    };

    std::cerr << "\rLUT16   ";
    long gin16_clear = 1 * gout15_clear[0] + 2 * gout14_clear[0] + 4 * gout3_clear[0];
    std::vector<long> gout16_clear = fvec16(gin16_clear);

    std::vector<RotationPoly> lut17;
    std::vector<long (*)(long)> flut17;
    auto lut17idx0 = [](long I) -> long {
        /* GATE 32 (LUT3 _329_ INIT 0xe PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut17.push_back(ctx.genrate_lut(lut17idx0));
    flut17.push_back(lut17idx0);
    auto fvec17 = [flut17](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut17[i](I));
        return ret;
    };

    std::cerr << "\rLUT17   ";
    long gin17_clear = 1 * gout13_clear[0] + 2 * gout12_clear[0] + 4 * gout2_clear[1];
    std::vector<long> gout17_clear = fvec17(gin17_clear);

    std::vector<RotationPoly> lut18;
    std::vector<long (*)(long)> flut18;
    auto lut18idx0 = [](long I) -> long {
        /* GATE 89 (LUT3 _386_ INIT 0xeb PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut18.push_back(ctx.genrate_lut(lut18idx0));
    flut18.push_back(lut18idx0);
    auto fvec18 = [flut18](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut18[i](I));
        return ret;
    };

    std::cerr << "\rLUT18   ";
    long gin18_clear = 1 * gout16_clear[1] + 2 * gout12_clear[0] + 4 * ct_num14_clear;
    std::vector<long> gout18_clear = fvec18(gin18_clear);

    std::vector<RotationPoly> lut19;
    std::vector<long (*)(long)> flut19;
    auto lut19idx0 = [](long I) -> long {
        /* GATE 90 (LUT3 _387_ INIT 0x7 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut19.push_back(ctx.genrate_lut(lut19idx0));
    flut19.push_back(lut19idx0);
    auto fvec19 = [flut19](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut19[i](I));
        return ret;
    };

    std::cerr << "\rLUT19   ";
    long gin19_clear = 1 * gout18_clear[0] + 2 * gout17_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout19_clear = fvec19(gin19_clear);

    std::vector<RotationPoly> lut20;
    std::vector<long (*)(long)> flut20;
    auto lut20idx0 = [](long I) -> long {
        /* GATE 16 (LUT3 _313_ INIT 0xb4 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut20.push_back(ctx.genrate_lut(lut20idx0));
    flut20.push_back(lut20idx0);
    auto fvec20 = [flut20](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut20[i](I));
        return ret;
    };

    std::cerr << "\rLUT20   ";
    long gin20_clear = 1 * ct_num9_clear + 2 * ct_num8_clear + 4 * gout19_clear[0];
    std::vector<long> gout20_clear = fvec20(gin20_clear);

    std::vector<RotationPoly> lut21;
    std::vector<long (*)(long)> flut21;
    auto lut21idx0 = [](long I) -> long {
        /* GATE 34 (LUT3 _331_ INIT 0xca PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut21.push_back(ctx.genrate_lut(lut21idx0));
    flut21.push_back(lut21idx0);
    auto fvec21 = [flut21](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut21[i](I));
        return ret;
    };

    std::cerr << "\rLUT21   ";
    long gin21_clear = 1 * gout8_clear[0] + 2 * ct_num8_clear + 4 * gout19_clear[0];
    std::vector<long> gout21_clear = fvec21(gin21_clear);

    std::vector<RotationPoly> lut22;
    std::vector<long (*)(long)> flut22;
    auto lut22idx0 = [](long I) -> long {
        /* GATE 91 (LUT3 _388_ INIT 0xac PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut22.push_back(ctx.genrate_lut(lut22idx0));
    flut22.push_back(lut22idx0);
    auto fvec22 = [flut22](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut22[i](I));
        return ret;
    };

    std::cerr << "\rLUT22   ";
    long gin22_clear = 1 * gout0_clear[0] + 2 * gout19_clear[0] + 4 * gout11_clear[0];
    std::vector<long> gout22_clear = fvec22(gin22_clear);

    std::vector<RotationPoly> lut23;
    std::vector<long (*)(long)> flut23;
    auto lut23idx0 = [](long I) -> long {
        /* GATE 37 (LUT3 _334_ INIT 0x3a PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut23.push_back(ctx.genrate_lut(lut23idx0));
    flut23.push_back(lut23idx0);
    auto fvec23 = [flut23](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut23[i](I));
        return ret;
    };

    std::cerr << "\rLUT23   ";
    long gin23_clear = 1 * gout14_clear[0] + 2 * gout16_clear[0] + 4 * gout19_clear[0];
    std::vector<long> gout23_clear = fvec23(gin23_clear);

    std::vector<RotationPoly> lut24;
    std::vector<long (*)(long)> flut24;
    auto lut24idx0 = [](long I) -> long {
        /* GATE 92 (LUT2 _389_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut24.push_back(ctx.genrate_lut(lut24idx0));
    flut24.push_back(lut24idx0);
    auto fvec24 = [flut24](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut24[i](I));
        return ret;
    };

    std::cerr << "\rLUT24   ";
    long gin24_clear = 1 * ct_num10_clear + 2 * gout22_clear[0];
    std::vector<long> gout24_clear = fvec24(gin24_clear);

    std::vector<RotationPoly> lut25;
    std::vector<long (*)(long)> flut25;
    auto lut25idx0 = [](long I) -> long {
        /* GATE 15 (LUT3 _312_ INIT 0xd4 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut25.push_back(ctx.genrate_lut(lut25idx0));
    flut25.push_back(lut25idx0);
    auto lut25idx1 = [](long I) -> long {
        /* GATE 44 (LUT3 _341_ INIT 0x96 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut25.push_back(ctx.genrate_lut(lut25idx1));
    flut25.push_back(lut25idx1);
    auto fvec25 = [flut25](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut25[i](I));
        return ret;
    };

    std::cerr << "\rLUT25   ";
    long gin25_clear = 1 * gout21_clear[0] + 2 * gout20_clear[0] + 4 * gout11_clear[0];
    std::vector<long> gout25_clear = fvec25(gin25_clear);

    std::vector<RotationPoly> lut26;
    std::vector<long (*)(long)> flut26;
    auto lut26idx0 = [](long I) -> long {
        /* GATE 47 (LUT3 _344_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut26.push_back(ctx.genrate_lut(lut26idx0));
    flut26.push_back(lut26idx0);
    auto lut26idx1 = [](long I) -> long {
        /* GATE 14 (LUT3 _311_ INIT 0xe8 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut26.push_back(ctx.genrate_lut(lut26idx1));
    flut26.push_back(lut26idx1);
    auto fvec26 = [flut26](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut26[i](I));
        return ret;
    };

    std::cerr << "\rLUT26   ";
    long gin26_clear = 1 * gout25_clear[0] + 2 * gout24_clear[0] + 4 * gout3_clear[0];
    std::vector<long> gout26_clear = fvec26(gin26_clear);

    std::vector<RotationPoly> lut27;
    std::vector<long (*)(long)> flut27;
    auto lut27idx0 = [](long I) -> long {
        /* GATE 36 (LUT2 _333_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut27.push_back(ctx.genrate_lut(lut27idx0));
    flut27.push_back(lut27idx0);
    auto fvec27 = [flut27](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut27[i](I));
        return ret;
    };

    std::cerr << "\rLUT27   ";
    long gin27_clear = 1 * gout23_clear[0] + 2 * gout2_clear[1];
    std::vector<long> gout27_clear = fvec27(gin27_clear);

    std::vector<RotationPoly> lut28;
    std::vector<long (*)(long)> flut28;
    auto lut28idx0 = [](long I) -> long {
        /* GATE 40 (LUT3 _337_ INIT 0x43 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut28.push_back(ctx.genrate_lut(lut28idx0));
    flut28.push_back(lut28idx0);
    auto fvec28 = [flut28](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut28[i](I));
        return ret;
    };

    std::cerr << "\rLUT28   ";
    long gin28_clear = 1 * gout12_clear[0] + 2 * gout27_clear[0] + 4 * gout19_clear[0];
    std::vector<long> gout28_clear = fvec28(gin28_clear);

    std::vector<RotationPoly> lut29;
    std::vector<long (*)(long)> flut29;
    auto lut29idx0 = [](long I) -> long {
        /* GATE 87 (LUT3 _384_ INIT 0xe8 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut29.push_back(ctx.genrate_lut(lut29idx0));
    flut29.push_back(lut29idx0);
    auto fvec29 = [flut29](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut29[i](I));
        return ret;
    };

    std::cerr << "\rLUT29   ";
    long gin29_clear = 1 * gout26_clear[1] + 2 * gout23_clear[0] + 4 * gout2_clear[1];
    std::vector<long> gout29_clear = fvec29(gin29_clear);

    std::vector<RotationPoly> lut30;
    std::vector<long (*)(long)> flut30;
    auto lut30idx0 = [](long I) -> long {
        /* GATE 39 (LUT3 _336_ INIT 0x7 PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut30.push_back(ctx.genrate_lut(lut30idx0));
    flut30.push_back(lut30idx0);
    auto fvec30 = [flut30](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut30[i](I));
        return ret;
    };

    std::cerr << "\rLUT30   ";
    long gin30_clear = 1 * gout3_clear[1] + 2 * gout28_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout30_clear = fvec30(gin30_clear);

    std::vector<RotationPoly> lut31;
    std::vector<long (*)(long)> flut31;
    auto lut31idx0 = [](long I) -> long {
        /* GATE 88 (LUT3 _385_ INIT 0x7 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut31.push_back(ctx.genrate_lut(lut31idx0));
    flut31.push_back(lut31idx0);
    auto fvec31 = [flut31](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut31[i](I));
        return ret;
    };

    std::cerr << "\rLUT31   ";
    long gin31_clear = 1 * gout30_clear[0] + 2 * gout29_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout31_clear = fvec31(gin31_clear);

    std::vector<RotationPoly> lut32;
    std::vector<long (*)(long)> flut32;
    auto lut32idx0 = [](long I) -> long {
        /* GATE 49 (LUT3 _346_ INIT 0x60 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut32.push_back(ctx.genrate_lut(lut32idx0));
    flut32.push_back(lut32idx0);
    auto fvec32 = [flut32](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut32[i](I));
        return ret;
    };

    std::cerr << "\rLUT32   ";
    long gin32_clear = 1 * gout26_clear[1] + 2 * gout27_clear[0] + 4 * gout31_clear[0];
    std::vector<long> gout32_clear = fvec32(gin32_clear);

    std::vector<RotationPoly> lut33;
    std::vector<long (*)(long)> flut33;
    auto lut33idx0 = [](long I) -> long {
        /* GATE 48 (LUT3 _345_ INIT 0xd PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut33.push_back(ctx.genrate_lut(lut33idx0));
    flut33.push_back(lut33idx0);
    auto fvec33 = [flut33](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut33[i](I));
        return ret;
    };

    std::cerr << "\rLUT33   ";
    long gin33_clear = 1 * gout23_clear[0] + 2 * gout32_clear[0] + 4 * gout31_clear[0];
    std::vector<long> gout33_clear = fvec33(gin33_clear);

    std::vector<RotationPoly> lut34;
    std::vector<long (*)(long)> flut34;
    auto lut34idx0 = [](long I) -> long {
        /* GATE 43 (LUT3 _340_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut34.push_back(ctx.genrate_lut(lut34idx0));
    flut34.push_back(lut34idx0);
    auto fvec34 = [flut34](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut34[i](I));
        return ret;
    };

    std::cerr << "\rLUT34   ";
    long gin34_clear = 1 * gout20_clear[0] + 2 * gout25_clear[1] + 4 * gout31_clear[0];
    std::vector<long> gout34_clear = fvec34(gin34_clear);

    std::vector<RotationPoly> lut35;
    std::vector<long (*)(long)> flut35;
    auto lut35idx0 = [](long I) -> long {
        /* GATE 46 (LUT3 _343_ INIT 0x3a PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut35.push_back(ctx.genrate_lut(lut35idx0));
    flut35.push_back(lut35idx0);
    auto fvec35 = [flut35](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut35[i](I));
        return ret;
    };

    std::cerr << "\rLUT35   ";
    long gin35_clear = 1 * gout24_clear[0] + 2 * gout26_clear[0] + 4 * gout31_clear[0];
    std::vector<long> gout35_clear = fvec35(gin35_clear);

    std::vector<RotationPoly> lut36;
    std::vector<long (*)(long)> flut36;
    auto lut36idx0 = [](long I) -> long {
        /* GATE 59 (LUT3 _356_ INIT 0x4f PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut36.push_back(ctx.genrate_lut(lut36idx0));
    flut36.push_back(lut36idx0);
    auto fvec36 = [flut36](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut36[i](I));
        return ret;
    };

    std::cerr << "\rLUT36   ";
    long gin36_clear = 1 * gout17_clear[0] + 2 * gout33_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout36_clear = fvec36(gin36_clear);

    std::vector<RotationPoly> lut37;
    std::vector<long (*)(long)> flut37;
    auto lut37idx0 = [](long I) -> long {
        /* GATE 13 (LUT3 _310_ INIT 0x4b PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut37.push_back(ctx.genrate_lut(lut37idx0));
    flut37.push_back(lut37idx0);
    auto fvec37 = [flut37](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut37[i](I));
        return ret;
    };

    std::cerr << "\rLUT37   ";
    long gin37_clear = 1 * ct_num7_clear + 2 * ct_num6_clear + 4 * gout31_clear[0];
    std::vector<long> gout37_clear = fvec37(gin37_clear);

    std::vector<RotationPoly> lut38;
    std::vector<long (*)(long)> flut38;
    auto lut38idx0 = [](long I) -> long {
        /* GATE 93 (LUT3 _390_ INIT 0xca PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut38.push_back(ctx.genrate_lut(lut38idx0));
    flut38.push_back(lut38idx0);
    auto fvec38 = [flut38](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut38[i](I));
        return ret;
    };

    std::cerr << "\rLUT38   ";
    long gin38_clear = 1 * gout8_clear[0] + 2 * gout19_clear[0] + 4 * gout31_clear[0];
    std::vector<long> gout38_clear = fvec38(gin38_clear);

    std::vector<RotationPoly> lut39;
    std::vector<long (*)(long)> flut39;
    auto lut39idx0 = [](long I) -> long {
        /* GATE 41 (LUT3 _338_ INIT 0xca PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut39.push_back(ctx.genrate_lut(lut39idx0));
    flut39.push_back(lut39idx0);
    auto fvec39 = [flut39](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut39[i](I));
        return ret;
    };

    std::cerr << "\rLUT39   ";
    long gin39_clear = 1 * gout6_clear[0] + 2 * ct_num6_clear + 4 * gout31_clear[0];
    std::vector<long> gout39_clear = fvec39(gin39_clear);

    std::vector<RotationPoly> lut40;
    std::vector<long (*)(long)> flut40;
    auto lut40idx0 = [](long I) -> long {
        /* GATE 45 (LUT2 _342_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut40.push_back(ctx.genrate_lut(lut40idx0));
    flut40.push_back(lut40idx0);
    auto fvec40 = [flut40](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut40[i](I));
        return ret;
    };

    std::cerr << "\rLUT40   ";
    long gin40_clear = 1 * gout35_clear[0] + 2 * gout2_clear[1];
    std::vector<long> gout40_clear = fvec40(gin40_clear);

    std::vector<RotationPoly> lut41;
    std::vector<long (*)(long)> flut41;
    auto lut41idx0 = [](long I) -> long {
        /* GATE 94 (LUT2 _391_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut41.push_back(ctx.genrate_lut(lut41idx0));
    flut41.push_back(lut41idx0);
    auto fvec41 = [flut41](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut41[i](I));
        return ret;
    };

    std::cerr << "\rLUT41   ";
    long gin41_clear = 1 * ct_num8_clear + 2 * gout38_clear[0];
    std::vector<long> gout41_clear = fvec41(gin41_clear);

    std::vector<RotationPoly> lut42;
    std::vector<long (*)(long)> flut42;
    auto lut42idx0 = [](long I) -> long {
        /* GATE 12 (LUT3 _309_ INIT 0xe8 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut42.push_back(ctx.genrate_lut(lut42idx0));
    flut42.push_back(lut42idx0);
    auto lut42idx1 = [](long I) -> long {
        /* GATE 56 (LUT3 _353_ INIT 0x69 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut42.push_back(ctx.genrate_lut(lut42idx1));
    flut42.push_back(lut42idx1);
    auto fvec42 = [flut42](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut42[i](I));
        return ret;
    };

    std::cerr << "\rLUT42   ";
    long gin42_clear = 1 * gout39_clear[0] + 2 * gout37_clear[0] + 4 * gout19_clear[0];
    std::vector<long> gout42_clear = fvec42(gin42_clear);

    std::vector<RotationPoly> lut43;
    std::vector<long (*)(long)> flut43;
    auto lut43idx0 = [](long I) -> long {
        /* GATE 58 (LUT3 _355_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut43.push_back(ctx.genrate_lut(lut43idx0));
    flut43.push_back(lut43idx0);
    auto lut43idx1 = [](long I) -> long {
        /* GATE 11 (LUT3 _308_ INIT 0xe8 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut43.push_back(ctx.genrate_lut(lut43idx1));
    flut43.push_back(lut43idx1);
    auto fvec43 = [flut43](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut43[i](I));
        return ret;
    };

    std::cerr << "\rLUT43   ";
    long gin43_clear = 1 * gout42_clear[0] + 2 * gout41_clear[0] + 4 * gout11_clear[0];
    std::vector<long> gout43_clear = fvec43(gin43_clear);

    std::vector<RotationPoly> lut44;
    std::vector<long (*)(long)> flut44;
    auto lut44idx0 = [](long I) -> long {
        /* GATE 61 (LUT3 _358_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut44.push_back(ctx.genrate_lut(lut44idx0));
    flut44.push_back(lut44idx0);
    auto lut44idx1 = [](long I) -> long {
        /* GATE 10 (LUT3 _307_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut44.push_back(ctx.genrate_lut(lut44idx1));
    flut44.push_back(lut44idx1);
    auto fvec44 = [flut44](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut44[i](I));
        return ret;
    };

    std::cerr << "\rLUT44   ";
    long gin44_clear = 1 * gout43_clear[1] + 2 * gout34_clear[0] + 4 * gout3_clear[0];
    std::vector<long> gout44_clear = fvec44(gin44_clear);

    std::vector<RotationPoly> lut45;
    std::vector<long (*)(long)> flut45;
    auto lut45idx0 = [](long I) -> long {
        /* GATE 9 (LUT3 _306_ INIT 0xac PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut45.push_back(ctx.genrate_lut(lut45idx0));
    flut45.push_back(lut45idx0);
    auto fvec45 = [flut45](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut45[i](I));
        return ret;
    };

    std::cerr << "\rLUT45   ";
    long gin45_clear = 1 * gout40_clear[0] + 2 * gout44_clear[1] + 4 * ct_num14_clear;
    std::vector<long> gout45_clear = fvec45(gin45_clear);

    std::vector<RotationPoly> lut46;
    std::vector<long (*)(long)> flut46;
    auto lut46idx0 = [](long I) -> long {
        /* GATE 8 (LUT3 _305_ INIT 0xb PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut46.push_back(ctx.genrate_lut(lut46idx0));
    flut46.push_back(lut46idx0);
    auto fvec46 = [flut46](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut46[i](I));
        return ret;
    };

    std::cerr << "\rLUT46   ";
    long gin46_clear = 1 * gout33_clear[0] + 2 * gout45_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout46_clear = fvec46(gin46_clear);

    std::vector<RotationPoly> lut47;
    std::vector<long (*)(long)> flut47;
    auto lut47idx0 = [](long I) -> long {
        /* GATE 55 (LUT3 _352_ INIT 0x3a PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut47.push_back(ctx.genrate_lut(lut47idx0));
    flut47.push_back(lut47idx0);
    auto fvec47 = [flut47](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut47[i](I));
        return ret;
    };

    std::cerr << "\rLUT47   ";
    long gin47_clear = 1 * gout37_clear[0] + 2 * gout42_clear[1] + 4 * gout46_clear[0];
    std::vector<long> gout47_clear = fvec47(gin47_clear);

    std::vector<RotationPoly> lut48;
    std::vector<long (*)(long)> flut48;
    auto lut48idx0 = [](long I) -> long {
        /* GATE 50 (LUT2 _347_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut48.push_back(ctx.genrate_lut(lut48idx0));
    flut48.push_back(lut48idx0);
    auto fvec48 = [flut48](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut48[i](I));
        return ret;
    };

    std::cerr << "\rLUT48   ";
    long gin48_clear = 1 * gout45_clear[0] + 2 * gout32_clear[0];
    std::vector<long> gout48_clear = fvec48(gin48_clear);

    std::vector<RotationPoly> lut49;
    std::vector<long (*)(long)> flut49;
    auto lut49idx0 = [](long I) -> long {
        /* GATE 60 (LUT3 _357_ INIT 0x35 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut49.push_back(ctx.genrate_lut(lut49idx0));
    flut49.push_back(lut49idx0);
    auto fvec49 = [flut49](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut49[i](I));
        return ret;
    };

    std::cerr << "\rLUT49   ";
    long gin49_clear = 1 * gout34_clear[0] + 2 * gout44_clear[0] + 4 * gout46_clear[0];
    std::vector<long> gout49_clear = fvec49(gin49_clear);

    std::vector<RotationPoly> lut50;
    std::vector<long (*)(long)> flut50;
    auto lut50idx0 = [](long I) -> long {
        /* GATE 95 (LUT3 _392_ INIT 0x60 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut50.push_back(ctx.genrate_lut(lut50idx0));
    flut50.push_back(lut50idx0);
    auto fvec50 = [flut50](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut50[i](I));
        return ret;
    };

    std::cerr << "\rLUT50   ";
    long gin50_clear = 1 * gout44_clear[1] + 2 * gout46_clear[0] + 4 * gout2_clear[1];
    std::vector<long> gout50_clear = fvec50(gin50_clear);

    std::vector<RotationPoly> lut51;
    std::vector<long (*)(long)> flut51;
    auto lut51idx0 = [](long I) -> long {
        /* GATE 53 (LUT3 _350_ INIT 0x35 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut51.push_back(ctx.genrate_lut(lut51idx0));
    flut51.push_back(lut51idx0);
    auto fvec51 = [flut51](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut51[i](I));
        return ret;
    };

    std::cerr << "\rLUT51   ";
    long gin51_clear = 1 * gout5_clear[0] + 2 * ct_num4_clear + 4 * gout46_clear[0];
    std::vector<long> gout51_clear = fvec51(gin51_clear);

    std::vector<RotationPoly> lut52;
    std::vector<long (*)(long)> flut52;
    auto lut52idx0 = [](long I) -> long {
        /* GATE 96 (LUT3 _393_ INIT 0x60 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut52.push_back(ctx.genrate_lut(lut52idx0));
    flut52.push_back(lut52idx0);
    auto fvec52 = [flut52](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut52[i](I));
        return ret;
    };

    std::cerr << "\rLUT52   ";
    long gin52_clear = 1 * gout50_clear[0] + 2 * gout35_clear[0] + 4 * gout36_clear[0];
    std::vector<long> gout52_clear = fvec52(gin52_clear);

    std::vector<RotationPoly> lut53;
    std::vector<long (*)(long)> flut53;
    auto lut53idx0 = [](long I) -> long {
        /* GATE 57 (LUT3 _354_ INIT 0x3a PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut53.push_back(ctx.genrate_lut(lut53idx0));
    flut53.push_back(lut53idx0);
    auto fvec53 = [flut53](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut53[i](I));
        return ret;
    };

    std::cerr << "\rLUT53   ";
    long gin53_clear = 1 * gout41_clear[0] + 2 * gout43_clear[0] + 4 * gout46_clear[0];
    std::vector<long> gout53_clear = fvec53(gin53_clear);

    std::vector<RotationPoly> lut54;
    std::vector<long (*)(long)> flut54;
    auto lut54idx0 = [](long I) -> long {
        /* GATE 52 (LUT3 _349_ INIT 0x4b PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut54.push_back(ctx.genrate_lut(lut54idx0));
    flut54.push_back(lut54idx0);
    auto fvec54 = [flut54](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut54[i](I));
        return ret;
    };

    std::cerr << "\rLUT54   ";
    long gin54_clear = 1 * ct_num5_clear + 2 * ct_num4_clear + 4 * gout46_clear[0];
    std::vector<long> gout54_clear = fvec54(gin54_clear);

    std::vector<RotationPoly> lut55;
    std::vector<long (*)(long)> flut55;
    auto lut55idx0 = [](long I) -> long {
        /* GATE 70 (LUT3 _367_ INIT 0x69 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut55.push_back(ctx.genrate_lut(lut55idx0));
    flut55.push_back(lut55idx0);
    auto lut55idx1 = [](long I) -> long {
        /* GATE 51 (LUT3 _348_ INIT 0x71 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut55.push_back(ctx.genrate_lut(lut55idx1));
    flut55.push_back(lut55idx1);
    auto fvec55 = [flut55](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut55[i](I));
        return ret;
    };

    std::cerr << "\rLUT55   ";
    long gin55_clear = 1 * gout51_clear[0] + 2 * gout54_clear[0] + 4 * gout31_clear[0];
    std::vector<long> gout55_clear = fvec55(gin55_clear);

    std::vector<RotationPoly> lut56;
    std::vector<long (*)(long)> flut56;
    auto lut56idx0 = [](long I) -> long {
        /* GATE 7 (LUT3 _304_ INIT 0x7 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut56.push_back(ctx.genrate_lut(lut56idx0));
    flut56.push_back(lut56idx0);
    auto fvec56 = [flut56](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut56[i](I));
        return ret;
    };

    std::cerr << "\rLUT56   ";
    long gin56_clear = 1 * gout6_clear[0] + 2 * gout48_clear[0] + 4 * gout46_clear[0];
    std::vector<long> gout56_clear = fvec56(gin56_clear);

    std::vector<RotationPoly> lut57;
    std::vector<long (*)(long)> flut57;
    auto lut57idx0 = [](long I) -> long {
        /* GATE 6 (LUT2 _303_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut57.push_back(ctx.genrate_lut(lut57idx0));
    flut57.push_back(lut57idx0);
    auto fvec57 = [flut57](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut57[i](I));
        return ret;
    };

    std::cerr << "\rLUT57   ";
    long gin57_clear = 1 * gout56_clear[0] + 2 * ct_num6_clear;
    std::vector<long> gout57_clear = fvec57(gin57_clear);

    std::vector<RotationPoly> lut58;
    std::vector<long (*)(long)> flut58;
    auto lut58idx0 = [](long I) -> long {
        /* GATE 75 (LUT3 _372_ INIT 0x69 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut58.push_back(ctx.genrate_lut(lut58idx0));
    flut58.push_back(lut58idx0);
    auto lut58idx1 = [](long I) -> long {
        /* GATE 5 (LUT3 _302_ INIT 0x71 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut58.push_back(ctx.genrate_lut(lut58idx1));
    flut58.push_back(lut58idx1);
    auto fvec58 = [flut58](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut58[i](I));
        return ret;
    };

    std::cerr << "\rLUT58   ";
    long gin58_clear = 1 * gout55_clear[1] + 2 * gout57_clear[0] + 4 * gout19_clear[0];
    std::vector<long> gout58_clear = fvec58(gin58_clear);

    std::vector<RotationPoly> lut59;
    std::vector<long (*)(long)> flut59;
    auto lut59idx0 = [](long I) -> long {
        /* GATE 4 (LUT3 _301_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut59.push_back(ctx.genrate_lut(lut59idx0));
    flut59.push_back(lut59idx0);
    auto lut59idx1 = [](long I) -> long {
        /* GATE 77 (LUT3 _374_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut59.push_back(ctx.genrate_lut(lut59idx1));
    flut59.push_back(lut59idx1);
    auto fvec59 = [flut59](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut59[i](I));
        return ret;
    };

    std::cerr << "\rLUT59   ";
    long gin59_clear = 1 * gout58_clear[1] + 2 * gout47_clear[0] + 4 * gout11_clear[0];
    std::vector<long> gout59_clear = fvec59(gin59_clear);

    std::vector<RotationPoly> lut60;
    std::vector<long (*)(long)> flut60;
    auto lut60idx0 = [](long I) -> long {
        /* GATE 83 (LUT3 _380_ INIT 0x69 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut60.push_back(ctx.genrate_lut(lut60idx0));
    flut60.push_back(lut60idx0);
    auto lut60idx1 = [](long I) -> long {
        /* GATE 3 (LUT3 _300_ INIT 0x2b PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut60.push_back(ctx.genrate_lut(lut60idx1));
    flut60.push_back(lut60idx1);
    auto fvec60 = [flut60](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut60[i](I));
        return ret;
    };

    std::cerr << "\rLUT60   ";
    long gin60_clear = 1 * gout59_clear[0] + 2 * gout3_clear[0] + 4 * gout53_clear[0];
    std::vector<long> gout60_clear = fvec60(gin60_clear);

    std::vector<RotationPoly> lut61;
    std::vector<long (*)(long)> flut61;
    auto lut61idx0 = [](long I) -> long {
        /* GATE 97 (LUT3 _394_ INIT 0xd4 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut61.push_back(ctx.genrate_lut(lut61idx0));
    flut61.push_back(lut61idx0);
    auto lut61idx1 = [](long I) -> long {
        /* GATE 99 (LUT2 _396_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut61.push_back(ctx.genrate_lut(lut61idx1));
    flut61.push_back(lut61idx1);
    auto fvec61 = [flut61](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut61[i](I));
        return ret;
    };

    std::cerr << "\rLUT61   ";
    long gin61_clear = 1 * gout60_clear[1] + 2 * gout2_clear[1] + 4 * gout49_clear[0];
    std::vector<long> gout61_clear = fvec61(gin61_clear);

    std::vector<RotationPoly> lut62;
    std::vector<long (*)(long)> flut62;
    auto lut62idx0 = [](long I) -> long {
        /* GATE 100 (LUT3 _397_ INIT 0xe3 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut62.push_back(ctx.genrate_lut(lut62idx0));
    flut62.push_back(lut62idx0);
    auto fvec62 = [flut62](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut62[i](I));
        return ret;
    };

    std::cerr << "\rLUT62   ";
    long gin62_clear = 1 * gout52_clear[0] + 2 * gout61_clear[1] + 4 * gout49_clear[0];
    std::vector<long> gout62_clear = fvec62(gin62_clear);

    std::vector<RotationPoly> lut63;
    std::vector<long (*)(long)> flut63;
    auto lut63idx0 = [](long I) -> long {
        /* GATE 98 (LUT2 _395_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut63.push_back(ctx.genrate_lut(lut63idx0));
    flut63.push_back(lut63idx0);
    auto fvec63 = [flut63](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut63[i](I));
        return ret;
    };

    std::cerr << "\rLUT63   ";
    long gin63_clear = 1 * gout61_clear[0] + 2 * gout52_clear[0];
    std::vector<long> gout63_clear = fvec63(gin63_clear);

    std::vector<RotationPoly> lut64;
    std::vector<long (*)(long)> flut64;
    auto lut64idx0 = [](long I) -> long {
        /* GATE 65 (LUT2 _362_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut64.push_back(ctx.genrate_lut(lut64idx0));
    flut64.push_back(lut64idx0);
    auto fvec64 = [flut64](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut64[i](I));
        return ret;
    };

    std::cerr << "\rLUT64   ";
    long gin64_clear = 1 * gout63_clear[0] + 2 * ct_num15_clear;
    std::vector<long> gout64_clear = fvec64(gin64_clear);

    std::vector<RotationPoly> lut65;
    std::vector<long (*)(long)> flut65;
    auto lut65idx0 = [](long I) -> long {
        /* GATE 71 (LUT3 _368_ INIT 0xe0 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut65.push_back(ctx.genrate_lut(lut65idx0));
    flut65.push_back(lut65idx0);
    auto fvec65 = [flut65](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut65[i](I));
        return ret;
    };

    std::cerr << "\rLUT65   ";
    long gin65_clear = 1 * gout63_clear[0] + 2 * gout54_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout65_clear = fvec65(gin65_clear);

    std::vector<RotationPoly> lut66;
    std::vector<long (*)(long)> flut66;
    auto lut66idx0 = [](long I) -> long {
        /* GATE 67 (LUT3 _364_ INIT 0x4b PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut66.push_back(ctx.genrate_lut(lut66idx0));
    flut66.push_back(lut66idx0);
    auto fvec66 = [flut66](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut66[i](I));
        return ret;
    };

    std::cerr << "\rLUT66   ";
    long gin66_clear = 1 * ct_num3_clear + 2 * ct_num2_clear + 4 * gout64_clear[0];
    std::vector<long> gout66_clear = fvec66(gin66_clear);

    std::vector<RotationPoly> lut67;
    std::vector<long (*)(long)> flut67;
    auto lut67idx0 = [](long I) -> long {
        /* GATE 74 (LUT3 _371_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut67.push_back(ctx.genrate_lut(lut67idx0));
    flut67.push_back(lut67idx0);
    auto fvec67 = [flut67](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut67[i](I));
        return ret;
    };

    std::cerr << "\rLUT67   ";
    long gin67_clear = 1 * gout57_clear[0] + 2 * gout58_clear[0] + 4 * gout64_clear[0];
    std::vector<long> gout67_clear = fvec67(gin67_clear);

    std::vector<RotationPoly> lut68;
    std::vector<long (*)(long)> flut68;
    auto lut68idx0 = [](long I) -> long {
        /* GATE 2 (LUT3 _299_ INIT 0x10 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut68.push_back(ctx.genrate_lut(lut68idx0));
    flut68.push_back(lut68idx0);
    auto fvec68 = [flut68](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut68[i](I));
        return ret;
    };

    std::cerr << "\rLUT68   ";
    long gin68_clear = 1 * gout5_clear[0] + 2 * gout63_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout68_clear = fvec68(gin68_clear);

    std::vector<RotationPoly> lut69;
    std::vector<long (*)(long)> flut69;
    auto lut69idx0 = [](long I) -> long {
        /* GATE 73 (LUT2 _370_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut69.push_back(ctx.genrate_lut(lut69idx0));
    flut69.push_back(lut69idx0);
    auto fvec69 = [flut69](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut69[i](I));
        return ret;
    };

    std::cerr << "\rLUT69   ";
    long gin69_clear = 1 * gout11_clear[0] + 2 * gout67_clear[0];
    std::vector<long> gout69_clear = fvec69(gin69_clear);

    std::vector<RotationPoly> lut70;
    std::vector<long (*)(long)> flut70;
    auto lut70idx0 = [](long I) -> long {
        /* GATE 62 (LUT2 _359_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut70.push_back(ctx.genrate_lut(lut70idx0));
    flut70.push_back(lut70idx0);
    auto fvec70 = [flut70](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut70[i](I));
        return ret;
    };

    std::cerr << "\rLUT70   ";
    long gin70_clear = 1 * gout46_clear[0] + 2 * gout63_clear[0];
    std::vector<long> gout70_clear = fvec70(gin70_clear);

    std::vector<RotationPoly> lut71;
    std::vector<long (*)(long)> flut71;
    auto lut71idx0 = [](long I) -> long {
        /* GATE 69 (LUT3 _366_ INIT 0x10 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut71.push_back(ctx.genrate_lut(lut71idx0));
    flut71.push_back(lut71idx0);
    auto fvec71 = [flut71](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut71[i](I));
        return ret;
    };

    std::cerr << "\rLUT71   ";
    long gin71_clear = 1 * gout55_clear[0] + 2 * gout63_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout71_clear = fvec71(gin71_clear);

    std::vector<RotationPoly> lut72;
    std::vector<long (*)(long)> flut72;
    auto lut72idx0 = [](long I) -> long {
        /* GATE 76 (LUT3 _373_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut72.push_back(ctx.genrate_lut(lut72idx0));
    flut72.push_back(lut72idx0);
    auto fvec72 = [flut72](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut72[i](I));
        return ret;
    };

    std::cerr << "\rLUT72   ";
    long gin72_clear = 1 * gout47_clear[0] + 2 * gout59_clear[1] + 4 * gout64_clear[0];
    std::vector<long> gout72_clear = fvec72(gin72_clear);

    std::vector<RotationPoly> lut73;
    std::vector<long (*)(long)> flut73;
    auto lut73idx0 = [](long I) -> long {
        /* GATE 64 (LUT3 _361_ INIT 0x35 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut73.push_back(ctx.genrate_lut(lut73idx0));
    flut73.push_back(lut73idx0);
    auto fvec73 = [flut73](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut73[i](I));
        return ret;
    };

    std::cerr << "\rLUT73   ";
    long gin73_clear = 1 * gout1_clear[0] + 2 * ct_num2_clear + 4 * gout64_clear[0];
    std::vector<long> gout73_clear = fvec73(gin73_clear);

    std::vector<RotationPoly> lut74;
    std::vector<long (*)(long)> flut74;
    auto lut74idx0 = [](long I) -> long {
        /* GATE 79 (LUT3 _376_ INIT 0xe0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut74.push_back(ctx.genrate_lut(lut74idx0));
    flut74.push_back(lut74idx0);
    auto lut74idx1 = [](long I) -> long {
        /* GATE 68 (LUT3 _365_ INIT 0x1 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut74.push_back(ctx.genrate_lut(lut74idx1));
    flut74.push_back(lut74idx1);
    auto fvec74 = [flut74](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut74[i](I));
        return ret;
    };

    std::cerr << "\rLUT74   ";
    long gin74_clear = 1 * gout65_clear[0] + 2 * gout71_clear[0] + 4 * gout19_clear[0];
    std::vector<long> gout74_clear = fvec74(gin74_clear);

    std::vector<RotationPoly> lut75;
    std::vector<long (*)(long)> flut75;
    auto lut75idx0 = [](long I) -> long {
        /* GATE 82 (LUT3 _379_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut75.push_back(ctx.genrate_lut(lut75idx0));
    flut75.push_back(lut75idx0);
    auto fvec75 = [flut75](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut75[i](I));
        return ret;
    };

    std::cerr << "\rLUT75   ";
    long gin75_clear = 1 * gout53_clear[0] + 2 * gout60_clear[0] + 4 * gout64_clear[0];
    std::vector<long> gout75_clear = fvec75(gin75_clear);

    std::vector<RotationPoly> lut76;
    std::vector<long (*)(long)> flut76;
    auto lut76idx0 = [](long I) -> long {
        /* GATE 72 (LUT3 _369_ INIT 0xe PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut76.push_back(ctx.genrate_lut(lut76idx0));
    flut76.push_back(lut76idx0);
    auto lut76idx1 = [](long I) -> long {
        /* GATE 81 (LUT2 _378_ INIT 0x8 PERM 12) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut76.push_back(ctx.genrate_lut(lut76idx1));
    flut76.push_back(lut76idx1);
    auto fvec76 = [flut76](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut76[i](I));
        return ret;
    };

    std::cerr << "\rLUT76   ";
    long gin76_clear = 1 * gout69_clear[0] + 2 * gout72_clear[0] + 4 * gout3_clear[0];
    std::vector<long> gout76_clear = fvec76(gin76_clear);

    std::vector<RotationPoly> lut77;
    std::vector<long (*)(long)> flut77;
    auto lut77idx0 = [](long I) -> long {
        /* GATE 1 (LUT3 _298_ INIT 0x1e PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut77.push_back(ctx.genrate_lut(lut77idx0));
    flut77.push_back(lut77idx0);
    auto fvec77 = [flut77](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut77[i](I));
        return ret;
    };

    std::cerr << "\rLUT77   ";
    long gin77_clear = 1 * gout68_clear[0] + 2 * gout70_clear[0] + 4 * ct_num4_clear;
    std::vector<long> gout77_clear = fvec77(gin77_clear);

    std::vector<RotationPoly> lut78;
    std::vector<long (*)(long)> flut78;
    auto lut78idx0 = [](long I) -> long {
        /* GATE 78 (LUT3 _375_ INIT 0xd PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut78.push_back(ctx.genrate_lut(lut78idx0));
    flut78.push_back(lut78idx0);
    auto fvec78 = [flut78](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut78[i](I));
        return ret;
    };

    std::cerr << "\rLUT78   ";
    long gin78_clear = 1 * gout11_clear[0] + 2 * gout67_clear[0] + 4 * gout74_clear[0];
    std::vector<long> gout78_clear = fvec78(gin78_clear);

    std::vector<RotationPoly> lut79;
    std::vector<long (*)(long)> flut79;
    auto lut79idx0 = [](long I) -> long {
        /* GATE 101 (LUT3 _398_ INIT 0xe0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut79.push_back(ctx.genrate_lut(lut79idx0));
    flut79.push_back(lut79idx0);
    auto fvec79 = [flut79](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut79[i](I));
        return ret;
    };

    std::cerr << "\rLUT79   ";
    long gin79_clear = 1 * gout75_clear[0] + 2 * ct_num14_clear + 4 * gout62_clear[0];
    std::vector<long> gout79_clear = fvec79(gin79_clear);

    std::vector<RotationPoly> lut80;
    std::vector<long (*)(long)> flut80;
    auto lut80idx0 = [](long I) -> long {
        /* GATE 80 (LUT3 _377_ INIT 0x7 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut80.push_back(ctx.genrate_lut(lut80idx0));
    flut80.push_back(lut80idx0);
    auto fvec80 = [flut80](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut80[i](I));
        return ret;
    };

    std::cerr << "\rLUT80   ";
    long gin80_clear = 1 * gout76_clear[1] + 2 * gout2_clear[1] + 4 * gout75_clear[0];
    std::vector<long> gout80_clear = fvec80(gin80_clear);

    std::vector<RotationPoly> lut81;
    std::vector<long (*)(long)> flut81;
    auto lut81idx0 = [](long I) -> long {
        /* GATE 63 (LUT3 _360_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut81.push_back(ctx.genrate_lut(lut81idx0));
    flut81.push_back(lut81idx0);
    auto fvec81 = [flut81](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut81[i](I));
        return ret;
    };

    std::cerr << "\rLUT81   ";
    long gin81_clear = 1 * gout73_clear[0] + 2 * gout66_clear[0] + 4 * gout46_clear[0];
    std::vector<long> gout81_clear = fvec81(gin81_clear);

    std::vector<RotationPoly> lut82;
    std::vector<long (*)(long)> flut82;
    auto lut82idx0 = [](long I) -> long {
        /* GATE 84 (LUT3 _381_ INIT 0x71 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut82.push_back(ctx.genrate_lut(lut82idx0));
    flut82.push_back(lut82idx0);
    auto fvec82 = [flut82](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut82[i](I));
        return ret;
    };

    std::cerr << "\rLUT82   ";
    long gin82_clear = 1 * gout77_clear[0] + 2 * gout81_clear[0] + 4 * gout31_clear[0];
    std::vector<long> gout82_clear = fvec82(gin82_clear);

    std::vector<RotationPoly> lut83;
    std::vector<long (*)(long)> flut83;
    auto lut83idx0 = [](long I) -> long {
        /* GATE 85 (LUT3 _382_ INIT 0x4f PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut83.push_back(ctx.genrate_lut(lut83idx0));
    flut83.push_back(lut83idx0);
    auto fvec83 = [flut83](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut83[i](I));
        return ret;
    };

    std::cerr << "\rLUT83   ";
    long gin83_clear = 1 * gout74_clear[1] + 2 * gout82_clear[0] + 4 * gout78_clear[0];
    std::vector<long> gout83_clear = fvec83(gin83_clear);

    std::vector<RotationPoly> lut84;
    std::vector<long (*)(long)> flut84;
    auto lut84idx0 = [](long I) -> long {
        /* GATE 86 (LUT3 _383_ INIT 0x8f PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut84.push_back(ctx.genrate_lut(lut84idx0));
    flut84.push_back(lut84idx0);
    auto fvec84 = [flut84](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut84[i](I));
        return ret;
    };

    std::cerr << "\rLUT84   ";
    long gin84_clear = 1 * gout76_clear[0] + 2 * gout83_clear[0] + 4 * gout80_clear[0];
    std::vector<long> gout84_clear = fvec84(gin84_clear);

    std::vector<RotationPoly> lut85;
    std::vector<long (*)(long)> flut85;
    auto lut85idx0 = [](long I) -> long {
        /* GATE 102 (LUT3 _399_ INIT 0x7 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut85.push_back(ctx.genrate_lut(lut85idx0));
    flut85.push_back(lut85idx0);
    auto fvec85 = [flut85](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut85[i](I));
        return ret;
    };

    std::cerr << "\rLUT85   ";
    long gin85_clear = 1 * gout84_clear[0] + 2 * gout79_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout85_clear = fvec85(gin85_clear);

    std::cerr << "\r          \r";
    std::vector<long> out;
    out.push_back(gout85_clear[0]); /* out0 */
    out.push_back(gout64_clear[0]); /* out1 */
    out.push_back(gout46_clear[0]); /* out2 */
    out.push_back(gout31_clear[0]); /* out3 */
    out.push_back(gout19_clear[0]); /* out4 */
    out.push_back(gout11_clear[0]); /* out5 */
    out.push_back(gout3_clear[0]); /* out6 */
    out.push_back(gout2_clear[1]); /* out7 */
    return out;
}

std::vector<long>
test_add4_lut3fa(FHEContext& ctx, uint8_t a, uint8_t b)
{
    long ct_a0_clear = (a >> 0) & 1;
    long ct_a1_clear = (a >> 1) & 1;
    long ct_a2_clear = (a >> 2) & 1;
    long ct_a3_clear = (a >> 3) & 1;
    long ct_b0_clear = (b >> 0) & 1;
    long ct_b1_clear = (b >> 1) & 1;
    long ct_b2_clear = (b >> 2) & 1;
    long ct_b3_clear = (b >> 3) & 1;

    std::vector<RotationPoly> decomp;
    std::vector<long (*)(long)> fdecomp;
    auto decomp0 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp0));
    fdecomp.push_back(decomp0);
    auto decomp1 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp1));
    fdecomp.push_back(decomp1);
    auto decomp2 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp2));
    fdecomp.push_back(decomp2);
    auto vdecomp = [fdecomp](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 3; ++i)
            ret.push_back(fdecomp[i](I));
        return ret;
    };

    std::cerr << "\rFA0    ";
    long gin0_clear = 1 * ct_a0_clear + 2 * ct_a1_clear + 1 * ct_b0_clear + 2 * ct_b1_clear;
    std::vector<long> gout0_clear = vdecomp(gin0_clear);

    std::cerr << "\rFA1    ";
    long gin1_clear = gout0_clear[2] + 1 * ct_a2_clear + 2 * ct_a3_clear + 1 * ct_b2_clear + 2 * ct_b3_clear;
    std::vector<long> gout1_clear = vdecomp(gin1_clear);

    std::cerr << "\r          \r";
    std::vector<long> out;
    out.push_back(gout0_clear[0]); /* out0 */
    out.push_back(gout0_clear[1]); /* out1 */
    out.push_back(gout1_clear[0]); /* out2 */
    out.push_back(gout1_clear[1]); /* out3 */
    out.push_back(gout1_clear[2]); /* out4 */
    return out;
}

std::vector<long>
test_calculator_lut3fa(FHEContext& ctx, uint8_t op, uint16_t x, uint16_t y)
{
    long ct_op0_clear = (op >> 0) & 1;
    long ct_op1_clear = (op >> 1) & 1;
    long ct_op2_clear = (op >> 2) & 1;
    long ct_op3_clear = (op >> 3) & 1;
    long ct_op4_clear = (op >> 4) & 1;
    long ct_op5_clear = (op >> 5) & 1;
    long ct_op6_clear = (op >> 6) & 1;
    long ct_op7_clear = (op >> 7) & 1;
    long ct_x0_clear = (x >> 0) & 1;
    long ct_x1_clear = (x >> 1) & 1;
    long ct_x2_clear = (x >> 2) & 1;
    long ct_x3_clear = (x >> 3) & 1;
    long ct_x4_clear = (x >> 4) & 1;
    long ct_x5_clear = (x >> 5) & 1;
    long ct_x6_clear = (x >> 6) & 1;
    long ct_x7_clear = (x >> 7) & 1;
    long ct_x8_clear = (x >> 8) & 1;
    long ct_x9_clear = (x >> 9) & 1;
    long ct_x10_clear = (x >> 10) & 1;
    long ct_x11_clear = (x >> 11) & 1;
    long ct_x12_clear = (x >> 12) & 1;
    long ct_x13_clear = (x >> 13) & 1;
    long ct_x14_clear = (x >> 14) & 1;
    long ct_x15_clear = (x >> 15) & 1;
    long ct_y0_clear = (y >> 0) & 1;
    long ct_y1_clear = (y >> 1) & 1;
    long ct_y2_clear = (y >> 2) & 1;
    long ct_y3_clear = (y >> 3) & 1;
    long ct_y4_clear = (y >> 4) & 1;
    long ct_y5_clear = (y >> 5) & 1;
    long ct_y6_clear = (y >> 6) & 1;
    long ct_y7_clear = (y >> 7) & 1;
    long ct_y8_clear = (y >> 8) & 1;
    long ct_y9_clear = (y >> 9) & 1;
    long ct_y10_clear = (y >> 10) & 1;
    long ct_y11_clear = (y >> 11) & 1;
    long ct_y12_clear = (y >> 12) & 1;
    long ct_y13_clear = (y >> 13) & 1;
    long ct_y14_clear = (y >> 14) & 1;
    long ct_y15_clear = (y >> 15) & 1;

    std::vector<RotationPoly> decomp;
    std::vector<long (*)(long)> fdecomp;
    auto decomp0 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp0));
    fdecomp.push_back(decomp0);
    auto decomp1 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp1));
    fdecomp.push_back(decomp1);
    auto decomp2 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp2));
    fdecomp.push_back(decomp2);
    auto vdecomp = [fdecomp](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 3; ++i)
            ret.push_back(fdecomp[i](I));
        return ret;
    };

    std::vector<RotationPoly> lut0;
    std::vector<long (*)(long)> flut0;
    auto lut0idx0 = [](long I) -> long {
        /* GATE 21 (LUT2 _1396_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut0.push_back(ctx.genrate_lut(lut0idx0));
    flut0.push_back(lut0idx0);
    auto fvec0 = [flut0](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut0[i](I));
        return ret;
    };

    std::cerr << "\rLUT0   ";
    long gin0_clear = 1 * ct_x0_clear + 2 * ct_y2_clear;
    std::vector<long> gout0_clear = fvec0(gin0_clear);

    std::vector<RotationPoly> lut1;
    std::vector<long (*)(long)> flut1;
    auto lut1idx0 = [](long I) -> long {
        /* GATE 248 (LUT2 _1623_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut1.push_back(ctx.genrate_lut(lut1idx0));
    flut1.push_back(lut1idx0);
    auto fvec1 = [flut1](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut1[i](I));
        return ret;
    };

    std::cerr << "\rLUT1   ";
    long gin1_clear = 1 * ct_x11_clear + 2 * ct_y0_clear;
    std::vector<long> gout1_clear = fvec1(gin1_clear);

    std::vector<RotationPoly> lut2;
    std::vector<long (*)(long)> flut2;
    auto lut2idx0 = [](long I) -> long {
        /* GATE 431 (LUT2 _1806_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut2.push_back(ctx.genrate_lut(lut2idx0));
    flut2.push_back(lut2idx0);
    auto fvec2 = [flut2](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut2[i](I));
        return ret;
    };

    std::cerr << "\rLUT2   ";
    long gin2_clear = 1 * ct_y6_clear + 2 * ct_x9_clear;
    std::vector<long> gout2_clear = fvec2(gin2_clear);

    std::vector<RotationPoly> lut3;
    std::vector<long (*)(long)> flut3;
    auto lut3idx0 = [](long I) -> long {
        /* GATE 396 (LUT2 _1771_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut3.push_back(ctx.genrate_lut(lut3idx0));
    flut3.push_back(lut3idx0);
    auto fvec3 = [flut3](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut3[i](I));
        return ret;
    };

    std::cerr << "\rLUT3   ";
    long gin3_clear = 1 * ct_x1_clear + 2 * ct_y13_clear;
    std::vector<long> gout3_clear = fvec3(gin3_clear);

    std::vector<RotationPoly> lut4;
    std::vector<long (*)(long)> flut4;
    auto lut4idx0 = [](long I) -> long {
        /* GATE 435 (LUT2 _1810_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut4.push_back(ctx.genrate_lut(lut4idx0));
    flut4.push_back(lut4idx0);
    auto fvec4 = [flut4](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut4[i](I));
        return ret;
    };

    std::cerr << "\rLUT4   ";
    long gin4_clear = 1 * ct_x12_clear + 2 * ct_y3_clear;
    std::vector<long> gout4_clear = fvec4(gin4_clear);

    std::vector<RotationPoly> lut5;
    std::vector<long (*)(long)> flut5;
    auto lut5idx0 = [](long I) -> long {
        /* GATE 32 (LUT2 _1407_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut5.push_back(ctx.genrate_lut(lut5idx0));
    flut5.push_back(lut5idx0);
    auto fvec5 = [flut5](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut5[i](I));
        return ret;
    };

    std::cerr << "\rLUT5   ";
    long gin5_clear = 1 * ct_x1_clear + 2 * ct_y2_clear;
    std::vector<long> gout5_clear = fvec5(gin5_clear);

    std::vector<RotationPoly> lut6;
    std::vector<long (*)(long)> flut6;
    auto lut6idx0 = [](long I) -> long {
        /* GATE 31 (LUT2 _1406_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut6.push_back(ctx.genrate_lut(lut6idx0));
    flut6.push_back(lut6idx0);
    auto fvec6 = [flut6](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut6[i](I));
        return ret;
    };

    std::cerr << "\rLUT6   ";
    long gin6_clear = 1 * ct_x2_clear + 2 * ct_y1_clear;
    std::vector<long> gout6_clear = fvec6(gin6_clear);

    std::vector<RotationPoly> lut7;
    std::vector<long (*)(long)> flut7;
    auto lut7idx0 = [](long I) -> long {
        /* GATE 34 (LUT2 _1409_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut7.push_back(ctx.genrate_lut(lut7idx0));
    flut7.push_back(lut7idx0);
    auto fvec7 = [flut7](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut7[i](I));
        return ret;
    };

    std::cerr << "\rLUT7   ";
    long gin7_clear = 1 * ct_x0_clear + 2 * ct_y3_clear;
    std::vector<long> gout7_clear = fvec7(gin7_clear);

    std::vector<RotationPoly> lut8;
    std::vector<long (*)(long)> flut8;
    auto lut8idx0 = [](long I) -> long {
        /* GATE 424 (LUT2 _1799_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut8.push_back(ctx.genrate_lut(lut8idx0));
    flut8.push_back(lut8idx0);
    auto fvec8 = [flut8](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut8[i](I));
        return ret;
    };

    std::cerr << "\rLUT8   ";
    long gin8_clear = 1 * ct_y12_clear + 2 * ct_x3_clear;
    std::vector<long> gout8_clear = fvec8(gin8_clear);

    std::vector<RotationPoly> lut9;
    std::vector<long (*)(long)> flut9;
    auto lut9idx0 = [](long I) -> long {
        /* GATE 267 (LUT2 _1642_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut9.push_back(ctx.genrate_lut(lut9idx0));
    flut9.push_back(lut9idx0);
    auto fvec9 = [flut9](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut9[i](I));
        return ret;
    };

    std::cerr << "\rLUT9   ";
    long gin9_clear = 1 * ct_x2_clear + 2 * ct_y9_clear;
    std::vector<long> gout9_clear = fvec9(gin9_clear);

    std::vector<RotationPoly> lut10;
    std::vector<long (*)(long)> flut10;
    auto lut10idx0 = [](long I) -> long {
        /* GATE 430 (LUT3 _1805_ INIT 0x87 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut10.push_back(ctx.genrate_lut(lut10idx0));
    flut10.push_back(lut10idx0);
    auto fvec10 = [flut10](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut10[i](I));
        return ret;
    };

    std::cerr << "\rLUT10   ";
    long gin10_clear = 1 * ct_x10_clear + 2 * gout2_clear[0] + 4 * ct_y5_clear;
    std::vector<long> gout10_clear = fvec10(gin10_clear);

    std::vector<RotationPoly> lut11;
    std::vector<long (*)(long)> flut11;
    auto lut11idx0 = [](long I) -> long {
        /* GATE 47 (LUT2 _1422_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut11.push_back(ctx.genrate_lut(lut11idx0));
    flut11.push_back(lut11idx0);
    auto fvec11 = [flut11](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut11[i](I));
        return ret;
    };

    std::cerr << "\rLUT11   ";
    long gin11_clear = 1 * ct_x4_clear + 2 * ct_y0_clear;
    std::vector<long> gout11_clear = fvec11(gin11_clear);

    std::vector<RotationPoly> lut12;
    std::vector<long (*)(long)> flut12;
    auto lut12idx0 = [](long I) -> long {
        /* GATE 112 (LUT2 _1487_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut12.push_back(ctx.genrate_lut(lut12idx0));
    flut12.push_back(lut12idx0);
    auto fvec12 = [flut12](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut12[i](I));
        return ret;
    };

    std::cerr << "\rLUT12   ";
    long gin12_clear = 1 * ct_x2_clear + 2 * ct_y5_clear;
    std::vector<long> gout12_clear = fvec12(gin12_clear);

    std::vector<RotationPoly> lut13;
    std::vector<long (*)(long)> flut13;
    auto lut13idx0 = [](long I) -> long {
        /* GATE 257 (LUT2 _1632_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut13.push_back(ctx.genrate_lut(lut13idx0));
    flut13.push_back(lut13idx0);
    auto fvec13 = [flut13](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut13[i](I));
        return ret;
    };

    std::cerr << "\rLUT13   ";
    long gin13_clear = 1 * ct_x4_clear + 2 * ct_y7_clear;
    std::vector<long> gout13_clear = fvec13(gin13_clear);

    std::vector<RotationPoly> lut14;
    std::vector<long (*)(long)> flut14;
    auto lut14idx0 = [](long I) -> long {
        /* GATE 395 (LUT3 _1770_ INIT 0x78 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut14.push_back(ctx.genrate_lut(lut14idx0));
    flut14.push_back(lut14idx0);
    auto lut14idx1 = [](long I) -> long {
        /* GATE 452 (LUT3 _1827_ INIT 0x80 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut14.push_back(ctx.genrate_lut(lut14idx1));
    flut14.push_back(lut14idx1);
    auto fvec14 = [flut14](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut14[i](I));
        return ret;
    };

    std::cerr << "\rLUT14   ";
    long gin14_clear = 1 * gout3_clear[0] + 2 * ct_y12_clear + 4 * ct_x2_clear;
    std::vector<long> gout14_clear = fvec14(gin14_clear);

    std::vector<RotationPoly> lut15;
    std::vector<long (*)(long)> flut15;
    auto lut15idx0 = [](long I) -> long {
        /* GATE 426 (LUT2 _1801_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut15.push_back(ctx.genrate_lut(lut15idx0));
    flut15.push_back(lut15idx0);
    auto fvec15 = [flut15](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut15[i](I));
        return ret;
    };

    std::cerr << "\rLUT15   ";
    long gin15_clear = 1 * ct_x6_clear + 2 * ct_y9_clear;
    std::vector<long> gout15_clear = fvec15(gin15_clear);

    std::vector<RotationPoly> lut16;
    std::vector<long (*)(long)> flut16;
    auto lut16idx0 = [](long I) -> long {
        /* GATE 33 (LUT2 _1408_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut16.push_back(ctx.genrate_lut(lut16idx0));
    flut16.push_back(lut16idx0);
    auto fvec16 = [flut16](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut16[i](I));
        return ret;
    };

    std::cerr << "\rLUT16   ";
    long gin16_clear = 1 * ct_y0_clear + 2 * ct_x3_clear;
    std::vector<long> gout16_clear = fvec16(gin16_clear);

    std::vector<RotationPoly> lut17;
    std::vector<long (*)(long)> flut17;
    auto lut17idx0 = [](long I) -> long {
        /* GATE 111 (LUT2 _1486_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut17.push_back(ctx.genrate_lut(lut17idx0));
    flut17.push_back(lut17idx0);
    auto fvec17 = [flut17](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut17[i](I));
        return ret;
    };

    std::cerr << "\rLUT17   ";
    long gin17_clear = 1 * ct_y4_clear + 2 * ct_x3_clear;
    std::vector<long> gout17_clear = fvec17(gin17_clear);

    std::vector<RotationPoly> lut18;
    std::vector<long (*)(long)> flut18;
    auto lut18idx0 = [](long I) -> long {
        /* GATE 117 (LUT2 _1492_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut18.push_back(ctx.genrate_lut(lut18idx0));
    flut18.push_back(lut18idx0);
    auto fvec18 = [flut18](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut18[i](I));
        return ret;
    };

    std::cerr << "\rLUT18   ";
    long gin18_clear = 1 * ct_x1_clear + 2 * ct_y6_clear;
    std::vector<long> gout18_clear = fvec18(gin18_clear);

    std::cerr << "\rFA19    ";
    long gin19_clear = 1 * ct_x0_clear + 2 * ct_x1_clear + 1 * ct_y0_clear + 2 * ct_y1_clear;
    std::vector<long> gout19_clear = vdecomp(gin19_clear);

    std::vector<RotationPoly> lut20;
    std::vector<long (*)(long)> flut20;
    auto lut20idx0 = [](long I) -> long {
        /* GATE 421 (LUT2 _1796_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut20.push_back(ctx.genrate_lut(lut20idx0));
    flut20.push_back(lut20idx0);
    auto fvec20 = [flut20](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut20[i](I));
        return ret;
    };

    std::cerr << "\rLUT20   ";
    long gin20_clear = 1 * ct_x5_clear + 2 * ct_y10_clear;
    std::vector<long> gout20_clear = fvec20(gin20_clear);

    std::vector<RotationPoly> lut21;
    std::vector<long (*)(long)> flut21;
    auto lut21idx0 = [](long I) -> long {
        /* GATE 45 (LUT2 _1420_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut21.push_back(ctx.genrate_lut(lut21idx0));
    flut21.push_back(lut21idx0);
    auto fvec21 = [flut21](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut21[i](I));
        return ret;
    };

    std::cerr << "\rLUT21   ";
    long gin21_clear = 1 * ct_y1_clear + 2 * ct_x3_clear;
    std::vector<long> gout21_clear = fvec21(gin21_clear);

    std::vector<RotationPoly> lut22;
    std::vector<long (*)(long)> flut22;
    auto lut22idx0 = [](long I) -> long {
        /* GATE 437 (LUT3 _1812_ INIT 0x78 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut22.push_back(ctx.genrate_lut(lut22idx0));
    flut22.push_back(lut22idx0);
    auto fvec22 = [flut22](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut22[i](I));
        return ret;
    };

    std::cerr << "\rLUT22   ";
    long gin22_clear = 1 * ct_x14_clear + 2 * ct_y1_clear + 4 * ct_y15_clear;
    std::vector<long> gout22_clear = fvec22(gin22_clear);

    std::vector<RotationPoly> lut23;
    std::vector<long (*)(long)> flut23;
    auto lut23idx0 = [](long I) -> long {
        /* GATE 423 (LUT3 _1798_ INIT 0x78 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut23.push_back(ctx.genrate_lut(lut23idx0));
    flut23.push_back(lut23idx0);
    auto fvec23 = [flut23](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut23[i](I));
        return ret;
    };

    std::cerr << "\rLUT23   ";
    long gin23_clear = 1 * ct_x4_clear + 2 * gout8_clear[0] + 4 * ct_y11_clear;
    std::vector<long> gout23_clear = fvec23(gin23_clear);

    std::vector<RotationPoly> lut24;
    std::vector<long (*)(long)> flut24;
    auto lut24idx0 = [](long I) -> long {
        /* GATE 429 (LUT3 _1804_ INIT 0x78 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut24.push_back(ctx.genrate_lut(lut24idx0));
    flut24.push_back(lut24idx0);
    auto fvec24 = [flut24](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut24[i](I));
        return ret;
    };

    std::cerr << "\rLUT24   ";
    long gin24_clear = 1 * ct_x8_clear + 2 * ct_y7_clear + 4 * gout10_clear[0];
    std::vector<long> gout24_clear = fvec24(gin24_clear);

    std::vector<RotationPoly> lut25;
    std::vector<long (*)(long)> flut25;
    auto lut25idx0 = [](long I) -> long {
        /* GATE 66 (LUT2 _1441_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut25.push_back(ctx.genrate_lut(lut25idx0));
    flut25.push_back(lut25idx0);
    auto fvec25 = [flut25](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut25[i](I));
        return ret;
    };

    std::cerr << "\rLUT25   ";
    long gin25_clear = 1 * ct_x1_clear + 2 * ct_y4_clear;
    std::vector<long> gout25_clear = fvec25(gin25_clear);

    std::vector<RotationPoly> lut26;
    std::vector<long (*)(long)> flut26;
    auto lut26idx0 = [](long I) -> long {
        /* GATE 63 (LUT2 _1438_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut26.push_back(ctx.genrate_lut(lut26idx0));
    flut26.push_back(lut26idx0);
    auto fvec26 = [flut26](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut26[i](I));
        return ret;
    };

    std::cerr << "\rLUT26   ";
    long gin26_clear = 1 * ct_y2_clear + 2 * ct_x3_clear;
    std::vector<long> gout26_clear = fvec26(gin26_clear);

    std::vector<RotationPoly> lut27;
    std::vector<long (*)(long)> flut27;
    auto lut27idx0 = [](long I) -> long {
        /* GATE 46 (LUT2 _1421_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut27.push_back(ctx.genrate_lut(lut27idx0));
    flut27.push_back(lut27idx0);
    auto fvec27 = [flut27](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut27[i](I));
        return ret;
    };

    std::cerr << "\rLUT27   ";
    long gin27_clear = 1 * ct_x2_clear + 2 * ct_y2_clear;
    std::vector<long> gout27_clear = fvec27(gin27_clear);

    std::vector<RotationPoly> lut28;
    std::vector<long (*)(long)> flut28;
    auto lut28idx0 = [](long I) -> long {
        /* GATE 113 (LUT2 _1488_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut28.push_back(ctx.genrate_lut(lut28idx0));
    flut28.push_back(lut28idx0);
    auto fvec28 = [flut28](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut28[i](I));
        return ret;
    };

    std::cerr << "\rLUT28   ";
    long gin28_clear = 1 * ct_x4_clear + 2 * ct_y3_clear;
    std::vector<long> gout28_clear = fvec28(gin28_clear);

    std::vector<RotationPoly> lut29;
    std::vector<long (*)(long)> flut29;
    auto lut29idx0 = [](long I) -> long {
        /* GATE 294 (LUT2 _1669_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut29.push_back(ctx.genrate_lut(lut29idx0));
    flut29.push_back(lut29idx0);
    auto fvec29 = [flut29](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut29[i](I));
        return ret;
    };

    std::cerr << "\rLUT29   ";
    long gin29_clear = 1 * ct_y5_clear + 2 * ct_x7_clear;
    std::vector<long> gout29_clear = fvec29(gin29_clear);

    std::vector<RotationPoly> lut30;
    std::vector<long (*)(long)> flut30;
    auto lut30idx0 = [](long I) -> long {
        /* GATE 144 (LUT3 _1519_ INIT 0x80 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut30.push_back(ctx.genrate_lut(lut30idx0));
    flut30.push_back(lut30idx0);
    auto lut30idx1 = [](long I) -> long {
        /* GATE 116 (LUT3 _1491_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut30.push_back(ctx.genrate_lut(lut30idx1));
    flut30.push_back(lut30idx1);
    auto fvec30 = [flut30](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut30[i](I));
        return ret;
    };

    std::cerr << "\rLUT30   ";
    long gin30_clear = 1 * gout18_clear[0] + 2 * ct_x0_clear + 4 * ct_y7_clear;
    std::vector<long> gout30_clear = fvec30(gin30_clear);

    std::vector<RotationPoly> lut31;
    std::vector<long (*)(long)> flut31;
    auto lut31idx0 = [](long I) -> long {
        /* GATE 259 (LUT2 _1634_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut31.push_back(ctx.genrate_lut(lut31idx0));
    flut31.push_back(lut31idx0);
    auto fvec31 = [flut31](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut31[i](I));
        return ret;
    };

    std::cerr << "\rLUT31   ";
    long gin31_clear = 1 * ct_y6_clear + 2 * ct_x5_clear;
    std::vector<long> gout31_clear = fvec31(gin31_clear);

    std::vector<RotationPoly> lut32;
    std::vector<long (*)(long)> flut32;
    auto lut32idx0 = [](long I) -> long {
        /* GATE 266 (LUT2 _1641_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut32.push_back(ctx.genrate_lut(lut32idx0));
    flut32.push_back(lut32idx0);
    auto fvec32 = [flut32](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut32[i](I));
        return ret;
    };

    std::cerr << "\rLUT32   ";
    long gin32_clear = 1 * ct_x0_clear + 2 * ct_y11_clear;
    std::vector<long> gout32_clear = fvec32(gin32_clear);

    std::vector<RotationPoly> lut33;
    std::vector<long (*)(long)> flut33;
    auto lut33idx0 = [](long I) -> long {
        /* GATE 291 (LUT2 _1666_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut33.push_back(ctx.genrate_lut(lut33idx0));
    flut33.push_back(lut33idx0);
    auto fvec33 = [flut33](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut33[i](I));
        return ret;
    };

    std::cerr << "\rLUT33   ";
    long gin33_clear = 1 * ct_x12_clear + 2 * ct_y0_clear;
    std::vector<long> gout33_clear = fvec33(gin33_clear);

    std::vector<RotationPoly> lut34;
    std::vector<long (*)(long)> flut34;
    auto lut34idx0 = [](long I) -> long {
        /* GATE 62 (LUT2 _1437_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut34.push_back(ctx.genrate_lut(lut34idx0));
    flut34.push_back(lut34idx0);
    auto fvec34 = [flut34](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut34[i](I));
        return ret;
    };

    std::cerr << "\rLUT34   ";
    long gin34_clear = 1 * ct_x4_clear + 2 * ct_y1_clear;
    std::vector<long> gout34_clear = fvec34(gin34_clear);

    std::vector<RotationPoly> lut35;
    std::vector<long (*)(long)> flut35;
    auto lut35idx0 = [](long I) -> long {
        /* GATE 434 (LUT3 _1809_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut35.push_back(ctx.genrate_lut(lut35idx0));
    flut35.push_back(lut35idx0);
    auto fvec35 = [flut35](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut35[i](I));
        return ret;
    };

    std::cerr << "\rLUT35   ";
    long gin35_clear = 1 * ct_x13_clear + 2 * ct_y2_clear + 4 * gout4_clear[0];
    std::vector<long> gout35_clear = fvec35(gin35_clear);

    std::vector<RotationPoly> lut36;
    std::vector<long (*)(long)> flut36;
    auto lut36idx0 = [](long I) -> long {
        /* GATE 68 (LUT2 _1443_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut36.push_back(ctx.genrate_lut(lut36idx0));
    flut36.push_back(lut36idx0);
    auto fvec36 = [flut36](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut36[i](I));
        return ret;
    };

    std::cerr << "\rLUT36   ";
    long gin36_clear = 1 * ct_x2_clear + 2 * ct_y3_clear;
    std::vector<long> gout36_clear = fvec36(gin36_clear);

    std::vector<RotationPoly> lut37;
    std::vector<long (*)(long)> flut37;
    auto lut37idx0 = [](long I) -> long {
        /* GATE 436 (LUT3 _1811_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut37.push_back(ctx.genrate_lut(lut37idx0));
    flut37.push_back(lut37idx0);
    auto fvec37 = [flut37](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut37[i](I));
        return ret;
    };

    std::cerr << "\rLUT37   ";
    long gin37_clear = 1 * ct_y0_clear + 2 * ct_x15_clear + 4 * gout22_clear[0];
    std::vector<long> gout37_clear = fvec37(gin37_clear);

    std::vector<RotationPoly> lut38;
    std::vector<long (*)(long)> flut38;
    auto lut38idx0 = [](long I) -> long {
        /* GATE 49 (LUT2 _1424_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut38.push_back(ctx.genrate_lut(lut38idx0));
    flut38.push_back(lut38idx0);
    auto fvec38 = [flut38](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut38[i](I));
        return ret;
    };

    std::cerr << "\rLUT38   ";
    long gin38_clear = 1 * ct_x1_clear + 2 * ct_y3_clear;
    std::vector<long> gout38_clear = fvec38(gin38_clear);

    std::vector<RotationPoly> lut39;
    std::vector<long (*)(long)> flut39;
    auto lut39idx0 = [](long I) -> long {
        /* GATE 433 (LUT2 _1808_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut39.push_back(ctx.genrate_lut(lut39idx0));
    flut39.push_back(lut39idx0);
    auto fvec39 = [flut39](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut39[i](I));
        return ret;
    };

    std::cerr << "\rLUT39   ";
    long gin39_clear = 1 * gout35_clear[0] + 2 * gout37_clear[0];
    std::vector<long> gout39_clear = fvec39(gin39_clear);

    std::vector<RotationPoly> lut40;
    std::vector<long (*)(long)> flut40;
    auto lut40idx0 = [](long I) -> long {
        /* GATE 137 (LUT2 _1512_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut40.push_back(ctx.genrate_lut(lut40idx0));
    flut40.push_back(lut40idx0);
    auto fvec40 = [flut40](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut40[i](I));
        return ret;
    };

    std::cerr << "\rLUT40   ";
    long gin40_clear = 1 * ct_y2_clear + 2 * ct_x6_clear;
    std::vector<long> gout40_clear = fvec40(gin40_clear);

    std::vector<RotationPoly> lut41;
    std::vector<long (*)(long)> flut41;
    auto lut41idx0 = [](long I) -> long {
        /* GATE 67 (LUT2 _1442_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut41.push_back(ctx.genrate_lut(lut41idx0));
    flut41.push_back(lut41idx0);
    auto fvec41 = [flut41](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut41[i](I));
        return ret;
    };

    std::cerr << "\rLUT41   ";
    long gin41_clear = 1 * ct_x0_clear + 2 * ct_y5_clear;
    std::vector<long> gout41_clear = fvec41(gin41_clear);

    std::cerr << "\rFA42    ";
    long gin42_clear = gout19_clear[2] + 1 * ct_x2_clear + 2 * ct_x3_clear + 1 * ct_y2_clear + 2 * ct_y3_clear;
    std::vector<long> gout42_clear = vdecomp(gin42_clear);

    std::vector<RotationPoly> lut43;
    std::vector<long (*)(long)> flut43;
    auto lut43idx0 = [](long I) -> long {
        /* GATE 301 (LUT2 _1676_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut43.push_back(ctx.genrate_lut(lut43idx0));
    flut43.push_back(lut43idx0);
    auto fvec43 = [flut43](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut43[i](I));
        return ret;
    };

    std::cerr << "\rLUT43   ";
    long gin43_clear = 1 * ct_x4_clear + 2 * ct_y8_clear;
    std::vector<long> gout43_clear = fvec43(gin43_clear);

    std::vector<RotationPoly> lut44;
    std::vector<long (*)(long)> flut44;
    auto lut44idx0 = [](long I) -> long {
        /* GATE 454 (LUT2 _1829_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut44.push_back(ctx.genrate_lut(lut44idx0));
    flut44.push_back(lut44idx0);
    auto fvec44 = [flut44](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut44[i](I));
        return ret;
    };

    std::cerr << "\rLUT44   ";
    long gin44_clear = 1 * ct_x1_clear + 2 * ct_y14_clear;
    std::vector<long> gout44_clear = fvec44(gin44_clear);

    std::vector<RotationPoly> lut45;
    std::vector<long (*)(long)> flut45;
    auto lut45idx0 = [](long I) -> long {
        /* GATE 265 (LUT2 _1640_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut45.push_back(ctx.genrate_lut(lut45idx0));
    flut45.push_back(lut45idx0);
    auto fvec45 = [flut45](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut45[i](I));
        return ret;
    };

    std::cerr << "\rLUT45   ";
    long gin45_clear = 1 * ct_x1_clear + 2 * ct_y10_clear;
    std::vector<long> gout45_clear = fvec45(gin45_clear);

    std::vector<RotationPoly> lut46;
    std::vector<long (*)(long)> flut46;
    auto lut46idx0 = [](long I) -> long {
        /* GATE 88 (LUT2 _1463_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut46.push_back(ctx.genrate_lut(lut46idx0));
    flut46.push_back(lut46idx0);
    auto fvec46 = [flut46](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut46[i](I));
        return ret;
    };

    std::cerr << "\rLUT46   ";
    long gin46_clear = 1 * ct_y0_clear + 2 * ct_x6_clear;
    std::vector<long> gout46_clear = fvec46(gin46_clear);

    std::vector<RotationPoly> lut47;
    std::vector<long (*)(long)> flut47;
    auto lut47idx0 = [](long I) -> long {
        /* GATE 64 (LUT2 _1439_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut47.push_back(ctx.genrate_lut(lut47idx0));
    flut47.push_back(lut47idx0);
    auto fvec47 = [flut47](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut47[i](I));
        return ret;
    };

    std::cerr << "\rLUT47   ";
    long gin47_clear = 1 * ct_y0_clear + 2 * ct_x5_clear;
    std::vector<long> gout47_clear = fvec47(gin47_clear);

    std::vector<RotationPoly> lut48;
    std::vector<long (*)(long)> flut48;
    auto lut48idx0 = [](long I) -> long {
        /* GATE 309 (LUT2 _1684_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut48.push_back(ctx.genrate_lut(lut48idx0));
    flut48.push_back(lut48idx0);
    auto fvec48 = [flut48](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut48[i](I));
        return ret;
    };

    std::cerr << "\rLUT48   ";
    long gin48_clear = 1 * ct_x2_clear + 2 * ct_y10_clear;
    std::vector<long> gout48_clear = fvec48(gin48_clear);

    std::vector<RotationPoly> lut49;
    std::vector<long (*)(long)> flut49;
    auto lut49idx0 = [](long I) -> long {
        /* GATE 300 (LUT2 _1675_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut49.push_back(ctx.genrate_lut(lut49idx0));
    flut49.push_back(lut49idx0);
    auto fvec49 = [flut49](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut49[i](I));
        return ret;
    };

    std::cerr << "\rLUT49   ";
    long gin49_clear = 1 * ct_y7_clear + 2 * ct_x5_clear;
    std::vector<long> gout49_clear = fvec49(gin49_clear);

    std::vector<RotationPoly> lut50;
    std::vector<long (*)(long)> flut50;
    auto lut50idx0 = [](long I) -> long {
        /* GATE 148 (LUT2 _1523_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut50.push_back(ctx.genrate_lut(lut50idx0));
    flut50.push_back(lut50idx0);
    auto fvec50 = [flut50](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut50[i](I));
        return ret;
    };

    std::cerr << "\rLUT50   ";
    long gin50_clear = 1 * ct_x0_clear + 2 * ct_y8_clear;
    std::vector<long> gout50_clear = fvec50(gin50_clear);

    std::vector<RotationPoly> lut51;
    std::vector<long (*)(long)> flut51;
    auto lut51idx0 = [](long I) -> long {
        /* GATE 142 (LUT2 _1517_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut51.push_back(ctx.genrate_lut(lut51idx0));
    flut51.push_back(lut51idx0);
    auto fvec51 = [flut51](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut51[i](I));
        return ret;
    };

    std::cerr << "\rLUT51   ";
    long gin51_clear = 1 * ct_y3_clear + 2 * ct_x5_clear;
    std::vector<long> gout51_clear = fvec51(gin51_clear);

    std::vector<RotationPoly> lut52;
    std::vector<long (*)(long)> flut52;
    auto lut52idx0 = [](long I) -> long {
        /* GATE 302 (LUT2 _1677_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut52.push_back(ctx.genrate_lut(lut52idx0));
    flut52.push_back(lut52idx0);
    auto fvec52 = [flut52](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut52[i](I));
        return ret;
    };

    std::cerr << "\rLUT52   ";
    long gin52_clear = 1 * ct_y6_clear + 2 * ct_x6_clear;
    std::vector<long> gout52_clear = fvec52(gin52_clear);

    std::vector<RotationPoly> lut53;
    std::vector<long (*)(long)> flut53;
    auto lut53idx0 = [](long I) -> long {
        /* GATE 451 (LUT3 _1826_ INIT 0x80 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut53.push_back(ctx.genrate_lut(lut53idx0));
    flut53.push_back(lut53idx0);
    auto lut53idx1 = [](long I) -> long {
        /* GATE 394 (LUT3 _1769_ INIT 0x78 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut53.push_back(ctx.genrate_lut(lut53idx1));
    flut53.push_back(lut53idx1);
    auto fvec53 = [flut53](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut53[i](I));
        return ret;
    };

    std::cerr << "\rLUT53   ";
    long gin53_clear = 1 * gout14_clear[0] + 2 * ct_y14_clear + 4 * ct_x0_clear;
    std::vector<long> gout53_clear = fvec53(gin53_clear);

    std::vector<RotationPoly> lut54;
    std::vector<long (*)(long)> flut54;
    auto lut54idx0 = [](long I) -> long {
        /* GATE 258 (LUT2 _1633_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut54.push_back(ctx.genrate_lut(lut54idx0));
    flut54.push_back(lut54idx0);
    auto fvec54 = [flut54](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut54[i](I));
        return ret;
    };

    std::cerr << "\rLUT54   ";
    long gin54_clear = 1 * ct_y8_clear + 2 * ct_x3_clear;
    std::vector<long> gout54_clear = fvec54(gin54_clear);

    std::vector<RotationPoly> lut55;
    std::vector<long (*)(long)> flut55;
    auto lut55idx0 = [](long I) -> long {
        /* GATE 69 (LUT2 _1444_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut55.push_back(ctx.genrate_lut(lut55idx0));
    flut55.push_back(lut55idx0);
    auto fvec55 = [flut55](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut55[i](I));
        return ret;
    };

    std::cerr << "\rLUT55   ";
    long gin55_clear = 1 * gout7_clear[0] + 2 * gout25_clear[0];
    std::vector<long> gout55_clear = fvec55(gin55_clear);

    std::cerr << "\rINV56   ";
    std::vector<long> gout56_clear;
    gout56_clear.push_back(1 - ct_y14_clear);

    std::vector<RotationPoly> lut57;
    std::vector<long (*)(long)> flut57;
    auto lut57idx0 = [](long I) -> long {
        /* GATE 138 (LUT2 _1513_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut57.push_back(ctx.genrate_lut(lut57idx0));
    flut57.push_back(lut57idx0);
    auto fvec57 = [flut57](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut57[i](I));
        return ret;
    };

    std::cerr << "\rLUT57   ";
    long gin57_clear = 1 * ct_x8_clear + 2 * ct_y0_clear;
    std::vector<long> gout57_clear = fvec57(gin57_clear);

    std::vector<RotationPoly> lut58;
    std::vector<long (*)(long)> flut58;
    auto lut58idx0 = [](long I) -> long {
        /* GATE 107 (LUT2 _1482_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut58.push_back(ctx.genrate_lut(lut58idx0));
    flut58.push_back(lut58idx0);
    auto fvec58 = [flut58](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut58[i](I));
        return ret;
    };

    std::cerr << "\rLUT58   ";
    long gin58_clear = 1 * ct_y1_clear + 2 * ct_x6_clear;
    std::vector<long> gout58_clear = fvec58(gin58_clear);

    std::vector<RotationPoly> lut59;
    std::vector<long (*)(long)> flut59;
    auto lut59idx0 = [](long I) -> long {
        /* GATE 453 (LUT3 _1828_ INIT 0x4b PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut59.push_back(ctx.genrate_lut(lut59idx0));
    flut59.push_back(lut59idx0);
    auto fvec59 = [flut59](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut59[i](I));
        return ret;
    };

    std::cerr << "\rLUT59   ";
    long gin59_clear = 1 * ct_x0_clear + 2 * gout44_clear[0] + 4 * ct_y15_clear;
    std::vector<long> gout59_clear = fvec59(gin59_clear);

    std::vector<RotationPoly> lut60;
    std::vector<long (*)(long)> flut60;
    auto lut60idx0 = [](long I) -> long {
        /* GATE 5 (LUT2 _1380_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut60.push_back(ctx.genrate_lut(lut60idx0));
    flut60.push_back(lut60idx0);
    auto fvec60 = [flut60](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut60[i](I));
        return ret;
    };

    std::cerr << "\rLUT60   ";
    long gin60_clear = 1 * ct_op6_clear + 2 * ct_op7_clear;
    std::vector<long> gout60_clear = fvec60(gin60_clear);

    std::vector<RotationPoly> lut61;
    std::vector<long (*)(long)> flut61;
    auto lut61idx0 = [](long I) -> long {
        /* GATE 87 (LUT2 _1462_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut61.push_back(ctx.genrate_lut(lut61idx0));
    flut61.push_back(lut61idx0);
    auto fvec61 = [flut61](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut61[i](I));
        return ret;
    };

    std::cerr << "\rLUT61   ";
    long gin61_clear = 1 * ct_x4_clear + 2 * ct_y2_clear;
    std::vector<long> gout61_clear = fvec61(gin61_clear);

    std::vector<RotationPoly> lut62;
    std::vector<long (*)(long)> flut62;
    auto lut62idx0 = [](long I) -> long {
        /* GATE 90 (LUT2 _1465_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut62.push_back(ctx.genrate_lut(lut62idx0));
    flut62.push_back(lut62idx0);
    auto fvec62 = [flut62](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut62[i](I));
        return ret;
    };

    std::cerr << "\rLUT62   ";
    long gin62_clear = 1 * ct_x2_clear + 2 * ct_y4_clear;
    std::vector<long> gout62_clear = fvec62(gin62_clear);

    std::vector<RotationPoly> lut63;
    std::vector<long (*)(long)> flut63;
    auto lut63idx0 = [](long I) -> long {
        /* GATE 290 (LUT2 _1665_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut63.push_back(ctx.genrate_lut(lut63idx0));
    flut63.push_back(lut63idx0);
    auto fvec63 = [flut63](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut63[i](I));
        return ret;
    };

    std::cerr << "\rLUT63   ";
    long gin63_clear = 1 * ct_x10_clear + 2 * ct_y2_clear;
    std::vector<long> gout63_clear = fvec63(gin63_clear);

    std::cerr << "\rINV64   ";
    std::vector<long> gout64_clear;
    gout64_clear.push_back(1 - ct_y13_clear);

    std::vector<RotationPoly> lut65;
    std::vector<long (*)(long)> flut65;
    auto lut65idx0 = [](long I) -> long {
        /* GATE 293 (LUT2 _1668_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut65.push_back(ctx.genrate_lut(lut65idx0));
    flut65.push_back(lut65idx0);
    auto fvec65 = [flut65](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut65[i](I));
        return ret;
    };

    std::cerr << "\rLUT65   ";
    long gin65_clear = 1 * ct_y4_clear + 2 * ct_x8_clear;
    std::vector<long> gout65_clear = fvec65(gin65_clear);

    std::vector<RotationPoly> lut66;
    std::vector<long (*)(long)> flut66;
    auto lut66idx0 = [](long I) -> long {
        /* GATE 264 (LUT3 _1639_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut66.push_back(ctx.genrate_lut(lut66idx0));
    flut66.push_back(lut66idx0);
    auto lut66idx1 = [](long I) -> long {
        /* GATE 307 (LUT3 _1682_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut66.push_back(ctx.genrate_lut(lut66idx1));
    flut66.push_back(lut66idx1);
    auto fvec66 = [flut66](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut66[i](I));
        return ret;
    };

    std::cerr << "\rLUT66   ";
    long gin66_clear = 1 * gout45_clear[0] + 2 * gout32_clear[0] + 4 * gout9_clear[0];
    std::vector<long> gout66_clear = fvec66(gin66_clear);

    std::cerr << "\rINV67   ";
    std::vector<long> gout67_clear;
    gout67_clear.push_back(1 - ct_y4_clear);

    std::vector<RotationPoly> lut68;
    std::vector<long (*)(long)> flut68;
    auto lut68idx0 = [](long I) -> long {
        /* GATE 312 (LUT2 _1687_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut68.push_back(ctx.genrate_lut(lut68idx0));
    flut68.push_back(lut68idx0);
    auto fvec68 = [flut68](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut68[i](I));
        return ret;
    };

    std::cerr << "\rLUT68   ";
    long gin68_clear = 1 * ct_x0_clear + 2 * ct_y12_clear;
    std::vector<long> gout68_clear = fvec68(gin68_clear);

    std::cerr << "\rINV69   ";
    std::vector<long> gout69_clear;
    gout69_clear.push_back(1 - ct_y12_clear);

    std::cerr << "\rINV70   ";
    std::vector<long> gout70_clear;
    gout70_clear.push_back(1 - ct_y3_clear);

    std::cerr << "\rINV71   ";
    std::vector<long> gout71_clear;
    gout71_clear.push_back(1 - ct_y11_clear);

    std::vector<RotationPoly> lut72;
    std::vector<long (*)(long)> flut72;
    auto lut72idx0 = [](long I) -> long {
        /* GATE 136 (LUT2 _1511_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut72.push_back(ctx.genrate_lut(lut72idx0));
    flut72.push_back(lut72idx0);
    auto fvec72 = [flut72](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut72[i](I));
        return ret;
    };

    std::cerr << "\rLUT72   ";
    long gin72_clear = 1 * ct_y1_clear + 2 * ct_x7_clear;
    std::vector<long> gout72_clear = fvec72(gin72_clear);

    std::vector<RotationPoly> lut73;
    std::vector<long (*)(long)> flut73;
    auto lut73idx0 = [](long I) -> long {
        /* GATE 86 (LUT2 _1461_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut73.push_back(ctx.genrate_lut(lut73idx0));
    flut73.push_back(lut73idx0);
    auto fvec73 = [flut73](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut73[i](I));
        return ret;
    };

    std::cerr << "\rLUT73   ";
    long gin73_clear = 1 * ct_y1_clear + 2 * ct_x5_clear;
    std::vector<long> gout73_clear = fvec73(gin73_clear);

    std::vector<RotationPoly> lut74;
    std::vector<long (*)(long)> flut74;
    auto lut74idx0 = [](long I) -> long {
        /* GATE 299 (LUT3 _1674_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut74.push_back(ctx.genrate_lut(lut74idx0));
    flut74.push_back(lut74idx0);
    auto lut74idx1 = [](long I) -> long {
        /* GATE 342 (LUT3 _1717_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut74.push_back(ctx.genrate_lut(lut74idx1));
    flut74.push_back(lut74idx1);
    auto fvec74 = [flut74](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut74[i](I));
        return ret;
    };

    std::cerr << "\rLUT74   ";
    long gin74_clear = 1 * gout49_clear[0] + 2 * gout43_clear[0] + 4 * gout52_clear[0];
    std::vector<long> gout74_clear = fvec74(gin74_clear);

    std::vector<RotationPoly> lut75;
    std::vector<long (*)(long)> flut75;
    auto lut75idx0 = [](long I) -> long {
        /* GATE 289 (LUT2 _1664_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut75.push_back(ctx.genrate_lut(lut75idx0));
    flut75.push_back(lut75idx0);
    auto fvec75 = [flut75](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut75[i](I));
        return ret;
    };

    std::cerr << "\rLUT75   ";
    long gin75_clear = 1 * ct_x11_clear + 2 * ct_y1_clear;
    std::vector<long> gout75_clear = fvec75(gin75_clear);

    std::vector<RotationPoly> lut76;
    std::vector<long (*)(long)> flut76;
    auto lut76idx0 = [](long I) -> long {
        /* GATE 140 (LUT2 _1515_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut76.push_back(ctx.genrate_lut(lut76idx0));
    flut76.push_back(lut76idx0);
    auto fvec76 = [flut76](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut76[i](I));
        return ret;
    };

    std::cerr << "\rLUT76   ";
    long gin76_clear = 1 * ct_x4_clear + 2 * ct_y4_clear;
    std::vector<long> gout76_clear = fvec76(gin76_clear);

    std::vector<RotationPoly> lut77;
    std::vector<long (*)(long)> flut77;
    auto lut77idx0 = [](long I) -> long {
        /* GATE 295 (LUT2 _1670_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut77.push_back(ctx.genrate_lut(lut77idx0));
    flut77.push_back(lut77idx0);
    auto fvec77 = [flut77](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut77[i](I));
        return ret;
    };

    std::cerr << "\rLUT77   ";
    long gin77_clear = 1 * ct_y3_clear + 2 * ct_x9_clear;
    std::vector<long> gout77_clear = fvec77(gin77_clear);

    std::vector<RotationPoly> lut78;
    std::vector<long (*)(long)> flut78;
    auto lut78idx0 = [](long I) -> long {
        /* GATE 109 (LUT2 _1484_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut78.push_back(ctx.genrate_lut(lut78idx0));
    flut78.push_back(lut78idx0);
    auto fvec78 = [flut78](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut78[i](I));
        return ret;
    };

    std::cerr << "\rLUT78   ";
    long gin78_clear = 1 * ct_y0_clear + 2 * ct_x7_clear;
    std::vector<long> gout78_clear = fvec78(gin78_clear);

    std::vector<RotationPoly> lut79;
    std::vector<long (*)(long)> flut79;
    auto lut79idx0 = [](long I) -> long {
        /* GATE 173 (LUT2 _1548_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut79.push_back(ctx.genrate_lut(lut79idx0));
    flut79.push_back(lut79idx0);
    auto fvec79 = [flut79](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut79[i](I));
        return ret;
    };

    std::cerr << "\rLUT79   ";
    long gin79_clear = 1 * ct_x9_clear + 2 * ct_y0_clear;
    std::vector<long> gout79_clear = fvec79(gin79_clear);

    std::vector<RotationPoly> lut80;
    std::vector<long (*)(long)> flut80;
    auto lut80idx0 = [](long I) -> long {
        /* GATE 335 (LUT2 _1710_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut80.push_back(ctx.genrate_lut(lut80idx0));
    flut80.push_back(lut80idx0);
    auto fvec80 = [flut80](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut80[i](I));
        return ret;
    };

    std::cerr << "\rLUT80   ";
    long gin80_clear = 1 * ct_x11_clear + 2 * ct_y2_clear;
    std::vector<long> gout80_clear = fvec80(gin80_clear);

    std::vector<RotationPoly> lut81;
    std::vector<long (*)(long)> flut81;
    auto lut81idx0 = [](long I) -> long {
        /* GATE 92 (LUT2 _1467_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut81.push_back(ctx.genrate_lut(lut81idx0));
    flut81.push_back(lut81idx0);
    auto fvec81 = [flut81](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut81[i](I));
        return ret;
    };

    std::cerr << "\rLUT81   ";
    long gin81_clear = 1 * ct_y3_clear + 2 * ct_x3_clear;
    std::vector<long> gout81_clear = fvec81(gin81_clear);

    std::cerr << "\rINV82   ";
    std::vector<long> gout82_clear;
    gout82_clear.push_back(1 - ct_y15_clear);

    std::vector<RotationPoly> lut83;
    std::vector<long (*)(long)> flut83;
    auto lut83idx0 = [](long I) -> long {
        /* GATE 334 (LUT2 _1709_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut83.push_back(ctx.genrate_lut(lut83idx0));
    flut83.push_back(lut83idx0);
    auto fvec83 = [flut83](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut83[i](I));
        return ret;
    };

    std::cerr << "\rLUT83   ";
    long gin83_clear = 1 * ct_x12_clear + 2 * ct_y1_clear;
    std::vector<long> gout83_clear = fvec83(gin83_clear);

    std::vector<RotationPoly> lut84;
    std::vector<long (*)(long)> flut84;
    auto lut84idx0 = [](long I) -> long {
        /* GATE 91 (LUT2 _1466_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut84.push_back(ctx.genrate_lut(lut84idx0));
    flut84.push_back(lut84idx0);
    auto fvec84 = [flut84](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut84[i](I));
        return ret;
    };

    std::cerr << "\rLUT84   ";
    long gin84_clear = 1 * ct_x1_clear + 2 * ct_y5_clear;
    std::vector<long> gout84_clear = fvec84(gin84_clear);

    std::vector<RotationPoly> lut85;
    std::vector<long (*)(long)> flut85;
    auto lut85idx0 = [](long I) -> long {
        /* GATE 147 (LUT2 _1522_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut85.push_back(ctx.genrate_lut(lut85idx0));
    flut85.push_back(lut85idx0);
    auto fvec85 = [flut85](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut85[i](I));
        return ret;
    };

    std::cerr << "\rLUT85   ";
    long gin85_clear = 1 * ct_x1_clear + 2 * ct_y7_clear;
    std::vector<long> gout85_clear = fvec85(gin85_clear);

    std::cerr << "\rINV86   ";
    std::vector<long> gout86_clear;
    gout86_clear.push_back(1 - ct_y2_clear);

    std::vector<RotationPoly> lut87;
    std::vector<long (*)(long)> flut87;
    auto lut87idx0 = [](long I) -> long {
        /* GATE 311 (LUT2 _1686_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut87.push_back(ctx.genrate_lut(lut87idx0));
    flut87.push_back(lut87idx0);
    auto fvec87 = [flut87](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut87[i](I));
        return ret;
    };

    std::cerr << "\rLUT87   ";
    long gin87_clear = 1 * ct_y9_clear + 2 * ct_x3_clear;
    std::vector<long> gout87_clear = fvec87(gin87_clear);

    std::vector<RotationPoly> lut88;
    std::vector<long (*)(long)> flut88;
    auto lut88idx0 = [](long I) -> long {
        /* GATE 346 (LUT2 _1721_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut88.push_back(ctx.genrate_lut(lut88idx0));
    flut88.push_back(lut88idx0);
    auto fvec88 = [flut88](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut88[i](I));
        return ret;
    };

    std::cerr << "\rLUT88   ";
    long gin88_clear = 1 * ct_y8_clear + 2 * ct_x5_clear;
    std::vector<long> gout88_clear = fvec88(gin88_clear);

    std::vector<RotationPoly> lut89;
    std::vector<long (*)(long)> flut89;
    auto lut89idx0 = [](long I) -> long {
        /* GATE 141 (LUT2 _1516_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut89.push_back(ctx.genrate_lut(lut89idx0));
    flut89.push_back(lut89idx0);
    auto fvec89 = [flut89](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut89[i](I));
        return ret;
    };

    std::cerr << "\rLUT89   ";
    long gin89_clear = 1 * ct_y5_clear + 2 * ct_x3_clear;
    std::vector<long> gout89_clear = fvec89(gin89_clear);

    std::cerr << "\rFA90    ";
    long gin90_clear = gout42_clear[2] + 1 * ct_x4_clear + 2 * ct_x5_clear + 1 * ct_y4_clear + 2 * ct_y5_clear;
    std::vector<long> gout90_clear = vdecomp(gin90_clear);

    std::cerr << "\rINV91   ";
    std::vector<long> gout91_clear;
    gout91_clear.push_back(1 - ct_y10_clear);

    std::vector<RotationPoly> lut92;
    std::vector<long (*)(long)> flut92;
    auto lut92idx0 = [](long I) -> long {
        /* GATE 339 (LUT2 _1714_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut92.push_back(ctx.genrate_lut(lut92idx0));
    flut92.push_back(lut92idx0);
    auto fvec92 = [flut92](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut92[i](I));
        return ret;
    };

    std::cerr << "\rLUT92   ";
    long gin92_clear = 1 * ct_x8_clear + 2 * ct_y5_clear;
    std::vector<long> gout92_clear = fvec92(gin92_clear);

    std::vector<RotationPoly> lut93;
    std::vector<long (*)(long)> flut93;
    auto lut93idx0 = [](long I) -> long {
        /* GATE 310 (LUT2 _1685_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut93.push_back(ctx.genrate_lut(lut93idx0));
    flut93.push_back(lut93idx0);
    auto fvec93 = [flut93](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut93[i](I));
        return ret;
    };

    std::cerr << "\rLUT93   ";
    long gin93_clear = 1 * ct_x1_clear + 2 * ct_y11_clear;
    std::vector<long> gout93_clear = fvec93(gin93_clear);

    std::cerr << "\rINV94   ";
    std::vector<long> gout94_clear;
    gout94_clear.push_back(1 - ct_y0_clear);

    std::vector<RotationPoly> lut95;
    std::vector<long (*)(long)> flut95;
    auto lut95idx0 = [](long I) -> long {
        /* GATE 345 (LUT2 _1720_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut95.push_back(ctx.genrate_lut(lut95idx0));
    flut95.push_back(lut95idx0);
    auto fvec95 = [flut95](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut95[i](I));
        return ret;
    };

    std::cerr << "\rLUT95   ";
    long gin95_clear = 1 * ct_y7_clear + 2 * ct_x6_clear;
    std::vector<long> gout95_clear = fvec95(gin95_clear);

    std::vector<RotationPoly> lut96;
    std::vector<long (*)(long)> flut96;
    auto lut96idx0 = [](long I) -> long {
        /* GATE 336 (LUT2 _1711_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut96.push_back(ctx.genrate_lut(lut96idx0));
    flut96.push_back(lut96idx0);
    auto fvec96 = [flut96](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut96[i](I));
        return ret;
    };

    std::cerr << "\rLUT96   ";
    long gin96_clear = 1 * ct_x13_clear + 2 * ct_y0_clear;
    std::vector<long> gout96_clear = fvec96(gin96_clear);

    std::vector<RotationPoly> lut97;
    std::vector<long (*)(long)> flut97;
    auto lut97idx0 = [](long I) -> long {
        /* GATE 149 (LUT2 _1524_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut97.push_back(ctx.genrate_lut(lut97idx0));
    flut97.push_back(lut97idx0);
    auto fvec97 = [flut97](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut97[i](I));
        return ret;
    };

    std::cerr << "\rLUT97   ";
    long gin97_clear = 1 * ct_y6_clear + 2 * ct_x2_clear;
    std::vector<long> gout97_clear = fvec97(gin97_clear);

    std::vector<RotationPoly> lut98;
    std::vector<long (*)(long)> flut98;
    auto lut98idx0 = [](long I) -> long {
        /* GATE 177 (LUT2 _1552_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut98.push_back(ctx.genrate_lut(lut98idx0));
    flut98.push_back(lut98idx0);
    auto fvec98 = [flut98](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut98[i](I));
        return ret;
    };

    std::cerr << "\rLUT98   ";
    long gin98_clear = 1 * ct_y3_clear + 2 * ct_x6_clear;
    std::vector<long> gout98_clear = fvec98(gin98_clear);

    std::cerr << "\rINV99   ";
    std::vector<long> gout99_clear;
    gout99_clear.push_back(1 - ct_y1_clear);

    std::cerr << "\rINV100   ";
    std::vector<long> gout100_clear;
    gout100_clear.push_back(1 - ct_y9_clear);

    std::vector<RotationPoly> lut101;
    std::vector<long (*)(long)> flut101;
    auto lut101idx0 = [](long I) -> long {
        /* GATE 108 (LUT2 _1483_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut101.push_back(ctx.genrate_lut(lut101idx0));
    flut101.push_back(lut101idx0);
    auto fvec101 = [flut101](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut101[i](I));
        return ret;
    };

    std::cerr << "\rLUT101   ";
    long gin101_clear = 1 * ct_y2_clear + 2 * ct_x5_clear;
    std::vector<long> gout101_clear = fvec101(gin101_clear);

    std::vector<RotationPoly> lut102;
    std::vector<long (*)(long)> flut102;
    auto lut102idx0 = [](long I) -> long {
        /* GATE 175 (LUT2 _1550_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut102.push_back(ctx.genrate_lut(lut102idx0));
    flut102.push_back(lut102idx0);
    auto fvec102 = [flut102](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut102[i](I));
        return ret;
    };

    std::cerr << "\rLUT102   ";
    long gin102_clear = 1 * ct_y4_clear + 2 * ct_x5_clear;
    std::vector<long> gout102_clear = fvec102(gin102_clear);

    std::cerr << "\rINV103   ";
    std::vector<long> gout103_clear;
    gout103_clear.push_back(1 - ct_y8_clear);

    std::vector<RotationPoly> lut104;
    std::vector<long (*)(long)> flut104;
    auto lut104idx0 = [](long I) -> long {
        /* GATE 172 (LUT2 _1547_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut104.push_back(ctx.genrate_lut(lut104idx0));
    flut104.push_back(lut104idx0);
    auto fvec104 = [flut104](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut104[i](I));
        return ret;
    };

    std::cerr << "\rLUT104   ";
    long gin104_clear = 1 * ct_y2_clear + 2 * ct_x7_clear;
    std::vector<long> gout104_clear = fvec104(gin104_clear);

    std::cerr << "\rINV105   ";
    std::vector<long> gout105_clear;
    gout105_clear.push_back(1 - ct_y7_clear);

    std::vector<RotationPoly> lut106;
    std::vector<long (*)(long)> flut106;
    auto lut106idx0 = [](long I) -> long {
        /* GATE 347 (LUT2 _1722_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut106.push_back(ctx.genrate_lut(lut106idx0));
    flut106.push_back(lut106idx0);
    auto fvec106 = [flut106](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut106[i](I));
        return ret;
    };

    std::cerr << "\rLUT106   ";
    long gin106_clear = 1 * ct_y6_clear + 2 * ct_x7_clear;
    std::vector<long> gout106_clear = fvec106(gin106_clear);

    std::cerr << "\rINV107   ";
    std::vector<long> gout107_clear;
    gout107_clear.push_back(1 - ct_y6_clear);

    std::vector<RotationPoly> lut108;
    std::vector<long (*)(long)> flut108;
    auto lut108idx0 = [](long I) -> long {
        /* GATE 183 (LUT2 _1558_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut108.push_back(ctx.genrate_lut(lut108idx0));
    flut108.push_back(lut108idx0);
    auto fvec108 = [flut108](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut108[i](I));
        return ret;
    };

    std::cerr << "\rLUT108   ";
    long gin108_clear = 1 * ct_x1_clear + 2 * ct_y8_clear;
    std::vector<long> gout108_clear = fvec108(gin108_clear);

    std::cerr << "\rINV109   ";
    std::vector<long> gout109_clear;
    gout109_clear.push_back(1 - ct_y5_clear);

    std::vector<RotationPoly> lut110;
    std::vector<long (*)(long)> flut110;
    auto lut110idx0 = [](long I) -> long {
        /* GATE 171 (LUT2 _1546_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut110.push_back(ctx.genrate_lut(lut110idx0));
    flut110.push_back(lut110idx0);
    auto fvec110 = [flut110](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut110[i](I));
        return ret;
    };

    std::cerr << "\rLUT110   ";
    long gin110_clear = 1 * ct_x8_clear + 2 * ct_y1_clear;
    std::vector<long> gout110_clear = fvec110(gin110_clear);

    std::vector<RotationPoly> lut111;
    std::vector<long (*)(long)> flut111;
    auto lut111idx0 = [](long I) -> long {
        /* GATE 358 (LUT2 _1733_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut111.push_back(ctx.genrate_lut(lut111idx0));
    flut111.push_back(lut111idx0);
    auto fvec111 = [flut111](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut111[i](I));
        return ret;
    };

    std::cerr << "\rLUT111   ";
    long gin111_clear = 1 * ct_x1_clear + 2 * ct_y12_clear;
    std::vector<long> gout111_clear = fvec111(gin111_clear);

    std::vector<RotationPoly> lut112;
    std::vector<long (*)(long)> flut112;
    auto lut112idx0 = [](long I) -> long {
        /* GATE 208 (LUT2 _1583_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut112.push_back(ctx.genrate_lut(lut112idx0));
    flut112.push_back(lut112idx0);
    auto fvec112 = [flut112](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut112[i](I));
        return ret;
    };

    std::cerr << "\rLUT112   ";
    long gin112_clear = 1 * ct_x8_clear + 2 * ct_y2_clear;
    std::vector<long> gout112_clear = fvec112(gin112_clear);

    std::vector<RotationPoly> lut113;
    std::vector<long (*)(long)> flut113;
    auto lut113idx0 = [](long I) -> long {
        /* GATE 340 (LUT2 _1715_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut113.push_back(ctx.genrate_lut(lut113idx0));
    flut113.push_back(lut113idx0);
    auto fvec113 = [flut113](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut113[i](I));
        return ret;
    };

    std::cerr << "\rLUT113   ";
    long gin113_clear = 1 * ct_x10_clear + 2 * ct_y3_clear;
    std::vector<long> gout113_clear = fvec113(gin113_clear);

    std::vector<RotationPoly> lut114;
    std::vector<long (*)(long)> flut114;
    auto lut114idx0 = [](long I) -> long {
        /* GATE 355 (LUT2 _1730_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut114.push_back(ctx.genrate_lut(lut114idx0));
    flut114.push_back(lut114idx0);
    auto fvec114 = [flut114](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut114[i](I));
        return ret;
    };

    std::cerr << "\rLUT114   ";
    long gin114_clear = 1 * ct_x2_clear + 2 * ct_y11_clear;
    std::vector<long> gout114_clear = fvec114(gin114_clear);

    std::vector<RotationPoly> lut115;
    std::vector<long (*)(long)> flut115;
    auto lut115idx0 = [](long I) -> long {
        /* GATE 182 (LUT2 _1557_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut115.push_back(ctx.genrate_lut(lut115idx0));
    flut115.push_back(lut115idx0);
    auto fvec115 = [flut115](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut115[i](I));
        return ret;
    };

    std::cerr << "\rLUT115   ";
    long gin115_clear = 1 * ct_x2_clear + 2 * ct_y7_clear;
    std::vector<long> gout115_clear = fvec115(gin115_clear);

    std::vector<RotationPoly> lut116;
    std::vector<long (*)(long)> flut116;
    auto lut116idx0 = [](long I) -> long {
        /* GATE 207 (LUT2 _1582_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut116.push_back(ctx.genrate_lut(lut116idx0));
    flut116.push_back(lut116idx0);
    auto fvec116 = [flut116](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut116[i](I));
        return ret;
    };

    std::cerr << "\rLUT116   ";
    long gin116_clear = 1 * ct_x9_clear + 2 * ct_y1_clear;
    std::vector<long> gout116_clear = fvec116(gin116_clear);

    std::vector<RotationPoly> lut117;
    std::vector<long (*)(long)> flut117;
    auto lut117idx0 = [](long I) -> long {
        /* GATE 205 (LUT3 _1580_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut117.push_back(ctx.genrate_lut(lut117idx0));
    flut117.push_back(lut117idx0);
    auto lut117idx1 = [](long I) -> long {
        /* GATE 170 (LUT3 _1545_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut117.push_back(ctx.genrate_lut(lut117idx1));
    flut117.push_back(lut117idx1);
    auto fvec117 = [flut117](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut117[i](I));
        return ret;
    };

    std::cerr << "\rLUT117   ";
    long gin117_clear = 1 * gout110_clear[0] + 2 * gout104_clear[0] + 4 * gout79_clear[0];
    std::vector<long> gout117_clear = fvec117(gin117_clear);

    std::vector<RotationPoly> lut118;
    std::vector<long (*)(long)> flut118;
    auto lut118idx0 = [](long I) -> long {
        /* GATE 176 (LUT2 _1551_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut118.push_back(ctx.genrate_lut(lut118idx0));
    flut118.push_back(lut118idx0);
    auto fvec118 = [flut118](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut118[i](I));
        return ret;
    };

    std::cerr << "\rLUT118   ";
    long gin118_clear = 1 * ct_x4_clear + 2 * ct_y5_clear;
    std::vector<long> gout118_clear = fvec118(gin118_clear);

    std::vector<RotationPoly> lut119;
    std::vector<long (*)(long)> flut119;
    auto lut119idx0 = [](long I) -> long {
        /* GATE 211 (LUT2 _1586_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut119.push_back(ctx.genrate_lut(lut119idx0));
    flut119.push_back(lut119idx0);
    auto fvec119 = [flut119](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut119[i](I));
        return ret;
    };

    std::cerr << "\rLUT119   ";
    long gin119_clear = 1 * ct_y4_clear + 2 * ct_x6_clear;
    std::vector<long> gout119_clear = fvec119(gin119_clear);

    std::vector<RotationPoly> lut120;
    std::vector<long (*)(long)> flut120;
    auto lut120idx0 = [](long I) -> long {
        /* GATE 338 (LUT2 _1713_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut120.push_back(ctx.genrate_lut(lut120idx0));
    flut120.push_back(lut120idx0);
    auto fvec120 = [flut120](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut120[i](I));
        return ret;
    };

    std::cerr << "\rLUT120   ";
    long gin120_clear = 1 * ct_y4_clear + 2 * ct_x9_clear;
    std::vector<long> gout120_clear = fvec120(gin120_clear);

    std::vector<RotationPoly> lut121;
    std::vector<long (*)(long)> flut121;
    auto lut121idx0 = [](long I) -> long {
        /* GATE 357 (LUT3 _1732_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut121.push_back(ctx.genrate_lut(lut121idx0));
    flut121.push_back(lut121idx0);
    auto fvec121 = [flut121](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut121[i](I));
        return ret;
    };

    std::cerr << "\rLUT121   ";
    long gin121_clear = 1 * gout111_clear[0] + 2 * ct_x0_clear + 4 * ct_y13_clear;
    std::vector<long> gout121_clear = fvec121(gin121_clear);

    std::vector<RotationPoly> lut122;
    std::vector<long (*)(long)> flut122;
    auto lut122idx0 = [](long I) -> long {
        /* GATE 219 (LUT2 _1594_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut122.push_back(ctx.genrate_lut(lut122idx0));
    flut122.push_back(lut122idx0);
    auto fvec122 = [flut122](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut122[i](I));
        return ret;
    };

    std::cerr << "\rLUT122   ";
    long gin122_clear = 1 * ct_x2_clear + 2 * ct_y8_clear;
    std::vector<long> gout122_clear = fvec122(gin122_clear);

    std::vector<RotationPoly> lut123;
    std::vector<long (*)(long)> flut123;
    auto lut123idx0 = [](long I) -> long {
        /* GATE 209 (LUT2 _1584_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut123.push_back(ctx.genrate_lut(lut123idx0));
    flut123.push_back(lut123idx0);
    auto fvec123 = [flut123](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut123[i](I));
        return ret;
    };

    std::cerr << "\rLUT123   ";
    long gin123_clear = 1 * ct_x10_clear + 2 * ct_y0_clear;
    std::vector<long> gout123_clear = fvec123(gin123_clear);

    std::vector<RotationPoly> lut124;
    std::vector<long (*)(long)> flut124;
    auto lut124idx0 = [](long I) -> long {
        /* GATE 206 (LUT3 _1581_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut124.push_back(ctx.genrate_lut(lut124idx0));
    flut124.push_back(lut124idx0);
    auto lut124idx1 = [](long I) -> long {
        /* GATE 244 (LUT3 _1619_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut124.push_back(ctx.genrate_lut(lut124idx1));
    flut124.push_back(lut124idx1);
    auto fvec124 = [flut124](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut124[i](I));
        return ret;
    };

    std::cerr << "\rLUT124   ";
    long gin124_clear = 1 * gout116_clear[0] + 2 * gout112_clear[0] + 4 * gout123_clear[0];
    std::vector<long> gout124_clear = fvec124(gin124_clear);

    std::vector<RotationPoly> lut125;
    std::vector<long (*)(long)> flut125;
    auto lut125idx0 = [](long I) -> long {
        /* GATE 213 (LUT2 _1588_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut125.push_back(ctx.genrate_lut(lut125idx0));
    flut125.push_back(lut125idx0);
    auto fvec125 = [flut125](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut125[i](I));
        return ret;
    };

    std::cerr << "\rLUT125   ";
    long gin125_clear = 1 * ct_y3_clear + 2 * ct_x7_clear;
    std::vector<long> gout125_clear = fvec125(gin125_clear);

    std::vector<RotationPoly> lut126;
    std::vector<long (*)(long)> flut126;
    auto lut126idx0 = [](long I) -> long {
        /* GATE 184 (LUT2 _1559_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut126.push_back(ctx.genrate_lut(lut126idx0));
    flut126.push_back(lut126idx0);
    auto fvec126 = [flut126](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut126[i](I));
        return ret;
    };

    std::cerr << "\rLUT126   ";
    long gin126_clear = 1 * ct_y6_clear + 2 * ct_x3_clear;
    std::vector<long> gout126_clear = fvec126(gin126_clear);

    std::vector<RotationPoly> lut127;
    std::vector<long (*)(long)> flut127;
    auto lut127idx0 = [](long I) -> long {
        /* GATE 379 (LUT2 _1754_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut127.push_back(ctx.genrate_lut(lut127idx0));
    flut127.push_back(lut127idx0);
    auto fvec127 = [flut127](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut127[i](I));
        return ret;
    };

    std::cerr << "\rLUT127   ";
    long gin127_clear = 1 * ct_x12_clear + 2 * ct_y2_clear;
    std::vector<long> gout127_clear = fvec127(gin127_clear);

    std::vector<RotationPoly> lut128;
    std::vector<long (*)(long)> flut128;
    auto lut128idx0 = [](long I) -> long {
        /* GATE 356 (LUT2 _1731_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut128.push_back(ctx.genrate_lut(lut128idx0));
    flut128.push_back(lut128idx0);
    auto fvec128 = [flut128](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut128[i](I));
        return ret;
    };

    std::cerr << "\rLUT128   ";
    long gin128_clear = 1 * ct_x4_clear + 2 * ct_y9_clear;
    std::vector<long> gout128_clear = fvec128(gin128_clear);

    std::vector<RotationPoly> lut129;
    std::vector<long (*)(long)> flut129;
    auto lut129idx0 = [](long I) -> long {
        /* GATE 354 (LUT2 _1729_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut129.push_back(ctx.genrate_lut(lut129idx0));
    flut129.push_back(lut129idx0);
    auto fvec129 = [flut129](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut129[i](I));
        return ret;
    };

    std::cerr << "\rLUT129   ";
    long gin129_clear = 1 * ct_y10_clear + 2 * ct_x3_clear;
    std::vector<long> gout129_clear = fvec129(gin129_clear);

    std::vector<RotationPoly> lut130;
    std::vector<long (*)(long)> flut130;
    auto lut130idx0 = [](long I) -> long {
        /* GATE 387 (LUT2 _1762_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut130.push_back(ctx.genrate_lut(lut130idx0));
    flut130.push_back(lut130idx0);
    auto fvec130 = [flut130](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut130[i](I));
        return ret;
    };

    std::cerr << "\rLUT130   ";
    long gin130_clear = 1 * ct_x6_clear + 2 * ct_y8_clear;
    std::vector<long> gout130_clear = fvec130(gin130_clear);

    std::vector<RotationPoly> lut131;
    std::vector<long (*)(long)> flut131;
    auto lut131idx0 = [](long I) -> long {
        /* GATE 212 (LUT2 _1587_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut131.push_back(ctx.genrate_lut(lut131idx0));
    flut131.push_back(lut131idx0);
    auto fvec131 = [flut131](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut131[i](I));
        return ret;
    };

    std::cerr << "\rLUT131   ";
    long gin131_clear = 1 * ct_y5_clear + 2 * ct_x5_clear;
    std::vector<long> gout131_clear = fvec131(gin131_clear);

    std::vector<RotationPoly> lut132;
    std::vector<long (*)(long)> flut132;
    auto lut132idx0 = [](long I) -> long {
        /* GATE 106 (LUT3 _1481_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut132.push_back(ctx.genrate_lut(lut132idx0));
    flut132.push_back(lut132idx0);
    auto lut132idx1 = [](long I) -> long {
        /* GATE 134 (LUT3 _1509_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut132.push_back(ctx.genrate_lut(lut132idx1));
    flut132.push_back(lut132idx1);
    auto fvec132 = [flut132](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut132[i](I));
        return ret;
    };

    std::cerr << "\rLUT132   ";
    long gin132_clear = 1 * gout58_clear[0] + 2 * gout101_clear[0] + 4 * gout78_clear[0];
    std::vector<long> gout132_clear = fvec132(gin132_clear);

    std::vector<RotationPoly> lut133;
    std::vector<long (*)(long)> flut133;
    auto lut133idx0 = [](long I) -> long {
        /* GATE 378 (LUT2 _1753_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut133.push_back(ctx.genrate_lut(lut133idx0));
    flut133.push_back(lut133idx0);
    auto fvec133 = [flut133](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut133[i](I));
        return ret;
    };

    std::cerr << "\rLUT133   ";
    long gin133_clear = 1 * ct_x13_clear + 2 * ct_y1_clear;
    std::vector<long> gout133_clear = fvec133(gin133_clear);

    std::vector<RotationPoly> lut134;
    std::vector<long (*)(long)> flut134;
    auto lut134idx0 = [](long I) -> long {
        /* GATE 393 (LUT2 _1768_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut134.push_back(ctx.genrate_lut(lut134idx0));
    flut134.push_back(lut134idx0);
    auto fvec134 = [flut134](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut134[i](I));
        return ret;
    };

    std::cerr << "\rLUT134   ";
    long gin134_clear = 1 * ct_x4_clear + 2 * ct_y10_clear;
    std::vector<long> gout134_clear = fvec134(gin134_clear);

    std::vector<RotationPoly> lut135;
    std::vector<long (*)(long)> flut135;
    auto lut135idx0 = [](long I) -> long {
        /* GATE 169 (LUT3 _1544_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut135.push_back(ctx.genrate_lut(lut135idx0));
    flut135.push_back(lut135idx0);
    auto lut135idx1 = [](long I) -> long {
        /* GATE 135 (LUT3 _1510_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut135.push_back(ctx.genrate_lut(lut135idx1));
    flut135.push_back(lut135idx1);
    auto fvec135 = [flut135](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut135[i](I));
        return ret;
    };

    std::cerr << "\rLUT135   ";
    long gin135_clear = 1 * gout72_clear[0] + 2 * gout40_clear[0] + 4 * gout57_clear[0];
    std::vector<long> gout135_clear = fvec135(gin135_clear);

    std::vector<RotationPoly> lut136;
    std::vector<long (*)(long)> flut136;
    auto lut136idx0 = [](long I) -> long {
        /* GATE 380 (LUT2 _1755_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut136.push_back(ctx.genrate_lut(lut136idx0));
    flut136.push_back(lut136idx0);
    auto fvec136 = [flut136](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut136[i](I));
        return ret;
    };

    std::cerr << "\rLUT136   ";
    long gin136_clear = 1 * ct_x14_clear + 2 * ct_y0_clear;
    std::vector<long> gout136_clear = fvec136(gin136_clear);

    std::vector<RotationPoly> lut137;
    std::vector<long (*)(long)> flut137;
    auto lut137idx0 = [](long I) -> long {
        /* GATE 20 (LUT2 _1395_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut137.push_back(ctx.genrate_lut(lut137idx0));
    flut137.push_back(lut137idx0);
    auto fvec137 = [flut137](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut137[i](I));
        return ret;
    };

    std::cerr << "\rLUT137   ";
    long gin137_clear = 1 * ct_x1_clear + 2 * ct_y1_clear;
    std::vector<long> gout137_clear = fvec137(gin137_clear);

    std::vector<RotationPoly> lut138;
    std::vector<long (*)(long)> flut138;
    auto lut138idx0 = [](long I) -> long {
        /* GATE 375 (LUT2 _1750_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut138.push_back(ctx.genrate_lut(lut138idx0));
    flut138.push_back(lut138idx0);
    auto fvec138 = [flut138](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut138[i](I));
        return ret;
    };

    std::cerr << "\rLUT138   ";
    long gin138_clear = 1 * ct_x10_clear + 2 * ct_y4_clear;
    std::vector<long> gout138_clear = fvec138(gin138_clear);

    std::vector<RotationPoly> lut139;
    std::vector<long (*)(long)> flut139;
    auto lut139idx0 = [](long I) -> long {
        /* GATE 250 (LUT2 _1625_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut139.push_back(ctx.genrate_lut(lut139idx0));
    flut139.push_back(lut139idx0);
    auto fvec139 = [flut139](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut139[i](I));
        return ret;
    };

    std::cerr << "\rLUT139   ";
    long gin139_clear = 1 * ct_y4_clear + 2 * ct_x7_clear;
    std::vector<long> gout139_clear = fvec139(gin139_clear);

    std::vector<RotationPoly> lut140;
    std::vector<long (*)(long)> flut140;
    auto lut140idx0 = [](long I) -> long {
        /* GATE 247 (LUT2 _1622_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut140.push_back(ctx.genrate_lut(lut140idx0));
    flut140.push_back(lut140idx0);
    auto fvec140 = [flut140](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut140[i](I));
        return ret;
    };

    std::cerr << "\rLUT140   ";
    long gin140_clear = 1 * ct_y2_clear + 2 * ct_x9_clear;
    std::vector<long> gout140_clear = fvec140(gin140_clear);

    std::vector<RotationPoly> lut141;
    std::vector<long (*)(long)> flut141;
    auto lut141idx0 = [](long I) -> long {
        /* GATE 392 (LUT3 _1767_ INIT 0x87 PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut141.push_back(ctx.genrate_lut(lut141idx0));
    flut141.push_back(lut141idx0);
    auto fvec141 = [flut141](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut141[i](I));
        return ret;
    };

    std::cerr << "\rLUT141   ";
    long gin141_clear = 1 * gout134_clear[0] + 2 * ct_y9_clear + 4 * ct_x5_clear;
    std::vector<long> gout141_clear = fvec141(gin141_clear);

    std::vector<RotationPoly> lut142;
    std::vector<long (*)(long)> flut142;
    auto lut142idx0 = [](long I) -> long {
        /* GATE 218 (LUT2 _1593_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut142.push_back(ctx.genrate_lut(lut142idx0));
    flut142.push_back(lut142idx0);
    auto fvec142 = [flut142](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut142[i](I));
        return ret;
    };

    std::cerr << "\rLUT142   ";
    long gin142_clear = 1 * ct_y7_clear + 2 * ct_x3_clear;
    std::vector<long> gout142_clear = fvec142(gin142_clear);

    std::vector<RotationPoly> lut143;
    std::vector<long (*)(long)> flut143;
    auto lut143idx0 = [](long I) -> long {
        /* GATE 388 (LUT2 _1763_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut143.push_back(ctx.genrate_lut(lut143idx0));
    flut143.push_back(lut143idx0);
    auto fvec143 = [flut143](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut143[i](I));
        return ret;
    };

    std::cerr << "\rLUT143   ";
    long gin143_clear = 1 * ct_y6_clear + 2 * ct_x8_clear;
    std::vector<long> gout143_clear = fvec143(gin143_clear);

    std::vector<RotationPoly> lut144;
    std::vector<long (*)(long)> flut144;
    auto lut144idx0 = [](long I) -> long {
        /* GATE 60 (LUT3 _1435_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut144.push_back(ctx.genrate_lut(lut144idx0));
    flut144.push_back(lut144idx0);
    auto lut144idx1 = [](long I) -> long {
        /* GATE 44 (LUT3 _1419_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut144.push_back(ctx.genrate_lut(lut144idx1));
    flut144.push_back(lut144idx1);
    auto fvec144 = [flut144](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut144[i](I));
        return ret;
    };

    std::cerr << "\rLUT144   ";
    long gin144_clear = 1 * gout21_clear[0] + 2 * gout27_clear[0] + 4 * gout11_clear[0];
    std::vector<long> gout144_clear = fvec144(gin144_clear);

    std::vector<RotationPoly> lut145;
    std::vector<long (*)(long)> flut145;
    auto lut145idx0 = [](long I) -> long {
        /* GATE 404 (LUT2 _1779_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut145.push_back(ctx.genrate_lut(lut145idx0));
    flut145.push_back(lut145idx0);
    auto fvec145 = [flut145](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut145[i](I));
        return ret;
    };

    std::cerr << "\rLUT145   ";
    long gin145_clear = 1 * gout68_clear[0] + 2 * gout3_clear[0];
    std::vector<long> gout145_clear = fvec145(gin145_clear);

    std::vector<RotationPoly> lut146;
    std::vector<long (*)(long)> flut146;
    auto lut146idx0 = [](long I) -> long {
        /* GATE 246 (LUT2 _1621_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut146.push_back(ctx.genrate_lut(lut146idx0));
    flut146.push_back(lut146idx0);
    auto fvec146 = [flut146](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut146[i](I));
        return ret;
    };

    std::cerr << "\rLUT146   ";
    long gin146_clear = 1 * ct_x10_clear + 2 * ct_y1_clear;
    std::vector<long> gout146_clear = fvec146(gin146_clear);

    std::vector<RotationPoly> lut147;
    std::vector<long (*)(long)> flut147;
    auto lut147idx0 = [](long I) -> long {
        /* GATE 386 (LUT2 _1761_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut147.push_back(ctx.genrate_lut(lut147idx0));
    flut147.push_back(lut147idx0);
    auto fvec147 = [flut147](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut147[i](I));
        return ret;
    };

    std::cerr << "\rLUT147   ";
    long gin147_clear = 1 * ct_y7_clear + 2 * ct_x7_clear;
    std::vector<long> gout147_clear = fvec147(gin147_clear);

    std::vector<RotationPoly> lut148;
    std::vector<long (*)(long)> flut148;
    auto lut148idx0 = [](long I) -> long {
        /* GATE 30 (LUT3 _1405_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut148.push_back(ctx.genrate_lut(lut148idx0));
    flut148.push_back(lut148idx0);
    auto lut148idx1 = [](long I) -> long {
        /* GATE 43 (LUT3 _1418_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut148.push_back(ctx.genrate_lut(lut148idx1));
    flut148.push_back(lut148idx1);
    auto fvec148 = [flut148](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut148[i](I));
        return ret;
    };

    std::cerr << "\rLUT148   ";
    long gin148_clear = 1 * gout6_clear[0] + 2 * gout5_clear[0] + 4 * gout16_clear[0];
    std::vector<long> gout148_clear = fvec148(gin148_clear);

    std::vector<RotationPoly> lut149;
    std::vector<long (*)(long)> flut149;
    auto lut149idx0 = [](long I) -> long {
        /* GATE 220 (LUT2 _1595_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut149.push_back(ctx.genrate_lut(lut149idx0));
    flut149.push_back(lut149idx0);
    auto fvec149 = [flut149](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut149[i](I));
        return ret;
    };

    std::cerr << "\rLUT149   ";
    long gin149_clear = 1 * ct_y6_clear + 2 * ct_x4_clear;
    std::vector<long> gout149_clear = fvec149(gin149_clear);

    std::vector<RotationPoly> lut150;
    std::vector<long (*)(long)> flut150;
    auto lut150idx0 = [](long I) -> long {
        /* GATE 252 (LUT2 _1627_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut150.push_back(ctx.genrate_lut(lut150idx0));
    flut150.push_back(lut150idx0);
    auto fvec150 = [flut150](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut150[i](I));
        return ret;
    };

    std::cerr << "\rLUT150   ";
    long gin150_clear = 1 * ct_x8_clear + 2 * ct_y3_clear;
    std::vector<long> gout150_clear = fvec150(gin150_clear);

    std::vector<RotationPoly> lut151;
    std::vector<long (*)(long)> flut151;
    auto lut151idx0 = [](long I) -> long {
        /* GATE 22 (LUT2 _1397_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut151.push_back(ctx.genrate_lut(lut151idx0));
    flut151.push_back(lut151idx0);
    auto fvec151 = [flut151](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut151[i](I));
        return ret;
    };

    std::cerr << "\rLUT151   ";
    long gin151_clear = 1 * ct_x2_clear + 2 * ct_y0_clear;
    std::vector<long> gout151_clear = fvec151(gin151_clear);

    std::vector<RotationPoly> lut152;
    std::vector<long (*)(long)> flut152;
    auto lut152idx0 = [](long I) -> long {
        /* GATE 224 (LUT2 _1599_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut152.push_back(ctx.genrate_lut(lut152idx0));
    flut152.push_back(lut152idx0);
    auto fvec152 = [flut152](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut152[i](I));
        return ret;
    };

    std::cerr << "\rLUT152   ";
    long gin152_clear = 1 * ct_x1_clear + 2 * ct_y9_clear;
    std::vector<long> gout152_clear = fvec152(gin152_clear);

    std::vector<RotationPoly> lut153;
    std::vector<long (*)(long)> flut153;
    auto lut153idx0 = [](long I) -> long {
        /* GATE 8 (LUT3 _1383_ INIT 0x40 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut153.push_back(ctx.genrate_lut(lut153idx0));
    flut153.push_back(lut153idx0);
    auto fvec153 = [flut153](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut153[i](I));
        return ret;
    };

    std::cerr << "\rLUT153   ";
    long gin153_clear = 1 * ct_op1_clear + 2 * ct_op2_clear + 4 * ct_op3_clear;
    std::vector<long> gout153_clear = fvec153(gin153_clear);

    std::vector<RotationPoly> lut154;
    std::vector<long (*)(long)> flut154;
    auto lut154idx0 = [](long I) -> long {
        /* GATE 251 (LUT2 _1626_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut154.push_back(ctx.genrate_lut(lut154idx0));
    flut154.push_back(lut154idx0);
    auto fvec154 = [flut154](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut154[i](I));
        return ret;
    };

    std::cerr << "\rLUT154   ";
    long gin154_clear = 1 * ct_y5_clear + 2 * ct_x6_clear;
    std::vector<long> gout154_clear = fvec154(gin154_clear);

    std::vector<RotationPoly> lut155;
    std::vector<long (*)(long)> flut155;
    auto lut155idx0 = [](long I) -> long {
        /* GATE 15 (LUT2 _1390_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut155.push_back(ctx.genrate_lut(lut155idx0));
    flut155.push_back(lut155idx0);
    auto fvec155 = [flut155](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut155[i](I));
        return ret;
    };

    std::cerr << "\rLUT155   ";
    long gin155_clear = 1 * ct_x1_clear + 2 * ct_y0_clear;
    std::vector<long> gout155_clear = fvec155(gin155_clear);

    std::vector<RotationPoly> lut156;
    std::vector<long (*)(long)> flut156;
    auto lut156idx0 = [](long I) -> long {
        /* GATE 179 (LUT3 _1554_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut156.push_back(ctx.genrate_lut(lut156idx0));
    flut156.push_back(lut156idx0);
    auto lut156idx1 = [](long I) -> long {
        /* GATE 146 (LUT3 _1521_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut156.push_back(ctx.genrate_lut(lut156idx1));
    flut156.push_back(lut156idx1);
    auto fvec156 = [flut156](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut156[i](I));
        return ret;
    };

    std::cerr << "\rLUT156   ";
    long gin156_clear = 1 * gout85_clear[0] + 2 * gout50_clear[0] + 4 * gout97_clear[0];
    std::vector<long> gout156_clear = fvec156(gin156_clear);

    std::vector<RotationPoly> lut157;
    std::vector<long (*)(long)> flut157;
    auto lut157idx0 = [](long I) -> long {
        /* GATE 174 (LUT3 _1549_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut157.push_back(ctx.genrate_lut(lut157idx0));
    flut157.push_back(lut157idx0);
    auto lut157idx1 = [](long I) -> long {
        /* GATE 216 (LUT3 _1591_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut157.push_back(ctx.genrate_lut(lut157idx1));
    flut157.push_back(lut157idx1);
    auto fvec157 = [flut157](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut157[i](I));
        return ret;
    };

    std::cerr << "\rLUT157   ";
    long gin157_clear = 1 * gout102_clear[0] + 2 * gout118_clear[0] + 4 * gout98_clear[0];
    std::vector<long> gout157_clear = fvec157(gin157_clear);

    std::vector<RotationPoly> lut158;
    std::vector<long (*)(long)> flut158;
    auto lut158idx0 = [](long I) -> long {
        /* GATE 249 (LUT3 _1624_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut158.push_back(ctx.genrate_lut(lut158idx0));
    flut158.push_back(lut158idx0);
    auto lut158idx1 = [](long I) -> long {
        /* GATE 298 (LUT3 _1673_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut158.push_back(ctx.genrate_lut(lut158idx1));
    flut158.push_back(lut158idx1);
    auto fvec158 = [flut158](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut158[i](I));
        return ret;
    };

    std::cerr << "\rLUT158   ";
    long gin158_clear = 1 * gout139_clear[0] + 2 * gout154_clear[0] + 4 * gout150_clear[0];
    std::vector<long> gout158_clear = fvec158(gin158_clear);

    std::vector<RotationPoly> lut159;
    std::vector<long (*)(long)> flut159;
    auto lut159idx0 = [](long I) -> long {
        /* GATE 89 (LUT3 _1464_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut159.push_back(ctx.genrate_lut(lut159idx0));
    flut159.push_back(lut159idx0);
    auto lut159idx1 = [](long I) -> long {
        /* GATE 115 (LUT3 _1490_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut159.push_back(ctx.genrate_lut(lut159idx1));
    flut159.push_back(lut159idx1);
    auto fvec159 = [flut159](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut159[i](I));
        return ret;
    };

    std::cerr << "\rLUT159   ";
    long gin159_clear = 1 * gout62_clear[0] + 2 * gout84_clear[0] + 4 * gout81_clear[0];
    std::vector<long> gout159_clear = fvec159(gin159_clear);

    std::vector<RotationPoly> lut160;
    std::vector<long (*)(long)> flut160;
    auto lut160idx0 = [](long I) -> long {
        /* GATE 385 (LUT3 _1760_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut160.push_back(ctx.genrate_lut(lut160idx0));
    flut160.push_back(lut160idx0);
    auto lut160idx1 = [](long I) -> long {
        /* GATE 446 (LUT3 _1821_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut160.push_back(ctx.genrate_lut(lut160idx1));
    flut160.push_back(lut160idx1);
    auto fvec160 = [flut160](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut160[i](I));
        return ret;
    };

    std::cerr << "\rLUT160   ";
    long gin160_clear = 1 * gout147_clear[0] + 2 * gout130_clear[0] + 4 * gout143_clear[0];
    std::vector<long> gout160_clear = fvec160(gin160_clear);

    std::vector<RotationPoly> lut161;
    std::vector<long (*)(long)> flut161;
    auto lut161idx0 = [](long I) -> long {
        /* GATE 425 (LUT3 _1800_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut161.push_back(ctx.genrate_lut(lut161idx0));
    flut161.push_back(lut161idx0);
    auto fvec161 = [flut161](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut161[i](I));
        return ret;
    };

    std::cerr << "\rLUT161   ";
    long gin161_clear = 1 * ct_x7_clear + 2 * ct_y8_clear + 4 * gout15_clear[0];
    std::vector<long> gout161_clear = fvec161(gin161_clear);

    std::vector<RotationPoly> lut162;
    std::vector<long (*)(long)> flut162;
    auto lut162idx0 = [](long I) -> long {
        /* GATE 48 (LUT3 _1423_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut162.push_back(ctx.genrate_lut(lut162idx0));
    flut162.push_back(lut162idx0);
    auto fvec162 = [flut162](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut162[i](I));
        return ret;
    };

    std::cerr << "\rLUT162   ";
    long gin162_clear = 1 * gout38_clear[0] + 2 * ct_x0_clear + 4 * ct_y4_clear;
    std::vector<long> gout162_clear = fvec162(gin162_clear);

    std::vector<RotationPoly> lut163;
    std::vector<long (*)(long)> flut163;
    auto lut163idx0 = [](long I) -> long {
        /* GATE 110 (LUT3 _1485_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut163.push_back(ctx.genrate_lut(lut163idx0));
    flut163.push_back(lut163idx0);
    auto lut163idx1 = [](long I) -> long {
        /* GATE 145 (LUT3 _1520_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut163.push_back(ctx.genrate_lut(lut163idx1));
    flut163.push_back(lut163idx1);
    auto fvec163 = [flut163](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut163[i](I));
        return ret;
    };

    std::cerr << "\rLUT163   ";
    long gin163_clear = 1 * gout17_clear[0] + 2 * gout12_clear[0] + 4 * gout28_clear[0];
    std::vector<long> gout163_clear = fvec163(gin163_clear);

    std::vector<RotationPoly> lut164;
    std::vector<long (*)(long)> flut164;
    auto lut164idx0 = [](long I) -> long {
        /* GATE 84 (LUT3 _1459_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut164.push_back(ctx.genrate_lut(lut164idx0));
    flut164.push_back(lut164idx0);
    auto lut164idx1 = [](long I) -> long {
        /* GATE 61 (LUT3 _1436_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut164.push_back(ctx.genrate_lut(lut164idx1));
    flut164.push_back(lut164idx1);
    auto fvec164 = [flut164](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut164[i](I));
        return ret;
    };

    std::cerr << "\rLUT164   ";
    long gin164_clear = 1 * gout34_clear[0] + 2 * gout26_clear[0] + 4 * gout47_clear[0];
    std::vector<long> gout164_clear = fvec164(gin164_clear);

    std::vector<RotationPoly> lut165;
    std::vector<long (*)(long)> flut165;
    auto lut165idx0 = [](long I) -> long {
        /* GATE 65 (LUT3 _1440_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut165.push_back(ctx.genrate_lut(lut165idx0));
    flut165.push_back(lut165idx0);
    auto lut165idx1 = [](long I) -> long {
        /* GATE 94 (LUT3 _1469_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut165.push_back(ctx.genrate_lut(lut165idx1));
    flut165.push_back(lut165idx1);
    auto fvec165 = [flut165](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut165[i](I));
        return ret;
    };

    std::cerr << "\rLUT165   ";
    long gin165_clear = 1 * gout25_clear[0] + 2 * gout41_clear[0] + 4 * gout36_clear[0];
    std::vector<long> gout165_clear = fvec165(gin165_clear);

    std::vector<RotationPoly> lut166;
    std::vector<long (*)(long)> flut166;
    auto lut166idx0 = [](long I) -> long {
        /* GATE 450 (LUT3 _1825_ INIT 0xe1 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut166.push_back(ctx.genrate_lut(lut166idx0));
    flut166.push_back(lut166idx0);
    auto fvec166 = [flut166](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut166[i](I));
        return ret;
    };

    std::cerr << "\rLUT166   ";
    long gin166_clear = 1 * gout53_clear[0] + 2 * gout14_clear[1] + 4 * gout59_clear[0];
    std::vector<long> gout166_clear = fvec166(gin166_clear);

    std::vector<RotationPoly> lut167;
    std::vector<long (*)(long)> flut167;
    auto lut167idx0 = [](long I) -> long {
        /* GATE 422 (LUT3 _1797_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut167.push_back(ctx.genrate_lut(lut167idx0));
    flut167.push_back(lut167idx0);
    auto fvec167 = [flut167](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut167[i](I));
        return ret;
    };

    std::cerr << "\rLUT167   ";
    long gin167_clear = 1 * ct_x2_clear + 2 * ct_y13_clear + 4 * gout23_clear[0];
    std::vector<long> gout167_clear = fvec167(gin167_clear);

    std::vector<RotationPoly> lut168;
    std::vector<long (*)(long)> flut168;
    auto lut168idx0 = [](long I) -> long {
        /* GATE 256 (LUT3 _1631_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut168.push_back(ctx.genrate_lut(lut168idx0));
    flut168.push_back(lut168idx0);
    auto lut168idx1 = [](long I) -> long {
        /* GATE 297 (LUT3 _1672_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut168.push_back(ctx.genrate_lut(lut168idx1));
    flut168.push_back(lut168idx1);
    auto fvec168 = [flut168](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut168[i](I));
        return ret;
    };

    std::cerr << "\rLUT168   ";
    long gin168_clear = 1 * gout13_clear[0] + 2 * gout54_clear[0] + 4 * gout31_clear[0];
    std::vector<long> gout168_clear = fvec168(gin168_clear);

    std::vector<RotationPoly> lut169;
    std::vector<long (*)(long)> flut169;
    auto lut169idx0 = [](long I) -> long {
        /* GATE 180 (LUT3 _1555_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut169.push_back(ctx.genrate_lut(lut169idx0));
    flut169.push_back(lut169idx0);
    auto lut169idx1 = [](long I) -> long {
        /* GATE 139 (LUT3 _1514_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut169.push_back(ctx.genrate_lut(lut169idx1));
    flut169.push_back(lut169idx1);
    auto fvec169 = [flut169](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut169[i](I));
        return ret;
    };

    std::cerr << "\rLUT169   ";
    long gin169_clear = 1 * gout76_clear[0] + 2 * gout89_clear[0] + 4 * gout51_clear[0];
    std::vector<long> gout169_clear = fvec169(gin169_clear);

    std::vector<RotationPoly> lut170;
    std::vector<long (*)(long)> flut170;
    auto lut170idx0 = [](long I) -> long {
        /* GATE 391 (LUT3 _1766_ INIT 0x87 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut170.push_back(ctx.genrate_lut(lut170idx0));
    flut170.push_back(lut170idx0);
    auto lut170idx1 = [](long I) -> long {
        /* GATE 420 (LUT3 _1795_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut170.push_back(ctx.genrate_lut(lut170idx1));
    flut170.push_back(lut170idx1);
    auto fvec170 = [flut170](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut170[i](I));
        return ret;
    };

    std::cerr << "\rLUT170   ";
    long gin170_clear = 1 * gout141_clear[0] + 2 * ct_x3_clear + 4 * ct_y11_clear;
    std::vector<long> gout170_clear = fvec170(gin170_clear);

    std::vector<RotationPoly> lut171;
    std::vector<long (*)(long)> flut171;
    auto lut171idx0 = [](long I) -> long {
        /* GATE 337 (LUT3 _1712_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut171.push_back(ctx.genrate_lut(lut171idx0));
    flut171.push_back(lut171idx0);
    auto lut171idx1 = [](long I) -> long {
        /* GATE 384 (LUT3 _1759_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut171.push_back(ctx.genrate_lut(lut171idx1));
    flut171.push_back(lut171idx1);
    auto fvec171 = [flut171](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut171[i](I));
        return ret;
    };

    std::cerr << "\rLUT171   ";
    long gin171_clear = 1 * gout120_clear[0] + 2 * gout92_clear[0] + 4 * gout113_clear[0];
    std::vector<long> gout171_clear = fvec171(gin171_clear);

    std::vector<RotationPoly> lut172;
    std::vector<long (*)(long)> flut172;
    auto lut172idx0 = [](long I) -> long {
        /* GATE 143 (LUT3 _1518_ INIT 0x69 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut172.push_back(ctx.genrate_lut(lut172idx0));
    flut172.push_back(lut172idx0);
    auto lut172idx1 = [](long I) -> long {
        /* GATE 186 (LUT3 _1561_ INIT 0x71 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut172.push_back(ctx.genrate_lut(lut172idx1));
    flut172.push_back(lut172idx1);
    auto fvec172 = [flut172](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut172[i](I));
        return ret;
    };

    std::cerr << "\rLUT172   ";
    long gin172_clear = 1 * gout30_clear[0] + 2 * gout156_clear[1] + 4 * gout163_clear[1];
    std::vector<long> gout172_clear = fvec172(gin172_clear);

    std::vector<RotationPoly> lut173;
    std::vector<long (*)(long)> flut173;
    auto lut173idx0 = [](long I) -> long {
        /* GATE 376 (LUT3 _1751_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut173.push_back(ctx.genrate_lut(lut173idx0));
    flut173.push_back(lut173idx0);
    auto lut173idx1 = [](long I) -> long {
        /* GATE 333 (LUT3 _1708_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut173.push_back(ctx.genrate_lut(lut173idx1));
    flut173.push_back(lut173idx1);
    auto fvec173 = [flut173](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut173[i](I));
        return ret;
    };

    std::cerr << "\rLUT173   ";
    long gin173_clear = 1 * gout83_clear[0] + 2 * gout80_clear[0] + 4 * gout96_clear[0];
    std::vector<long> gout173_clear = fvec173(gin173_clear);

    std::vector<RotationPoly> lut174;
    std::vector<long (*)(long)> flut174;
    auto lut174idx0 = [](long I) -> long {
        /* GATE 263 (LUT3 _1638_ INIT 0x80 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut174.push_back(ctx.genrate_lut(lut174idx0));
    flut174.push_back(lut174idx0);
    auto lut174idx1 = [](long I) -> long {
        /* GATE 223 (LUT3 _1598_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut174.push_back(ctx.genrate_lut(lut174idx1));
    flut174.push_back(lut174idx1);
    auto fvec174 = [flut174](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut174[i](I));
        return ret;
    };

    std::cerr << "\rLUT174   ";
    long gin174_clear = 1 * gout152_clear[0] + 2 * ct_x0_clear + 4 * ct_y10_clear;
    std::vector<long> gout174_clear = fvec174(gin174_clear);

    std::vector<RotationPoly> lut175;
    std::vector<long (*)(long)> flut175;
    auto lut175idx0 = [](long I) -> long {
        /* GATE 4 (LUT3 _1379_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut175.push_back(ctx.genrate_lut(lut175idx0));
    flut175.push_back(lut175idx0);
    auto fvec175 = [flut175](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut175[i](I));
        return ret;
    };

    std::cerr << "\rLUT175   ";
    long gin175_clear = 1 * ct_op4_clear + 2 * ct_op5_clear + 4 * gout60_clear[0];
    std::vector<long> gout175_clear = fvec175(gin175_clear);

    std::vector<RotationPoly> lut176;
    std::vector<long (*)(long)> flut176;
    auto lut176idx0 = [](long I) -> long {
        /* GATE 292 (LUT3 _1667_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut176.push_back(ctx.genrate_lut(lut176idx0));
    flut176.push_back(lut176idx0);
    auto lut176idx1 = [](long I) -> long {
        /* GATE 343 (LUT3 _1718_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut176.push_back(ctx.genrate_lut(lut176idx1));
    flut176.push_back(lut176idx1);
    auto fvec176 = [flut176](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut176[i](I));
        return ret;
    };

    std::cerr << "\rLUT176   ";
    long gin176_clear = 1 * gout65_clear[0] + 2 * gout29_clear[0] + 4 * gout77_clear[0];
    std::vector<long> gout176_clear = fvec176(gin176_clear);

    std::vector<RotationPoly> lut177;
    std::vector<long (*)(long)> flut177;
    auto lut177idx0 = [](long I) -> long {
        /* GATE 308 (LUT3 _1683_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut177.push_back(ctx.genrate_lut(lut177idx0));
    flut177.push_back(lut177idx0);
    auto lut177idx1 = [](long I) -> long {
        /* GATE 352 (LUT3 _1727_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut177.push_back(ctx.genrate_lut(lut177idx1));
    flut177.push_back(lut177idx1);
    auto fvec177 = [flut177](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut177[i](I));
        return ret;
    };

    std::cerr << "\rLUT177   ";
    long gin177_clear = 1 * gout48_clear[0] + 2 * gout93_clear[0] + 4 * gout87_clear[0];
    std::vector<long> gout177_clear = fvec177(gin177_clear);

    std::vector<RotationPoly> lut178;
    std::vector<long (*)(long)> flut178;
    auto lut178idx0 = [](long I) -> long {
        /* GATE 85 (LUT3 _1460_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut178.push_back(ctx.genrate_lut(lut178idx0));
    flut178.push_back(lut178idx0);
    auto lut178idx1 = [](long I) -> long {
        /* GATE 105 (LUT3 _1480_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut178.push_back(ctx.genrate_lut(lut178idx1));
    flut178.push_back(lut178idx1);
    auto fvec178 = [flut178](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut178[i](I));
        return ret;
    };

    std::cerr << "\rLUT178   ";
    long gin178_clear = 1 * gout73_clear[0] + 2 * gout61_clear[0] + 4 * gout46_clear[0];
    std::vector<long> gout178_clear = fvec178(gin178_clear);

    std::vector<RotationPoly> lut179;
    std::vector<long (*)(long)> flut179;
    auto lut179idx0 = [](long I) -> long {
        /* GATE 288 (LUT3 _1663_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut179.push_back(ctx.genrate_lut(lut179idx0));
    flut179.push_back(lut179idx0);
    auto lut179idx1 = [](long I) -> long {
        /* GATE 332 (LUT3 _1707_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut179.push_back(ctx.genrate_lut(lut179idx1));
    flut179.push_back(lut179idx1);
    auto fvec179 = [flut179](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut179[i](I));
        return ret;
    };

    std::cerr << "\rLUT179   ";
    long gin179_clear = 1 * gout75_clear[0] + 2 * gout63_clear[0] + 4 * gout33_clear[0];
    std::vector<long> gout179_clear = fvec179(gin179_clear);

    std::vector<RotationPoly> lut180;
    std::vector<long (*)(long)> flut180;
    auto lut180idx0 = [](long I) -> long {
        /* GATE 104 (LUT3 _1479_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut180.push_back(ctx.genrate_lut(lut180idx0));
    flut180.push_back(lut180idx0);
    auto lut180idx1 = [](long I) -> long {
        /* GATE 132 (LUT3 _1507_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut180.push_back(ctx.genrate_lut(lut180idx1));
    flut180.push_back(lut180idx1);
    auto fvec180 = [flut180](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut180[i](I));
        return ret;
    };

    std::cerr << "\rLUT180   ";
    long gin180_clear = 1 * gout178_clear[1] + 2 * gout132_clear[0] + 4 * gout163_clear[0];
    std::vector<long> gout180_clear = fvec180(gin180_clear);

    std::vector<RotationPoly> lut181;
    std::vector<long (*)(long)> flut181;
    auto lut181idx0 = [](long I) -> long {
        /* GATE 397 (LUT3 _1772_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut181.push_back(ctx.genrate_lut(lut181idx0));
    flut181.push_back(lut181idx0);
    auto lut181idx1 = [](long I) -> long {
        /* GATE 353 (LUT3 _1728_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut181.push_back(ctx.genrate_lut(lut181idx1));
    flut181.push_back(lut181idx1);
    auto fvec181 = [flut181](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut181[i](I));
        return ret;
    };

    std::cerr << "\rLUT181   ";
    long gin181_clear = 1 * gout129_clear[0] + 2 * gout114_clear[0] + 4 * gout128_clear[0];
    std::vector<long> gout181_clear = fvec181(gin181_clear);

    std::cerr << "\rFA182    ";
    long gin182_clear = 1 + 1 * ct_x0_clear + 2 * ct_x1_clear + 1 * gout94_clear[0] + 2 * gout99_clear[0];
    std::vector<long> gout182_clear = vdecomp(gin182_clear);

    std::cerr << "\rFA183    ";
    long gin183_clear = gout90_clear[2] + 1 * ct_x6_clear + 2 * ct_x7_clear + 1 * ct_y6_clear + 2 * ct_y7_clear;
    std::vector<long> gout183_clear = vdecomp(gin183_clear);

    std::vector<RotationPoly> lut184;
    std::vector<long (*)(long)> flut184;
    auto lut184idx0 = [](long I) -> long {
        /* GATE 118 (LUT3 _1493_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut184.push_back(ctx.genrate_lut(lut184idx0));
    flut184.push_back(lut184idx0);
    auto lut184idx1 = [](long I) -> long {
        /* GATE 93 (LUT3 _1468_ INIT 0x87 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut184.push_back(ctx.genrate_lut(lut184idx1));
    flut184.push_back(lut184idx1);
    auto fvec184 = [flut184](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut184[i](I));
        return ret;
    };

    std::cerr << "\rLUT184   ";
    long gin184_clear = 1 * gout165_clear[1] + 2 * ct_x0_clear + 4 * ct_y6_clear;
    std::vector<long> gout184_clear = fvec184(gin184_clear);

    std::cerr << "\rFA185    ";
    long gin185_clear = gout183_clear[2] + 1 * ct_x8_clear + 2 * ct_x9_clear + 1 * ct_y8_clear + 2 * ct_y9_clear;
    std::vector<long> gout185_clear = vdecomp(gin185_clear);

    std::vector<RotationPoly> lut186;
    std::vector<long (*)(long)> flut186;
    auto lut186idx0 = [](long I) -> long {
        /* GATE 181 (LUT3 _1556_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut186.push_back(ctx.genrate_lut(lut186idx0));
    flut186.push_back(lut186idx0);
    auto lut186idx1 = [](long I) -> long {
        /* GATE 215 (LUT3 _1590_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut186.push_back(ctx.genrate_lut(lut186idx1));
    flut186.push_back(lut186idx1);
    auto fvec186 = [flut186](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut186[i](I));
        return ret;
    };

    std::cerr << "\rLUT186   ";
    long gin186_clear = 1 * gout115_clear[0] + 2 * gout108_clear[0] + 4 * gout126_clear[0];
    std::vector<long> gout186_clear = fvec186(gin186_clear);

    std::vector<RotationPoly> lut187;
    std::vector<long (*)(long)> flut187;
    auto lut187idx0 = [](long I) -> long {
        /* GATE 383 (LUT3 _1758_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut187.push_back(ctx.genrate_lut(lut187idx0));
    flut187.push_back(lut187idx0);
    auto lut187idx1 = [](long I) -> long {
        /* GATE 344 (LUT3 _1719_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut187.push_back(ctx.genrate_lut(lut187idx1));
    flut187.push_back(lut187idx1);
    auto fvec187 = [flut187](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut187[i](I));
        return ret;
    };

    std::cerr << "\rLUT187   ";
    long gin187_clear = 1 * gout95_clear[0] + 2 * gout88_clear[0] + 4 * gout106_clear[0];
    std::vector<long> gout187_clear = fvec187(gin187_clear);

    std::vector<RotationPoly> lut188;
    std::vector<long (*)(long)> flut188;
    auto lut188idx0 = [](long I) -> long {
        /* GATE 255 (LUT3 _1630_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut188.push_back(ctx.genrate_lut(lut188idx0));
    flut188.push_back(lut188idx0);
    auto lut188idx1 = [](long I) -> long {
        /* GATE 210 (LUT3 _1585_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut188.push_back(ctx.genrate_lut(lut188idx1));
    flut188.push_back(lut188idx1);
    auto fvec188 = [flut188](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut188[i](I));
        return ret;
    };

    std::cerr << "\rLUT188   ";
    long gin188_clear = 1 * gout119_clear[0] + 2 * gout131_clear[0] + 4 * gout125_clear[0];
    std::vector<long> gout188_clear = fvec188(gin188_clear);

    std::vector<RotationPoly> lut189;
    std::vector<long (*)(long)> flut189;
    auto lut189idx0 = [](long I) -> long {
        /* GATE 377 (LUT3 _1752_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut189.push_back(ctx.genrate_lut(lut189idx0));
    flut189.push_back(lut189idx0);
    auto lut189idx1 = [](long I) -> long {
        /* GATE 445 (LUT3 _1820_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut189.push_back(ctx.genrate_lut(lut189idx1));
    flut189.push_back(lut189idx1);
    auto fvec189 = [flut189](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut189[i](I));
        return ret;
    };

    std::cerr << "\rLUT189   ";
    long gin189_clear = 1 * gout133_clear[0] + 2 * gout127_clear[0] + 4 * gout136_clear[0];
    std::vector<long> gout189_clear = fvec189(gin189_clear);

    std::vector<RotationPoly> lut190;
    std::vector<long (*)(long)> flut190;
    auto lut190idx0 = [](long I) -> long {
        /* GATE 254 (LUT3 _1629_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut190.push_back(ctx.genrate_lut(lut190idx0));
    flut190.push_back(lut190idx0);
    auto lut190idx1 = [](long I) -> long {
        /* GATE 217 (LUT3 _1592_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut190.push_back(ctx.genrate_lut(lut190idx1));
    flut190.push_back(lut190idx1);
    auto fvec190 = [flut190](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut190[i](I));
        return ret;
    };

    std::cerr << "\rLUT190   ";
    long gin190_clear = 1 * gout142_clear[0] + 2 * gout122_clear[0] + 4 * gout149_clear[0];
    std::vector<long> gout190_clear = fvec190(gin190_clear);

    std::vector<RotationPoly> lut191;
    std::vector<long (*)(long)> flut191;
    auto lut191idx0 = [](long I) -> long {
        /* GATE 42 (LUT3 _1417_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut191.push_back(ctx.genrate_lut(lut191idx0));
    flut191.push_back(lut191idx0);
    auto lut191idx1 = [](long I) -> long {
        /* GATE 58 (LUT3 _1433_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut191.push_back(ctx.genrate_lut(lut191idx1));
    flut191.push_back(lut191idx1);
    auto fvec191 = [flut191](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut191[i](I));
        return ret;
    };

    std::cerr << "\rLUT191   ";
    long gin191_clear = 1 * gout148_clear[1] + 2 * gout144_clear[1] + 4 * gout162_clear[0];
    std::vector<long> gout191_clear = fvec191(gin191_clear);

    std::vector<RotationPoly> lut192;
    std::vector<long (*)(long)> flut192;
    auto lut192idx0 = [](long I) -> long {
        /* GATE 341 (LUT3 _1716_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut192.push_back(ctx.genrate_lut(lut192idx0));
    flut192.push_back(lut192idx0);
    auto lut192idx1 = [](long I) -> long {
        /* GATE 399 (LUT3 _1774_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut192.push_back(ctx.genrate_lut(lut192idx1));
    flut192.push_back(lut192idx1);
    auto fvec192 = [flut192](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut192[i](I));
        return ret;
    };

    std::cerr << "\rLUT192   ";
    long gin192_clear = 1 * gout74_clear[1] + 2 * gout187_clear[1] + 4 * gout176_clear[1];
    std::vector<long> gout192_clear = fvec192(gin192_clear);

    std::vector<RotationPoly> lut193;
    std::vector<long (*)(long)> flut193;
    auto lut193idx0 = [](long I) -> long {
        /* GATE 133 (LUT3 _1508_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut193.push_back(ctx.genrate_lut(lut193idx0));
    flut193.push_back(lut193idx0);
    auto lut193idx1 = [](long I) -> long {
        /* GATE 167 (LUT3 _1542_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut193.push_back(ctx.genrate_lut(lut193idx1));
    flut193.push_back(lut193idx1);
    auto fvec193 = [flut193](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut193[i](I));
        return ret;
    };

    std::cerr << "\rLUT193   ";
    long gin193_clear = 1 * gout132_clear[1] + 2 * gout135_clear[1] + 4 * gout169_clear[1];
    std::vector<long> gout193_clear = fvec193(gin193_clear);

    std::vector<RotationPoly> lut194;
    std::vector<long (*)(long)> flut194;
    auto lut194idx0 = [](long I) -> long {
        /* GATE 214 (LUT3 _1589_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut194.push_back(ctx.genrate_lut(lut194idx0));
    flut194.push_back(lut194idx0);
    auto lut194idx1 = [](long I) -> long {
        /* GATE 261 (LUT3 _1636_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut194.push_back(ctx.genrate_lut(lut194idx1));
    flut194.push_back(lut194idx1);
    auto fvec194 = [flut194](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut194[i](I));
        return ret;
    };

    std::cerr << "\rLUT194   ";
    long gin194_clear = 1 * gout186_clear[1] + 2 * gout190_clear[1] + 4 * gout157_clear[1];
    std::vector<long> gout194_clear = fvec194(gin194_clear);

    std::vector<RotationPoly> lut195;
    std::vector<long (*)(long)> flut195;
    auto lut195idx0 = [](long I) -> long {
        /* GATE 432 (LUT3 _1807_ INIT 0x80 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut195.push_back(ctx.genrate_lut(lut195idx0));
    flut195.push_back(lut195idx0);
    auto lut195idx1 = [](long I) -> long {
        /* GATE 374 (LUT3 _1749_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut195.push_back(ctx.genrate_lut(lut195idx1));
    flut195.push_back(lut195idx1);
    auto fvec195 = [flut195](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut195[i](I));
        return ret;
    };

    std::cerr << "\rLUT195   ";
    long gin195_clear = 1 * gout138_clear[0] + 2 * ct_x11_clear + 4 * ct_y3_clear;
    std::vector<long> gout195_clear = fvec195(gin195_clear);

    std::vector<RotationPoly> lut196;
    std::vector<long (*)(long)> flut196;
    auto lut196idx0 = [](long I) -> long {
        /* GATE 7 (LUT2 _1382_ INIT 0x8 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut196.push_back(ctx.genrate_lut(lut196idx0));
    flut196.push_back(lut196idx0);
    auto fvec196 = [flut196](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut196[i](I));
        return ret;
    };

    std::cerr << "\rLUT196   ";
    long gin196_clear = 1 * gout153_clear[0] + 2 * gout175_clear[0];
    std::vector<long> gout196_clear = fvec196(gin196_clear);

    std::vector<RotationPoly> lut197;
    std::vector<long (*)(long)> flut197;
    auto lut197idx0 = [](long I) -> long {
        /* GATE 390 (LUT3 _1765_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut197.push_back(ctx.genrate_lut(lut197idx0));
    flut197.push_back(lut197idx0);
    auto lut197idx1 = [](long I) -> long {
        /* GATE 443 (LUT3 _1818_ INIT 0x71 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut197.push_back(ctx.genrate_lut(lut197idx1));
    flut197.push_back(lut197idx1);
    auto fvec197 = [flut197](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut197[i](I));
        return ret;
    };

    std::cerr << "\rLUT197   ";
    long gin197_clear = 1 * gout170_clear[0] + 2 * gout53_clear[1] + 4 * gout181_clear[0];
    std::vector<long> gout197_clear = fvec197(gin197_clear);

    std::vector<RotationPoly> lut198;
    std::vector<long (*)(long)> flut198;
    auto lut198idx0 = [](long I) -> long {
        /* GATE 29 (LUT3 _1404_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut198.push_back(ctx.genrate_lut(lut198idx0));
    flut198.push_back(lut198idx0);
    auto lut198idx1 = [](long I) -> long {
        /* GATE 19 (LUT3 _1394_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut198.push_back(ctx.genrate_lut(lut198idx1));
    flut198.push_back(lut198idx1);
    auto fvec198 = [flut198](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut198[i](I));
        return ret;
    };

    std::cerr << "\rLUT198   ";
    long gin198_clear = 1 * gout137_clear[0] + 2 * gout0_clear[0] + 4 * gout151_clear[0];
    std::vector<long> gout198_clear = fvec198(gin198_clear);

    std::vector<RotationPoly> lut199;
    std::vector<long (*)(long)> flut199;
    auto lut199idx0 = [](long I) -> long {
        /* GATE 204 (LUT3 _1579_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut199.push_back(ctx.genrate_lut(lut199idx0));
    flut199.push_back(lut199idx0);
    auto lut199idx1 = [](long I) -> long {
        /* GATE 242 (LUT3 _1617_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut199.push_back(ctx.genrate_lut(lut199idx1));
    flut199.push_back(lut199idx1);
    auto fvec199 = [flut199](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut199[i](I));
        return ret;
    };

    std::cerr << "\rLUT199   ";
    long gin199_clear = 1 * gout117_clear[0] + 2 * gout124_clear[0] + 4 * gout188_clear[1];
    std::vector<long> gout199_clear = fvec199(gin199_clear);

    std::vector<RotationPoly> lut200;
    std::vector<long (*)(long)> flut200;
    auto lut200idx0 = [](long I) -> long {
        /* GATE 296 (LUT3 _1671_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut200.push_back(ctx.genrate_lut(lut200idx0));
    flut200.push_back(lut200idx0);
    auto lut200idx1 = [](long I) -> long {
        /* GATE 350 (LUT3 _1725_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut200.push_back(ctx.genrate_lut(lut200idx1));
    flut200.push_back(lut200idx1);
    auto fvec200 = [flut200](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut200[i](I));
        return ret;
    };

    std::cerr << "\rLUT200   ";
    long gin200_clear = 1 * gout168_clear[1] + 2 * gout74_clear[0] + 4 * gout158_clear[1];
    std::vector<long> gout200_clear = fvec200(gin200_clear);

    std::vector<RotationPoly> lut201;
    std::vector<long (*)(long)> flut201;
    auto lut201idx0 = [](long I) -> long {
        /* GATE 14 (LUT3 _1389_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut201.push_back(ctx.genrate_lut(lut201idx0));
    flut201.push_back(lut201idx0);
    auto lut201idx1 = [](long I) -> long {
        /* GATE 18 (LUT3 _1393_ INIT 0x80 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut201.push_back(ctx.genrate_lut(lut201idx1));
    flut201.push_back(lut201idx1);
    auto fvec201 = [flut201](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut201[i](I));
        return ret;
    };

    std::cerr << "\rLUT201   ";
    long gin201_clear = 1 * gout155_clear[0] + 2 * ct_x0_clear + 4 * ct_y1_clear;
    std::vector<long> gout201_clear = fvec201(gin201_clear);

    std::vector<RotationPoly> lut202;
    std::vector<long (*)(long)> flut202;
    auto lut202idx0 = [](long I) -> long {
        /* GATE 253 (LUT3 _1628_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut202.push_back(ctx.genrate_lut(lut202idx0));
    flut202.push_back(lut202idx0);
    auto lut202idx1 = [](long I) -> long {
        /* GATE 305 (LUT3 _1680_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut202.push_back(ctx.genrate_lut(lut202idx1));
    flut202.push_back(lut202idx1);
    auto fvec202 = [flut202](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut202[i](I));
        return ret;
    };

    std::cerr << "\rLUT202   ";
    long gin202_clear = 1 * gout190_clear[0] + 2 * gout168_clear[0] + 4 * gout188_clear[0];
    std::vector<long> gout202_clear = fvec202(gin202_clear);

    std::vector<RotationPoly> lut203;
    std::vector<long (*)(long)> flut203;
    auto lut203idx0 = [](long I) -> long {
        /* GATE 245 (LUT3 _1620_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut203.push_back(ctx.genrate_lut(lut203idx0));
    flut203.push_back(lut203idx0);
    auto lut203idx1 = [](long I) -> long {
        /* GATE 287 (LUT3 _1662_ INIT 0x17 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut203.push_back(ctx.genrate_lut(lut203idx1));
    flut203.push_back(lut203idx1);
    auto fvec203 = [flut203](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut203[i](I));
        return ret;
    };

    std::cerr << "\rLUT203   ";
    long gin203_clear = 1 * gout146_clear[0] + 2 * gout140_clear[0] + 4 * gout1_clear[0];
    std::vector<long> gout203_clear = fvec203(gin203_clear);

    std::vector<RotationPoly> lut204;
    std::vector<long (*)(long)> flut204;
    auto lut204idx0 = [](long I) -> long {
        /* GATE 27 (LUT2 _1402_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut204.push_back(ctx.genrate_lut(lut204idx0));
    flut204.push_back(lut204idx0);
    auto fvec204 = [flut204](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut204[i](I));
        return ret;
    };

    std::cerr << "\rLUT204   ";
    long gin204_clear = 1 * gout201_clear[1] + 2 * gout198_clear[1];
    std::vector<long> gout204_clear = fvec204(gin204_clear);

    std::vector<RotationPoly> lut205;
    std::vector<long (*)(long)> flut205;
    auto lut205idx0 = [](long I) -> long {
        /* GATE 6 (LUT2 _1381_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut205.push_back(ctx.genrate_lut(lut205idx0));
    flut205.push_back(lut205idx0);
    auto fvec205 = [flut205](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut205[i](I));
        return ret;
    };

    std::cerr << "\rLUT205   ";
    long gin205_clear = 1 * ct_op0_clear + 2 * gout196_clear[0];
    std::vector<long> gout205_clear = fvec205(gin205_clear);

    std::vector<RotationPoly> lut206;
    std::vector<long (*)(long)> flut206;
    auto lut206idx0 = [](long I) -> long {
        /* GATE 168 (LUT3 _1543_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut206.push_back(ctx.genrate_lut(lut206idx0));
    flut206.push_back(lut206idx0);
    auto lut206idx1 = [](long I) -> long {
        /* GATE 203 (LUT3 _1578_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut206.push_back(ctx.genrate_lut(lut206idx1));
    flut206.push_back(lut206idx1);
    auto fvec206 = [flut206](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut206[i](I));
        return ret;
    };

    std::cerr << "\rLUT206   ";
    long gin206_clear = 1 * gout135_clear[0] + 2 * gout117_clear[1] + 4 * gout157_clear[0];
    std::vector<long> gout206_clear = fvec206(gin206_clear);

    std::vector<RotationPoly> lut207;
    std::vector<long (*)(long)> flut207;
    auto lut207idx0 = [](long I) -> long {
        /* GATE 150 (LUT2 _1525_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut207.push_back(ctx.genrate_lut(lut207idx0));
    flut207.push_back(lut207idx0);
    auto lut207idx1 = [](long I) -> long {
        /* GATE 114 (LUT2 _1489_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut207.push_back(ctx.genrate_lut(lut207idx1));
    flut207.push_back(lut207idx1);
    auto fvec207 = [flut207](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut207[i](I));
        return ret;
    };

    std::cerr << "\rLUT207   ";
    long gin207_clear = 1 * gout159_clear[1] + 2 * gout30_clear[1];
    std::vector<long> gout207_clear = fvec207(gin207_clear);

    std::cerr << "\rFA208    ";
    long gin208_clear = gout185_clear[2] + 1 * ct_x10_clear + 2 * ct_x11_clear + 1 * ct_y10_clear + 2 * ct_y11_clear;
    std::vector<long> gout208_clear = vdecomp(gin208_clear);

    std::vector<RotationPoly> lut209;
    std::vector<long (*)(long)> flut209;
    auto lut209idx0 = [](long I) -> long {
        /* GATE 17 (LUT3 _1392_ INIT 0x60 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut209.push_back(ctx.genrate_lut(lut209idx0));
    flut209.push_back(lut209idx0);
    auto fvec209 = [flut209](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut209[i](I));
        return ret;
    };

    std::cerr << "\rLUT209   ";
    long gin209_clear = 1 * gout201_clear[1] + 2 * gout198_clear[1] + 4 * gout205_clear[0];
    std::vector<long> gout209_clear = fvec209(gin209_clear);

    std::vector<RotationPoly> lut210;
    std::vector<long (*)(long)> flut210;
    auto lut210idx0 = [](long I) -> long {
        /* GATE 59 (LUT3 _1434_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut210.push_back(ctx.genrate_lut(lut210idx0));
    flut210.push_back(lut210idx0);
    auto lut210idx1 = [](long I) -> long {
        /* GATE 82 (LUT3 _1457_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut210.push_back(ctx.genrate_lut(lut210idx1));
    flut210.push_back(lut210idx1);
    auto fvec210 = [flut210](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut210[i](I));
        return ret;
    };

    std::cerr << "\rLUT210   ";
    long gin210_clear = 1 * gout144_clear[0] + 2 * gout164_clear[1] + 4 * gout165_clear[0];
    std::vector<long> gout210_clear = fvec210(gin210_clear);

    std::vector<RotationPoly> lut211;
    std::vector<long (*)(long)> flut211;
    auto lut211idx0 = [](long I) -> long {
        /* GATE 349 (LUT3 _1724_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut211.push_back(ctx.genrate_lut(lut211idx0));
    flut211.push_back(lut211idx0);
    auto lut211idx1 = [](long I) -> long {
        /* GATE 306 (LUT3 _1681_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut211.push_back(ctx.genrate_lut(lut211idx1));
    flut211.push_back(lut211idx1);
    auto fvec211 = [flut211](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut211[i](I));
        return ret;
    };

    std::cerr << "\rLUT211   ";
    long gin211_clear = 1 * gout66_clear[1] + 2 * gout177_clear[0] + 4 * gout68_clear[0];
    std::vector<long> gout211_clear = fvec211(gin211_clear);

    std::vector<RotationPoly> lut212;
    std::vector<long (*)(long)> flut212;
    auto lut212idx0 = [](long I) -> long {
        /* GATE 419 (LUT3 _1794_ INIT 0xe3 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut212.push_back(ctx.genrate_lut(lut212idx0));
    flut212.push_back(lut212idx0);
    auto fvec212 = [flut212](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut212[i](I));
        return ret;
    };

    std::cerr << "\rLUT212   ";
    long gin212_clear = 1 * gout128_clear[0] + 2 * gout170_clear[1] + 4 * gout20_clear[0];
    std::vector<long> gout212_clear = fvec212(gin212_clear);

    std::vector<RotationPoly> lut213;
    std::vector<long (*)(long)> flut213;
    auto lut213idx0 = [](long I) -> long {
        /* GATE 304 (LUT2 _1679_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut213.push_back(ctx.genrate_lut(lut213idx0));
    flut213.push_back(lut213idx0);
    auto lut213idx1 = [](long I) -> long {
        /* GATE 262 (LUT2 _1637_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut213.push_back(ctx.genrate_lut(lut213idx1));
    flut213.push_back(lut213idx1);
    auto fvec213 = [flut213](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut213[i](I));
        return ret;
    };

    std::cerr << "\rLUT213   ";
    long gin213_clear = 1 * gout174_clear[0] + 2 * gout66_clear[0];
    std::vector<long> gout213_clear = fvec213(gin213_clear);

    std::vector<RotationPoly> lut214;
    std::vector<long (*)(long)> flut214;
    auto lut214idx0 = [](long I) -> long {
        /* GATE 444 (LUT3 _1819_ INIT 0x87 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut214.push_back(ctx.genrate_lut(lut214idx0));
    flut214.push_back(lut214idx0);
    auto fvec214 = [flut214](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut214[i](I));
        return ret;
    };

    std::cerr << "\rLUT214   ";
    long gin214_clear = 1 * ct_x11_clear + 2 * ct_y4_clear + 4 * gout189_clear[1];
    std::vector<long> gout214_clear = fvec214(gin214_clear);

    std::vector<RotationPoly> lut215;
    std::vector<long (*)(long)> flut215;
    auto lut215idx0 = [](long I) -> long {
        /* GATE 185 (LUT3 _1560_ INIT 0x87 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut215.push_back(ctx.genrate_lut(lut215idx0));
    flut215.push_back(lut215idx0);
    auto lut215idx1 = [](long I) -> long {
        /* GATE 225 (LUT3 _1600_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut215.push_back(ctx.genrate_lut(lut215idx1));
    flut215.push_back(lut215idx1);
    auto fvec215 = [flut215](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut215[i](I));
        return ret;
    };

    std::cerr << "\rLUT215   ";
    long gin215_clear = 1 * gout172_clear[1] + 2 * ct_x0_clear + 4 * ct_y9_clear;
    std::vector<long> gout215_clear = fvec215(gin215_clear);

    std::vector<RotationPoly> lut216;
    std::vector<long (*)(long)> flut216;
    auto lut216idx0 = [](long I) -> long {
        /* GATE 83 (LUT3 _1458_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut216.push_back(ctx.genrate_lut(lut216idx0));
    flut216.push_back(lut216idx0);
    auto lut216idx1 = [](long I) -> long {
        /* GATE 103 (LUT3 _1478_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut216.push_back(ctx.genrate_lut(lut216idx1));
    flut216.push_back(lut216idx1);
    auto fvec216 = [flut216](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut216[i](I));
        return ret;
    };

    std::cerr << "\rLUT216   ";
    long gin216_clear = 1 * gout164_clear[0] + 2 * gout178_clear[0] + 4 * gout159_clear[0];
    std::vector<long> gout216_clear = fvec216(gin216_clear);

    std::cerr << "\rFA217    ";
    long gin217_clear = gout208_clear[2] + 1 * ct_x12_clear + 2 * ct_x13_clear + 1 * ct_y12_clear + 2 * ct_y13_clear;
    std::vector<long> gout217_clear = vdecomp(gin217_clear);

    std::cerr << "\rFA218    ";
    long gin218_clear = gout217_clear[2] + 1 * ct_x14_clear + 2 * ct_x15_clear + 1 * ct_y14_clear + 2 * ct_y15_clear;
    std::vector<long> gout218_clear = vdecomp(gin218_clear);

    std::vector<RotationPoly> lut219;
    std::vector<long (*)(long)> flut219;
    auto lut219idx0 = [](long I) -> long {
        /* GATE 418 (LUT3 _1793_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut219.push_back(ctx.genrate_lut(lut219idx0));
    flut219.push_back(lut219idx0);
    auto fvec219 = [flut219](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut219[i](I));
        return ret;
    };

    std::cerr << "\rLUT219   ";
    long gin219_clear = 1 * gout212_clear[0] + 2 * gout167_clear[0] + 4 * gout161_clear[0];
    std::vector<long> gout219_clear = fvec219(gin219_clear);

    std::vector<RotationPoly> lut220;
    std::vector<long (*)(long)> flut220;
    auto lut220idx0 = [](long I) -> long {
        /* GATE 178 (LUT3 _1553_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut220.push_back(ctx.genrate_lut(lut220idx0));
    flut220.push_back(lut220idx0);
    auto lut220idx1 = [](long I) -> long {
        /* GATE 222 (LUT3 _1597_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut220.push_back(ctx.genrate_lut(lut220idx1));
    flut220.push_back(lut220idx1);
    auto fvec220 = [flut220](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut220[i](I));
        return ret;
    };

    std::cerr << "\rLUT220   ";
    long gin220_clear = 1 * gout156_clear[0] + 2 * gout186_clear[0] + 4 * gout169_clear[0];
    std::vector<long> gout220_clear = fvec220(gin220_clear);

    std::vector<RotationPoly> lut221;
    std::vector<long (*)(long)> flut221;
    auto lut221idx0 = [](long I) -> long {
        /* GATE 398 (LUT3 _1773_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut221.push_back(ctx.genrate_lut(lut221idx0));
    flut221.push_back(lut221idx0);
    auto lut221idx1 = [](long I) -> long {
        /* GATE 351 (LUT3 _1726_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut221.push_back(ctx.genrate_lut(lut221idx1));
    flut221.push_back(lut221idx1);
    auto fvec221 = [flut221](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut221[i](I));
        return ret;
    };

    std::cerr << "\rLUT221   ";
    long gin221_clear = 1 * gout177_clear[1] + 2 * gout181_clear[1] + 4 * gout121_clear[0];
    std::vector<long> gout221_clear = fvec221(gin221_clear);

    std::vector<RotationPoly> lut222;
    std::vector<long (*)(long)> flut222;
    auto lut222idx0 = [](long I) -> long {
        /* GATE 442 (LUT3 _1817_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut222.push_back(ctx.genrate_lut(lut222idx0));
    flut222.push_back(lut222idx0);
    auto fvec222 = [flut222](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut222[i](I));
        return ret;
    };

    std::cerr << "\rLUT222   ";
    long gin222_clear = 1 * gout197_clear[1] + 2 * gout214_clear[0] + 4 * gout160_clear[1];
    std::vector<long> gout222_clear = fvec222(gin222_clear);

    std::vector<RotationPoly> lut223;
    std::vector<long (*)(long)> flut223;
    auto lut223idx0 = [](long I) -> long {
        /* GATE 73 (LUT3 _1448_ INIT 0x40 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut223.push_back(ctx.genrate_lut(lut223idx0));
    flut223.push_back(lut223idx0);
    auto fvec223 = [flut223](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut223[i](I));
        return ret;
    };

    std::cerr << "\rLUT223   ";
    long gin223_clear = 1 * ct_op1_clear + 2 * ct_op0_clear + 4 * gout175_clear[0];
    std::vector<long> gout223_clear = fvec223(gin223_clear);

    std::vector<RotationPoly> lut224;
    std::vector<long (*)(long)> flut224;
    auto lut224idx0 = [](long I) -> long {
        /* GATE 285 (LUT3 _1660_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut224.push_back(ctx.genrate_lut(lut224idx0));
    flut224.push_back(lut224idx0);
    auto lut224idx1 = [](long I) -> long {
        /* GATE 243 (LUT3 _1618_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut224.push_back(ctx.genrate_lut(lut224idx1));
    flut224.push_back(lut224idx1);
    auto fvec224 = [flut224](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut224[i](I));
        return ret;
    };

    std::cerr << "\rLUT224   ";
    long gin224_clear = 1 * gout124_clear[1] + 2 * gout203_clear[0] + 4 * gout158_clear[0];
    std::vector<long> gout224_clear = fvec224(gin224_clear);

    std::vector<RotationPoly> lut225;
    std::vector<long (*)(long)> flut225;
    auto lut225idx0 = [](long I) -> long {
        /* GATE 331 (LUT3 _1706_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut225.push_back(ctx.genrate_lut(lut225idx0));
    flut225.push_back(lut225idx0);
    auto lut225idx1 = [](long I) -> long {
        /* GATE 381 (LUT3 _1756_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut225.push_back(ctx.genrate_lut(lut225idx1));
    flut225.push_back(lut225idx1);
    auto fvec225 = [flut225](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut225[i](I));
        return ret;
    };

    std::cerr << "\rLUT225   ";
    long gin225_clear = 1 * gout179_clear[1] + 2 * gout173_clear[1] + 4 * gout171_clear[0];
    std::vector<long> gout225_clear = fvec225(gin225_clear);

    std::vector<RotationPoly> lut226;
    std::vector<long (*)(long)> flut226;
    auto lut226idx0 = [](long I) -> long {
        /* GATE 131 (LUT3 _1506_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut226.push_back(ctx.genrate_lut(lut226idx0));
    flut226.push_back(lut226idx0);
    auto lut226idx1 = [](long I) -> long {
        /* GATE 165 (LUT3 _1540_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut226.push_back(ctx.genrate_lut(lut226idx1));
    flut226.push_back(lut226idx1);
    auto fvec226 = [flut226](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut226[i](I));
        return ret;
    };

    std::cerr << "\rLUT226   ";
    long gin226_clear = 1 * gout180_clear[1] + 2 * gout193_clear[0] + 4 * gout172_clear[0];
    std::vector<long> gout226_clear = fvec226(gin226_clear);

    std::cerr << "\rFA227    ";
    long gin227_clear = gout182_clear[2] + 1 * ct_x2_clear + 2 * ct_x3_clear + 1 * gout86_clear[0] + 2 * gout70_clear[0];
    std::vector<long> gout227_clear = vdecomp(gin227_clear);

    std::vector<RotationPoly> lut228;
    std::vector<long (*)(long)> flut228;
    auto lut228idx0 = [](long I) -> long {
        /* GATE 72 (LUT3 _1447_ INIT 0x80 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut228.push_back(ctx.genrate_lut(lut228idx0));
    flut228.push_back(lut228idx0);
    auto fvec228 = [flut228](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut228[i](I));
        return ret;
    };

    std::cerr << "\rLUT228   ";
    long gin228_clear = 1 * gout223_clear[0] + 2 * ct_op2_clear + 4 * ct_op3_clear;
    std::vector<long> gout228_clear = fvec228(gin228_clear);

    std::vector<RotationPoly> lut229;
    std::vector<long (*)(long)> flut229;
    auto lut229idx0 = [](long I) -> long {
        /* GATE 80 (LUT3 _1455_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut229.push_back(ctx.genrate_lut(lut229idx0));
    flut229.push_back(lut229idx0);
    auto lut229idx1 = [](long I) -> long {
        /* GATE 57 (LUT3 _1432_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut229.push_back(ctx.genrate_lut(lut229idx1));
    flut229.push_back(lut229idx1);
    auto fvec229 = [flut229](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut229[i](I));
        return ret;
    };

    std::cerr << "\rLUT229   ";
    long gin229_clear = 1 * gout191_clear[1] + 2 * gout210_clear[0] + 4 * gout55_clear[0];
    std::vector<long> gout229_clear = fvec229(gin229_clear);

    std::vector<RotationPoly> lut230;
    std::vector<long (*)(long)> flut230;
    auto lut230idx0 = [](long I) -> long {
        /* GATE 359 (LUT3 _1734_ INIT 0x71 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut230.push_back(ctx.genrate_lut(lut230idx0));
    flut230.push_back(lut230idx0);
    auto lut230idx1 = [](long I) -> long {
        /* GATE 303 (LUT3 _1678_ INIT 0x69 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut230.push_back(ctx.genrate_lut(lut230idx1));
    flut230.push_back(lut230idx1);
    auto fvec230 = [flut230](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut230[i](I));
        return ret;
    };

    std::cerr << "\rLUT230   ";
    long gin230_clear = 1 * gout213_clear[0] + 2 * gout211_clear[1] + 4 * gout202_clear[1];
    std::vector<long> gout230_clear = fvec230(gin230_clear);

    std::vector<RotationPoly> lut231;
    std::vector<long (*)(long)> flut231;
    auto lut231idx0 = [](long I) -> long {
        /* GATE 260 (LUT2 _1635_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut231.push_back(ctx.genrate_lut(lut231idx0));
    flut231.push_back(lut231idx0);
    auto lut231idx1 = [](long I) -> long {
        /* GATE 313 (LUT2 _1688_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut231.push_back(ctx.genrate_lut(lut231idx1));
    flut231.push_back(lut231idx1);
    auto fvec231 = [flut231](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut231[i](I));
        return ret;
    };

    std::cerr << "\rLUT231   ";
    long gin231_clear = 1 * gout194_clear[1] + 2 * gout213_clear[1];
    std::vector<long> gout231_clear = fvec231(gin231_clear);

    std::vector<RotationPoly> lut232;
    std::vector<long (*)(long)> flut232;
    auto lut232idx0 = [](long I) -> long {
        /* GATE 428 (LUT3 _1803_ INIT 0x80 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut232.push_back(ctx.genrate_lut(lut232idx0));
    flut232.push_back(lut232idx0);
    auto lut232idx1 = [](long I) -> long {
        /* GATE 373 (LUT3 _1748_ INIT 0x78 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut232.push_back(ctx.genrate_lut(lut232idx1));
    flut232.push_back(lut232idx1);
    auto fvec232 = [flut232](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut232[i](I));
        return ret;
    };

    std::cerr << "\rLUT232   ";
    long gin232_clear = 1 * gout195_clear[1] + 2 * ct_x9_clear + 4 * ct_y5_clear;
    std::vector<long> gout232_clear = fvec232(gin232_clear);

    std::vector<RotationPoly> lut233;
    std::vector<long (*)(long)> flut233;
    auto lut233idx0 = [](long I) -> long {
        /* GATE 166 (LUT3 _1541_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut233.push_back(ctx.genrate_lut(lut233idx0));
    flut233.push_back(lut233idx0);
    auto lut233idx1 = [](long I) -> long {
        /* GATE 201 (LUT3 _1576_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut233.push_back(ctx.genrate_lut(lut233idx1));
    flut233.push_back(lut233idx1);
    auto fvec233 = [flut233](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut233[i](I));
        return ret;
    };

    std::cerr << "\rLUT233   ";
    long gin233_clear = 1 * gout193_clear[1] + 2 * gout206_clear[0] + 4 * gout220_clear[0];
    std::vector<long> gout233_clear = fvec233(gin233_clear);

    std::vector<RotationPoly> lut234;
    std::vector<long (*)(long)> flut234;
    auto lut234idx0 = [](long I) -> long {
        /* GATE 441 (LUT3 _1816_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut234.push_back(ctx.genrate_lut(lut234idx0));
    flut234.push_back(lut234idx0);
    auto lut234idx1 = [](long I) -> long {
        /* GATE 382 (LUT3 _1757_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut234.push_back(ctx.genrate_lut(lut234idx1));
    flut234.push_back(lut234idx1);
    auto fvec234 = [flut234](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut234[i](I));
        return ret;
    };

    std::cerr << "\rLUT234   ";
    long gin234_clear = 1 * gout187_clear[0] + 2 * gout160_clear[0] + 4 * gout171_clear[1];
    std::vector<long> gout234_clear = fvec234(gin234_clear);

    std::vector<RotationPoly> lut235;
    std::vector<long (*)(long)> flut235;
    auto lut235idx0 = [](long I) -> long {
        /* GATE 202 (LUT3 _1577_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut235.push_back(ctx.genrate_lut(lut235idx0));
    flut235.push_back(lut235idx0);
    auto lut235idx1 = [](long I) -> long {
        /* GATE 240 (LUT3 _1615_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut235.push_back(ctx.genrate_lut(lut235idx1));
    flut235.push_back(lut235idx1);
    auto fvec235 = [flut235](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut235[i](I));
        return ret;
    };

    std::cerr << "\rLUT235   ";
    long gin235_clear = 1 * gout206_clear[1] + 2 * gout199_clear[0] + 4 * gout194_clear[0];
    std::vector<long> gout235_clear = fvec235(gin235_clear);

    std::vector<RotationPoly> lut236;
    std::vector<long (*)(long)> flut236;
    auto lut236idx0 = [](long I) -> long {
        /* GATE 81 (LUT3 _1456_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut236.push_back(ctx.genrate_lut(lut236idx0));
    flut236.push_back(lut236idx0);
    auto lut236idx1 = [](long I) -> long {
        /* GATE 101 (LUT3 _1476_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut236.push_back(ctx.genrate_lut(lut236idx1));
    flut236.push_back(lut236idx1);
    auto fvec236 = [flut236](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut236[i](I));
        return ret;
    };

    std::cerr << "\rLUT236   ";
    long gin236_clear = 1 * gout210_clear[1] + 2 * gout216_clear[0] + 4 * gout184_clear[1];
    std::vector<long> gout236_clear = fvec236(gin236_clear);

    std::vector<RotationPoly> lut237;
    std::vector<long (*)(long)> flut237;
    auto lut237idx0 = [](long I) -> long {
        /* GATE 28 (LUT3 _1403_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut237.push_back(ctx.genrate_lut(lut237idx0));
    flut237.push_back(lut237idx0);
    auto lut237idx1 = [](long I) -> long {
        /* GATE 41 (LUT3 _1416_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut237.push_back(ctx.genrate_lut(lut237idx1));
    flut237.push_back(lut237idx1);
    auto fvec237 = [flut237](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut237[i](I));
        return ret;
    };

    std::cerr << "\rLUT237   ";
    long gin237_clear = 1 * gout198_clear[0] + 2 * gout148_clear[0] + 4 * gout7_clear[0];
    std::vector<long> gout237_clear = fvec237(gin237_clear);

    std::vector<RotationPoly> lut238;
    std::vector<long (*)(long)> flut238;
    auto lut238idx0 = [](long I) -> long {
        /* GATE 283 (LUT3 _1658_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut238.push_back(ctx.genrate_lut(lut238idx0));
    flut238.push_back(lut238idx0);
    auto lut238idx1 = [](long I) -> long {
        /* GATE 241 (LUT3 _1616_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut238.push_back(ctx.genrate_lut(lut238idx1));
    flut238.push_back(lut238idx1);
    auto fvec238 = [flut238](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut238[i](I));
        return ret;
    };

    std::cerr << "\rLUT238   ";
    long gin238_clear = 1 * gout199_clear[1] + 2 * gout224_clear[1] + 4 * gout202_clear[0];
    std::vector<long> gout238_clear = fvec238(gin238_clear);

    std::vector<RotationPoly> lut239;
    std::vector<long (*)(long)> flut239;
    auto lut239idx0 = [](long I) -> long {
        /* GATE 449 (LUT3 _1824_ INIT 0xd4 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut239.push_back(ctx.genrate_lut(lut239idx0));
    flut239.push_back(lut239idx0);
    auto lut239idx1 = [](long I) -> long {
        /* GATE 389 (LUT3 _1764_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut239.push_back(ctx.genrate_lut(lut239idx1));
    flut239.push_back(lut239idx1);
    auto fvec239 = [flut239](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut239[i](I));
        return ret;
    };

    std::cerr << "\rLUT239   ";
    long gin239_clear = 1 * gout197_clear[0] + 2 * gout221_clear[0] + 4 * gout192_clear[1];
    std::vector<long> gout239_clear = fvec239(gin239_clear);

    std::vector<RotationPoly> lut240;
    std::vector<long (*)(long)> flut240;
    auto lut240idx0 = [](long I) -> long {
        /* GATE 330 (LUT3 _1705_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut240.push_back(ctx.genrate_lut(lut240idx0));
    flut240.push_back(lut240idx0);
    auto lut240idx1 = [](long I) -> long {
        /* GATE 286 (LUT3 _1661_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut240.push_back(ctx.genrate_lut(lut240idx1));
    flut240.push_back(lut240idx1);
    auto fvec240 = [flut240](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut240[i](I));
        return ret;
    };

    std::cerr << "\rLUT240   ";
    long gin240_clear = 1 * gout203_clear[1] + 2 * gout179_clear[0] + 4 * gout176_clear[0];
    std::vector<long> gout240_clear = fvec240(gin240_clear);

    std::vector<RotationPoly> lut241;
    std::vector<long (*)(long)> flut241;
    auto lut241idx0 = [](long I) -> long {
        /* GATE 102 (LUT3 _1477_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut241.push_back(ctx.genrate_lut(lut241idx0));
    flut241.push_back(lut241idx0);
    auto lut241idx1 = [](long I) -> long {
        /* GATE 130 (LUT3 _1505_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut241.push_back(ctx.genrate_lut(lut241idx1));
    flut241.push_back(lut241idx1);
    auto fvec241 = [flut241](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut241[i](I));
        return ret;
    };

    std::cerr << "\rLUT241   ";
    long gin241_clear = 1 * gout216_clear[1] + 2 * gout180_clear[0] + 4 * gout207_clear[1];
    std::vector<long> gout241_clear = fvec241(gin241_clear);

    std::vector<RotationPoly> lut242;
    std::vector<long (*)(long)> flut242;
    auto lut242idx0 = [](long I) -> long {
        /* GATE 372 (LUT3 _1747_ INIT 0x69 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut242.push_back(ctx.genrate_lut(lut242idx0));
    flut242.push_back(lut242idx0);
    auto lut242idx1 = [](long I) -> long {
        /* GATE 440 (LUT3 _1815_ INIT 0x71 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut242.push_back(ctx.genrate_lut(lut242idx1));
    flut242.push_back(lut242idx1);
    auto fvec242 = [flut242](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut242[i](I));
        return ret;
    };

    std::cerr << "\rLUT242   ";
    long gin242_clear = 1 * gout232_clear[1] + 2 * gout189_clear[0] + 4 * gout173_clear[0];
    std::vector<long> gout242_clear = fvec242(gin242_clear);

    std::cerr << "\rFA243    ";
    long gin243_clear = gout227_clear[2] + 1 * ct_x4_clear + 2 * ct_x5_clear + 1 * gout67_clear[0] + 2 * gout109_clear[0];
    std::vector<long> gout243_clear = vdecomp(gin243_clear);

    std::vector<RotationPoly> lut244;
    std::vector<long (*)(long)> flut244;
    auto lut244idx0 = [](long I) -> long {
        /* GATE 9 (LUT3 _1384_ INIT 0x80 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut244.push_back(ctx.genrate_lut(lut244idx0));
    flut244.push_back(lut244idx0);
    auto fvec244 = [flut244](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut244[i](I));
        return ret;
    };

    std::cerr << "\rLUT244   ";
    long gin244_clear = 1 * ct_x0_clear + 2 * ct_y0_clear + 4 * gout205_clear[0];
    std::vector<long> gout244_clear = fvec244(gin244_clear);

    std::vector<RotationPoly> lut245;
    std::vector<long (*)(long)> flut245;
    auto lut245idx0 = [](long I) -> long {
        /* GATE 24 (LUT3 _1399_ INIT 0x35 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut245.push_back(ctx.genrate_lut(lut245idx0));
    flut245.push_back(lut245idx0);
    auto fvec245 = [flut245](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut245[i](I));
        return ret;
    };

    std::cerr << "\rLUT245   ";
    long gin245_clear = 1 * gout42_clear[0] + 2 * gout227_clear[0] + 4 * gout228_clear[0];
    std::vector<long> gout245_clear = fvec245(gin245_clear);

    std::vector<RotationPoly> lut246;
    std::vector<long (*)(long)> flut246;
    auto lut246idx0 = [](long I) -> long {
        /* GATE 221 (LUT2 _1596_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut246.push_back(ctx.genrate_lut(lut246idx0));
    flut246.push_back(lut246idx0);
    auto lut246idx1 = [](long I) -> long {
        /* GATE 268 (LUT2 _1643_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut246.push_back(ctx.genrate_lut(lut246idx1));
    flut246.push_back(lut246idx1);
    auto fvec246 = [flut246](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut246[i](I));
        return ret;
    };

    std::cerr << "\rLUT246   ";
    long gin246_clear = 1 * gout220_clear[1] + 2 * gout174_clear[1];
    std::vector<long> gout246_clear = fvec246(gin246_clear);

    std::vector<RotationPoly> lut247;
    std::vector<long (*)(long)> flut247;
    auto lut247idx0 = [](long I) -> long {
        /* GATE 3 (LUT3 _1378_ INIT 0x35 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut247.push_back(ctx.genrate_lut(lut247idx0));
    flut247.push_back(lut247idx0);
    auto fvec247 = [flut247](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut247[i](I));
        return ret;
    };

    std::cerr << "\rLUT247   ";
    long gin247_clear = 1 * gout19_clear[0] + 2 * gout182_clear[0] + 4 * gout228_clear[0];
    std::vector<long> gout247_clear = fvec247(gin247_clear);

    std::vector<RotationPoly> lut248;
    std::vector<long (*)(long)> flut248;
    auto lut248idx0 = [](long I) -> long {
        /* GATE 26 (LUT3 _1401_ INIT 0x60 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut248.push_back(ctx.genrate_lut(lut248idx0));
    flut248.push_back(lut248idx0);
    auto fvec248 = [flut248](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut248[i](I));
        return ret;
    };

    std::cerr << "\rLUT248   ";
    long gin248_clear = 1 * gout204_clear[0] + 2 * gout237_clear[0] + 4 * gout205_clear[0];
    std::vector<long> gout248_clear = fvec248(gin248_clear);

    std::vector<RotationPoly> lut249;
    std::vector<long (*)(long)> flut249;
    auto lut249idx0 = [](long I) -> long {
        /* GATE 13 (LUT3 _1388_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut249.push_back(ctx.genrate_lut(lut249idx0));
    flut249.push_back(lut249idx0);
    auto fvec249 = [flut249](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut249[i](I));
        return ret;
    };

    std::cerr << "\rLUT249   ";
    long gin249_clear = 1 * gout19_clear[1] + 2 * gout182_clear[1] + 4 * gout228_clear[0];
    std::vector<long> gout249_clear = fvec249(gin249_clear);

    std::vector<RotationPoly> lut250;
    std::vector<long (*)(long)> flut250;
    auto lut250idx0 = [](long I) -> long {
        /* GATE 10 (LUT2 _1385_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut250.push_back(ctx.genrate_lut(lut250idx0));
    flut250.push_back(lut250idx0);
    auto fvec250 = [flut250](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut250[i](I));
        return ret;
    };

    std::cerr << "\rLUT250   ";
    long gin250_clear = 1 * gout196_clear[0] + 2 * gout228_clear[0];
    std::vector<long> gout250_clear = fvec250(gin250_clear);

    std::vector<RotationPoly> lut251;
    std::vector<long (*)(long)> flut251;
    auto lut251idx0 = [](long I) -> long {
        /* GATE 39 (LUT2 _1414_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut251.push_back(ctx.genrate_lut(lut251idx0));
    flut251.push_back(lut251idx0);
    auto fvec251 = [flut251](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut251[i](I));
        return ret;
    };

    std::cerr << "\rLUT251   ";
    long gin251_clear = 1 * gout204_clear[0] + 2 * gout237_clear[0];
    std::vector<long> gout251_clear = fvec251(gin251_clear);

    std::vector<RotationPoly> lut252;
    std::vector<long (*)(long)> flut252;
    auto lut252idx0 = [](long I) -> long {
        /* GATE 164 (LUT3 _1539_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut252.push_back(ctx.genrate_lut(lut252idx0));
    flut252.push_back(lut252idx0);
    auto lut252idx1 = [](long I) -> long {
        /* GATE 199 (LUT3 _1574_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut252.push_back(ctx.genrate_lut(lut252idx1));
    flut252.push_back(lut252idx1);
    auto fvec252 = [flut252](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut252[i](I));
        return ret;
    };

    std::cerr << "\rLUT252   ";
    long gin252_clear = 1 * gout226_clear[1] + 2 * gout233_clear[0] + 4 * gout215_clear[0];
    std::vector<long> gout252_clear = fvec252(gin252_clear);

    std::vector<RotationPoly> lut253;
    std::vector<long (*)(long)> flut253;
    auto lut253idx0 = [](long I) -> long {
        /* GATE 23 (LUT2 _1398_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut253.push_back(ctx.genrate_lut(lut253idx0));
    flut253.push_back(lut253idx0);
    auto fvec253 = [flut253](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut253[i](I));
        return ret;
    };

    std::cerr << "\rLUT253   ";
    long gin253_clear = 1 * gout245_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout253_clear = fvec253(gin253_clear);

    std::vector<RotationPoly> lut254;
    std::vector<long (*)(long)> flut254;
    auto lut254idx0 = [](long I) -> long {
        /* GATE 427 (LUT3 _1802_ INIT 0xe1 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut254.push_back(ctx.genrate_lut(lut254idx0));
    flut254.push_back(lut254idx0);
    auto fvec254 = [flut254](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut254[i](I));
        return ret;
    };

    std::cerr << "\rLUT254   ";
    long gin254_clear = 1 * gout232_clear[0] + 2 * gout195_clear[0] + 4 * gout24_clear[0];
    std::vector<long> gout254_clear = fvec254(gin254_clear);

    std::vector<RotationPoly> lut255;
    std::vector<long (*)(long)> flut255;
    auto lut255idx0 = [](long I) -> long {
        /* GATE 403 (LUT3 _1778_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut255.push_back(ctx.genrate_lut(lut255idx0));
    flut255.push_back(lut255idx0);
    auto lut255idx1 = [](long I) -> long {
        /* GATE 348 (LUT3 _1723_ INIT 0x96 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut255.push_back(ctx.genrate_lut(lut255idx1));
    flut255.push_back(lut255idx1);
    auto fvec255 = [flut255](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut255[i](I));
        return ret;
    };

    std::cerr << "\rLUT255   ";
    long gin255_clear = 1 * gout211_clear[0] + 2 * gout221_clear[1] + 4 * gout200_clear[1];
    std::vector<long> gout255_clear = fvec255(gin255_clear);

    std::vector<RotationPoly> lut256;
    std::vector<long (*)(long)> flut256;
    auto lut256idx0 = [](long I) -> long {
        /* GATE 36 (LUT3 _1411_ INIT 0x35 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut256.push_back(ctx.genrate_lut(lut256idx0));
    flut256.push_back(lut256idx0);
    auto fvec256 = [flut256](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut256[i](I));
        return ret;
    };

    std::cerr << "\rLUT256   ";
    long gin256_clear = 1 * gout42_clear[1] + 2 * gout227_clear[1] + 4 * gout228_clear[0];
    std::vector<long> gout256_clear = fvec256(gin256_clear);

    std::vector<RotationPoly> lut257;
    std::vector<long (*)(long)> flut257;
    auto lut257idx0 = [](long I) -> long {
        /* GATE 71 (LUT3 _1446_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut257.push_back(ctx.genrate_lut(lut257idx0));
    flut257.push_back(lut257idx0);
    auto fvec257 = [flut257](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut257[i](I));
        return ret;
    };

    std::cerr << "\rLUT257   ";
    long gin257_clear = 1 * gout90_clear[1] + 2 * gout243_clear[1] + 4 * gout228_clear[0];
    std::vector<long> gout257_clear = fvec257(gin257_clear);

    std::vector<RotationPoly> lut258;
    std::vector<long (*)(long)> flut258;
    auto lut258idx0 = [](long I) -> long {
        /* GATE 35 (LUT2 _1410_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut258.push_back(ctx.genrate_lut(lut258idx0));
    flut258.push_back(lut258idx0);
    auto fvec258 = [flut258](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut258[i](I));
        return ret;
    };

    std::cerr << "\rLUT258   ";
    long gin258_clear = 1 * gout256_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout258_clear = fvec258(gin258_clear);

    std::vector<RotationPoly> lut259;
    std::vector<long (*)(long)> flut259;
    auto lut259idx0 = [](long I) -> long {
        /* GATE 70 (LUT2 _1445_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut259.push_back(ctx.genrate_lut(lut259idx0));
    flut259.push_back(lut259idx0);
    auto fvec259 = [flut259](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut259[i](I));
        return ret;
    };

    std::cerr << "\rLUT259   ";
    long gin259_clear = 1 * gout257_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout259_clear = fvec259(gin259_clear);

    std::vector<RotationPoly> lut260;
    std::vector<long (*)(long)> flut260;
    auto lut260idx0 = [](long I) -> long {
        /* GATE 51 (LUT3 _1426_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut260.push_back(ctx.genrate_lut(lut260idx0));
    flut260.push_back(lut260idx0);
    auto fvec260 = [flut260](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut260[i](I));
        return ret;
    };

    std::cerr << "\rLUT260   ";
    long gin260_clear = 1 * gout90_clear[0] + 2 * gout243_clear[0] + 4 * gout228_clear[0];
    std::vector<long> gout260_clear = fvec260(gin260_clear);

    std::vector<RotationPoly> lut261;
    std::vector<long (*)(long)> flut261;
    auto lut261idx0 = [](long I) -> long {
        /* GATE 50 (LUT2 _1425_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut261.push_back(ctx.genrate_lut(lut261idx0));
    flut261.push_back(lut261idx0);
    auto fvec261 = [flut261](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut261[i](I));
        return ret;
    };

    std::cerr << "\rLUT261   ";
    long gin261_clear = 1 * gout260_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout261_clear = fvec261(gin261_clear);

    std::vector<RotationPoly> lut262;
    std::vector<long (*)(long)> flut262;
    auto lut262idx0 = [](long I) -> long {
        /* GATE 329 (LUT3 _1704_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut262.push_back(ctx.genrate_lut(lut262idx0));
    flut262.push_back(lut262idx0);
    auto lut262idx1 = [](long I) -> long {
        /* GATE 400 (LUT3 _1775_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut262.push_back(ctx.genrate_lut(lut262idx1));
    flut262.push_back(lut262idx1);
    auto fvec262 = [flut262](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut262[i](I));
        return ret;
    };

    std::cerr << "\rLUT262   ";
    long gin262_clear = 1 * gout240_clear[0] + 2 * gout225_clear[0] + 4 * gout192_clear[0];
    std::vector<long> gout262_clear = fvec262(gin262_clear);

    std::vector<RotationPoly> lut263;
    std::vector<long (*)(long)> flut263;
    auto lut263idx0 = [](long I) -> long {
        /* GATE 448 (LUT2 _1823_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut263.push_back(ctx.genrate_lut(lut263idx0));
    flut263.push_back(lut263idx0);
    auto fvec263 = [flut263](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut263[i](I));
        return ret;
    };

    std::cerr << "\rLUT263   ";
    long gin263_clear = 1 * gout239_clear[0] + 2 * gout166_clear[0];
    std::vector<long> gout263_clear = fvec263(gin263_clear);

    std::vector<RotationPoly> lut264;
    std::vector<long (*)(long)> flut264;
    auto lut264idx0 = [](long I) -> long {
        /* GATE 79 (LUT2 _1454_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut264.push_back(ctx.genrate_lut(lut264idx0));
    flut264.push_back(lut264idx0);
    auto lut264idx1 = [](long I) -> long {
        /* GATE 99 (LUT2 _1474_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut264.push_back(ctx.genrate_lut(lut264idx1));
    flut264.push_back(lut264idx1);
    auto fvec264 = [flut264](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut264[i](I));
        return ret;
    };

    std::cerr << "\rLUT264   ";
    long gin264_clear = 1 * gout229_clear[0] + 2 * gout236_clear[0];
    std::vector<long> gout264_clear = fvec264(gin264_clear);

    std::vector<RotationPoly> lut265;
    std::vector<long (*)(long)> flut265;
    auto lut265idx0 = [](long I) -> long {
        /* GATE 238 (LUT3 _1613_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut265.push_back(ctx.genrate_lut(lut265idx0));
    flut265.push_back(lut265idx0);
    auto lut265idx1 = [](long I) -> long {
        /* GATE 200 (LUT3 _1575_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut265.push_back(ctx.genrate_lut(lut265idx1));
    flut265.push_back(lut265idx1);
    auto fvec265 = [flut265](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut265[i](I));
        return ret;
    };

    std::cerr << "\rLUT265   ";
    long gin265_clear = 1 * gout233_clear[1] + 2 * gout235_clear[0] + 4 * gout246_clear[0];
    std::vector<long> gout265_clear = fvec265(gin265_clear);

    std::vector<RotationPoly> lut266;
    std::vector<long (*)(long)> flut266;
    auto lut266idx0 = [](long I) -> long {
        /* GATE 371 (LUT3 _1746_ INIT 0x69 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut266.push_back(ctx.genrate_lut(lut266idx0));
    flut266.push_back(lut266idx0);
    auto lut266idx1 = [](long I) -> long {
        /* GATE 439 (LUT3 _1814_ INIT 0x71 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut266.push_back(ctx.genrate_lut(lut266idx1));
    flut266.push_back(lut266idx1);
    auto fvec266 = [flut266](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut266[i](I));
        return ret;
    };

    std::cerr << "\rLUT266   ";
    long gin266_clear = 1 * gout242_clear[0] + 2 * gout234_clear[1] + 4 * gout225_clear[1];
    std::vector<long> gout266_clear = fvec266(gin266_clear);

    std::vector<RotationPoly> lut267;
    std::vector<long (*)(long)> flut267;
    auto lut267idx0 = [](long I) -> long {
        /* GATE 328 (LUT3 _1703_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut267.push_back(ctx.genrate_lut(lut267idx0));
    flut267.push_back(lut267idx0);
    auto lut267idx1 = [](long I) -> long {
        /* GATE 284 (LUT3 _1659_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut267.push_back(ctx.genrate_lut(lut267idx1));
    flut267.push_back(lut267idx1);
    auto fvec267 = [flut267](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut267[i](I));
        return ret;
    };

    std::cerr << "\rLUT267   ";
    long gin267_clear = 1 * gout224_clear[0] + 2 * gout240_clear[1] + 4 * gout200_clear[0];
    std::vector<long> gout267_clear = fvec267(gin267_clear);

    std::cerr << "\rFA268    ";
    long gin268_clear = gout243_clear[2] + 1 * ct_x6_clear + 2 * ct_x7_clear + 1 * gout107_clear[0] + 2 * gout105_clear[0];
    std::vector<long> gout268_clear = vdecomp(gin268_clear);

    std::vector<RotationPoly> lut269;
    std::vector<long (*)(long)> flut269;
    auto lut269idx0 = [](long I) -> long {
        /* GATE 129 (LUT3 _1504_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut269.push_back(ctx.genrate_lut(lut269idx0));
    flut269.push_back(lut269idx0);
    auto lut269idx1 = [](long I) -> long {
        /* GATE 163 (LUT3 _1538_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut269.push_back(ctx.genrate_lut(lut269idx1));
    flut269.push_back(lut269idx1);
    auto fvec269 = [flut269](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut269[i](I));
        return ret;
    };

    std::cerr << "\rLUT269   ";
    long gin269_clear = 1 * gout241_clear[1] + 2 * gout226_clear[0] + 4 * gout207_clear[0];
    std::vector<long> gout269_clear = fvec269(gin269_clear);

    std::vector<RotationPoly> lut270;
    std::vector<long (*)(long)> flut270;
    auto lut270idx0 = [](long I) -> long {
        /* GATE 281 (LUT3 _1656_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut270.push_back(ctx.genrate_lut(lut270idx0));
    flut270.push_back(lut270idx0);
    auto lut270idx1 = [](long I) -> long {
        /* GATE 239 (LUT3 _1614_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut270.push_back(ctx.genrate_lut(lut270idx1));
    flut270.push_back(lut270idx1);
    auto fvec270 = [flut270](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut270[i](I));
        return ret;
    };

    std::cerr << "\rLUT270   ";
    long gin270_clear = 1 * gout235_clear[1] + 2 * gout238_clear[1] + 4 * gout231_clear[0];
    std::vector<long> gout270_clear = fvec270(gin270_clear);

    std::vector<RotationPoly> lut271;
    std::vector<long (*)(long)> flut271;
    auto lut271idx0 = [](long I) -> long {
        /* GATE 56 (LUT2 _1431_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut271.push_back(ctx.genrate_lut(lut271idx0));
    flut271.push_back(lut271idx0);
    auto lut271idx1 = [](long I) -> long {
        /* GATE 40 (LUT2 _1415_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut271.push_back(ctx.genrate_lut(lut271idx1));
    flut271.push_back(lut271idx1);
    auto fvec271 = [flut271](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut271[i](I));
        return ret;
    };

    std::cerr << "\rLUT271   ";
    long gin271_clear = 1 * gout237_clear[1] + 2 * gout191_clear[0];
    std::vector<long> gout271_clear = fvec271(gin271_clear);

    std::vector<RotationPoly> lut272;
    std::vector<long (*)(long)> flut272;
    auto lut272idx0 = [](long I) -> long {
        /* GATE 100 (LUT3 _1475_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut272.push_back(ctx.genrate_lut(lut272idx0));
    flut272.push_back(lut272idx0);
    auto lut272idx1 = [](long I) -> long {
        /* GATE 128 (LUT3 _1503_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut272.push_back(ctx.genrate_lut(lut272idx1));
    flut272.push_back(lut272idx1);
    auto fvec272 = [flut272](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut272[i](I));
        return ret;
    };

    std::cerr << "\rLUT272   ";
    long gin272_clear = 1 * gout236_clear[1] + 2 * gout241_clear[0] + 4 * gout184_clear[0];
    std::vector<long> gout272_clear = fvec272(gin272_clear);

    std::vector<RotationPoly> lut273;
    std::vector<long (*)(long)> flut273;
    auto lut273idx0 = [](long I) -> long {
        /* GATE 2 (LUT2 _1377_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut273.push_back(ctx.genrate_lut(lut273idx0));
    flut273.push_back(lut273idx0);
    auto fvec273 = [flut273](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut273[i](I));
        return ret;
    };

    std::cerr << "\rLUT273   ";
    long gin273_clear = 1 * gout247_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout273_clear = fvec273(gin273_clear);

    std::vector<RotationPoly> lut274;
    std::vector<long (*)(long)> flut274;
    auto lut274idx0 = [](long I) -> long {
        /* GATE 127 (LUT2 _1502_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut274.push_back(ctx.genrate_lut(lut274idx0));
    flut274.push_back(lut274idx0);
    auto lut274idx1 = [](long I) -> long {
        /* GATE 161 (LUT2 _1536_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut274.push_back(ctx.genrate_lut(lut274idx1));
    flut274.push_back(lut274idx1);
    auto fvec274 = [flut274](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut274[i](I));
        return ret;
    };

    std::cerr << "\rLUT274   ";
    long gin274_clear = 1 * gout272_clear[1] + 2 * gout269_clear[0];
    std::vector<long> gout274_clear = fvec274(gin274_clear);

    std::vector<RotationPoly> lut275;
    std::vector<long (*)(long)> flut275;
    auto lut275idx0 = [](long I) -> long {
        /* GATE 126 (LUT2 _1501_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut275.push_back(ctx.genrate_lut(lut275idx0));
    flut275.push_back(lut275idx0);
    auto lut275idx1 = [](long I) -> long {
        /* GATE 98 (LUT2 _1473_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut275.push_back(ctx.genrate_lut(lut275idx1));
    flut275.push_back(lut275idx1);
    auto fvec275 = [flut275](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut275[i](I));
        return ret;
    };

    std::cerr << "\rLUT275   ";
    long gin275_clear = 1 * gout264_clear[1] + 2 * gout272_clear[0];
    std::vector<long> gout275_clear = fvec275(gin275_clear);

    std::vector<RotationPoly> lut276;
    std::vector<long (*)(long)> flut276;
    auto lut276idx0 = [](long I) -> long {
        /* GATE 198 (LUT3 _1573_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut276.push_back(ctx.genrate_lut(lut276idx0));
    flut276.push_back(lut276idx0);
    auto lut276idx1 = [](long I) -> long {
        /* GATE 236 (LUT3 _1611_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut276.push_back(ctx.genrate_lut(lut276idx1));
    flut276.push_back(lut276idx1);
    auto fvec276 = [flut276](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut276[i](I));
        return ret;
    };

    std::cerr << "\rLUT276   ";
    long gin276_clear = 1 * gout252_clear[1] + 2 * gout265_clear[1] + 4 * gout215_clear[1];
    std::vector<long> gout276_clear = fvec276(gin276_clear);

    std::cerr << "\rFA277    ";
    long gin277_clear = gout268_clear[2] + 1 * ct_x8_clear + 2 * ct_x9_clear + 1 * gout103_clear[0] + 2 * gout100_clear[0];
    std::vector<long> gout277_clear = vdecomp(gin277_clear);

    std::vector<RotationPoly> lut278;
    std::vector<long (*)(long)> flut278;
    auto lut278idx0 = [](long I) -> long {
        /* GATE 1 (LUT3 _1376_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut278.push_back(ctx.genrate_lut(lut278idx0));
    flut278.push_back(lut278idx0);
    auto fvec278 = [flut278](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut278[i](I));
        return ret;
    };

    std::cerr << "\rLUT278   ";
    long gin278_clear = 1 * gout273_clear[0] + 2 * gout244_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout278_clear = fvec278(gin278_clear);

    std::vector<RotationPoly> lut279;
    std::vector<long (*)(long)> flut279;
    auto lut279idx0 = [](long I) -> long {
        /* GATE 16 (LUT3 _1391_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut279.push_back(ctx.genrate_lut(lut279idx0));
    flut279.push_back(lut279idx0);
    auto fvec279 = [flut279](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut279[i](I));
        return ret;
    };

    std::cerr << "\rLUT279   ";
    long gin279_clear = 1 * gout209_clear[0] + 2 * gout253_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout279_clear = fvec279(gin279_clear);

    std::vector<RotationPoly> lut280;
    std::vector<long (*)(long)> flut280;
    auto lut280idx0 = [](long I) -> long {
        /* GATE 12 (LUT3 _1387_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut280.push_back(ctx.genrate_lut(lut280idx0));
    flut280.push_back(lut280idx0);
    auto fvec280 = [flut280](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut280[i](I));
        return ret;
    };

    std::cerr << "\rLUT280   ";
    long gin280_clear = 1 * gout249_clear[0] + 2 * gout201_clear[0] + 4 * gout205_clear[0];
    std::vector<long> gout280_clear = fvec280(gin280_clear);

    std::vector<RotationPoly> lut281;
    std::vector<long (*)(long)> flut281;
    auto lut281idx0 = [](long I) -> long {
        /* GATE 417 (LUT3 _1792_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut281.push_back(ctx.genrate_lut(lut281idx0));
    flut281.push_back(lut281idx0);
    auto fvec281 = [flut281](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut281[i](I));
        return ret;
    };

    std::cerr << "\rLUT281   ";
    long gin281_clear = 1 * gout219_clear[0] + 2 * gout254_clear[0] + 4 * gout39_clear[0];
    std::vector<long> gout281_clear = fvec281(gin281_clear);

    std::vector<RotationPoly> lut282;
    std::vector<long (*)(long)> flut282;
    auto lut282idx0 = [](long I) -> long {
        /* GATE 11 (LUT2 _1386_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut282.push_back(ctx.genrate_lut(lut282idx0));
    flut282.push_back(lut282idx0);
    auto fvec282 = [flut282](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut282[i](I));
        return ret;
    };

    std::cerr << "\rLUT282   ";
    long gin282_clear = 1 * gout280_clear[0] + 2 * gout250_clear[0];
    std::vector<long> gout282_clear = fvec282(gin282_clear);

    std::vector<RotationPoly> lut283;
    std::vector<long (*)(long)> flut283;
    auto lut283idx0 = [](long I) -> long {
        /* GATE 25 (LUT3 _1400_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut283.push_back(ctx.genrate_lut(lut283idx0));
    flut283.push_back(lut283idx0);
    auto fvec283 = [flut283](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut283[i](I));
        return ret;
    };

    std::cerr << "\rLUT283   ";
    long gin283_clear = 1 * gout248_clear[0] + 2 * gout258_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout283_clear = fvec283(gin283_clear);

    std::vector<RotationPoly> lut284;
    std::vector<long (*)(long)> flut284;
    auto lut284idx0 = [](long I) -> long {
        /* GATE 125 (LUT2 _1500_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut284.push_back(ctx.genrate_lut(lut284idx0));
    flut284.push_back(lut284idx0);
    auto lut284idx1 = [](long I) -> long {
        /* GATE 159 (LUT2 _1534_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut284.push_back(ctx.genrate_lut(lut284idx1));
    flut284.push_back(lut284idx1);
    auto fvec284 = [flut284](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut284[i](I));
        return ret;
    };

    std::cerr << "\rLUT284   ";
    long gin284_clear = 1 * gout275_clear[0] + 2 * gout274_clear[0];
    std::vector<long> gout284_clear = fvec284(gin284_clear);

    std::vector<RotationPoly> lut285;
    std::vector<long (*)(long)> flut285;
    auto lut285idx0 = [](long I) -> long {
        /* GATE 438 (LUT3 _1813_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut285.push_back(ctx.genrate_lut(lut285idx0));
    flut285.push_back(lut285idx0);
    auto fvec285 = [flut285](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut285[i](I));
        return ret;
    };

    std::cerr << "\rLUT285   ";
    long gin285_clear = 1 * gout266_clear[1] + 2 * gout242_clear[1] + 4 * gout234_clear[0];
    std::vector<long> gout285_clear = fvec285(gin285_clear);

    std::vector<RotationPoly> lut286;
    std::vector<long (*)(long)> flut286;
    auto lut286idx0 = [](long I) -> long {
        /* GATE 402 (LUT2 _1777_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut286.push_back(ctx.genrate_lut(lut286idx0));
    flut286.push_back(lut286idx0);
    auto lut286idx1 = [](long I) -> long {
        /* GATE 457 (LUT2 _1832_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut286.push_back(ctx.genrate_lut(lut286idx1));
    flut286.push_back(lut286idx1);
    auto fvec286 = [flut286](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut286[i](I));
        return ret;
    };

    std::cerr << "\rLUT286   ";
    long gin286_clear = 1 * gout255_clear[0] + 2 * gout145_clear[0];
    std::vector<long> gout286_clear = fvec286(gin286_clear);

    std::vector<RotationPoly> lut287;
    std::vector<long (*)(long)> flut287;
    auto lut287idx0 = [](long I) -> long {
        /* GATE 279 (LUT3 _1654_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut287.push_back(ctx.genrate_lut(lut287idx0));
    flut287.push_back(lut287idx0);
    auto lut287idx1 = [](long I) -> long {
        /* GATE 237 (LUT3 _1612_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut287.push_back(ctx.genrate_lut(lut287idx1));
    flut287.push_back(lut287idx1);
    auto fvec287 = [flut287](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut287[i](I));
        return ret;
    };

    std::cerr << "\rLUT287   ";
    long gin287_clear = 1 * gout265_clear[0] + 2 * gout270_clear[1] + 4 * gout246_clear[1];
    std::vector<long> gout287_clear = fvec287(gin287_clear);

    std::vector<RotationPoly> lut288;
    std::vector<long (*)(long)> flut288;
    auto lut288idx0 = [](long I) -> long {
        /* GATE 38 (LUT3 _1413_ INIT 0x60 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut288.push_back(ctx.genrate_lut(lut288idx0));
    flut288.push_back(lut288idx0);
    auto lut288idx1 = [](long I) -> long {
        /* GATE 54 (LUT2 _1429_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut288.push_back(ctx.genrate_lut(lut288idx1));
    flut288.push_back(lut288idx1);
    auto fvec288 = [flut288](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut288[i](I));
        return ret;
    };

    std::cerr << "\rLUT288   ";
    long gin288_clear = 1 * gout251_clear[0] + 2 * gout271_clear[1] + 4 * gout205_clear[0];
    std::vector<long> gout288_clear = fvec288(gin288_clear);

    std::vector<RotationPoly> lut289;
    std::vector<long (*)(long)> flut289;
    auto lut289idx0 = [](long I) -> long {
        /* GATE 401 (LUT3 _1776_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut289.push_back(ctx.genrate_lut(lut289idx0));
    flut289.push_back(lut289idx0);
    auto lut289idx1 = [](long I) -> long {
        /* GATE 327 (LUT3 _1702_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut289.push_back(ctx.genrate_lut(lut289idx1));
    flut289.push_back(lut289idx1);
    auto fvec289 = [flut289](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut289[i](I));
        return ret;
    };

    std::cerr << "\rLUT289   ";
    long gin289_clear = 1 * gout267_clear[0] + 2 * gout262_clear[0] + 4 * gout255_clear[1];
    std::vector<long> gout289_clear = fvec289(gin289_clear);

    std::vector<RotationPoly> lut290;
    std::vector<long (*)(long)> flut290;
    auto lut290idx0 = [](long I) -> long {
        /* GATE 37 (LUT3 _1412_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut290.push_back(ctx.genrate_lut(lut290idx0));
    flut290.push_back(lut290idx0);
    auto fvec290 = [flut290](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut290[i](I));
        return ret;
    };

    std::cerr << "\rLUT290   ";
    long gin290_clear = 1 * gout288_clear[0] + 2 * gout261_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout290_clear = fvec290(gin290_clear);

    std::vector<RotationPoly> lut291;
    std::vector<long (*)(long)> flut291;
    auto lut291idx0 = [](long I) -> long {
        /* GATE 282 (LUT3 _1657_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut291.push_back(ctx.genrate_lut(lut291idx0));
    flut291.push_back(lut291idx0);
    auto lut291idx1 = [](long I) -> long {
        /* GATE 326 (LUT3 _1701_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut291.push_back(ctx.genrate_lut(lut291idx1));
    flut291.push_back(lut291idx1);
    auto fvec291 = [flut291](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut291[i](I));
        return ret;
    };

    std::cerr << "\rLUT291   ";
    long gin291_clear = 1 * gout238_clear[0] + 2 * gout267_clear[1] + 4 * gout230_clear[1];
    std::vector<long> gout291_clear = fvec291(gin291_clear);

    std::vector<RotationPoly> lut292;
    std::vector<long (*)(long)> flut292;
    auto lut292idx0 = [](long I) -> long {
        /* GATE 370 (LUT3 _1745_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut292.push_back(ctx.genrate_lut(lut292idx0));
    flut292.push_back(lut292idx0);
    auto lut292idx1 = [](long I) -> long {
        /* GATE 447 (LUT3 _1822_ INIT 0x71 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut292.push_back(ctx.genrate_lut(lut292idx1));
    flut292.push_back(lut292idx1);
    auto fvec292 = [flut292](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut292[i](I));
        return ret;
    };

    std::cerr << "\rLUT292   ";
    long gin292_clear = 1 * gout266_clear[0] + 2 * gout239_clear[1] + 4 * gout262_clear[1];
    std::vector<long> gout292_clear = fvec292(gin292_clear);

    std::vector<RotationPoly> lut293;
    std::vector<long (*)(long)> flut293;
    auto lut293idx0 = [](long I) -> long {
        /* GATE 55 (LUT2 _1430_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut293.push_back(ctx.genrate_lut(lut293idx0));
    flut293.push_back(lut293idx0);
    auto lut293idx1 = [](long I) -> long {
        /* GATE 78 (LUT2 _1453_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut293.push_back(ctx.genrate_lut(lut293idx1));
    flut293.push_back(lut293idx1);
    auto fvec293 = [flut293](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut293[i](I));
        return ret;
    };

    std::cerr << "\rLUT293   ";
    long gin293_clear = 1 * gout271_clear[0] + 2 * gout229_clear[1];
    std::vector<long> gout293_clear = fvec293(gin293_clear);

    std::vector<RotationPoly> lut294;
    std::vector<long (*)(long)> flut294;
    auto lut294idx0 = [](long I) -> long {
        /* GATE 325 (LUT3 _1700_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut294.push_back(ctx.genrate_lut(lut294idx0));
    flut294.push_back(lut294idx0);
    auto lut294idx1 = [](long I) -> long {
        /* GATE 405 (LUT3 _1780_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut294.push_back(ctx.genrate_lut(lut294idx1));
    flut294.push_back(lut294idx1);
    auto fvec294 = [flut294](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut294[i](I));
        return ret;
    };

    std::cerr << "\rLUT294   ";
    long gin294_clear = 1 * gout291_clear[1] + 2 * gout289_clear[1] + 4 * gout230_clear[0];
    std::vector<long> gout294_clear = fvec294(gin294_clear);

    std::vector<RotationPoly> lut295;
    std::vector<long (*)(long)> flut295;
    auto lut295idx0 = [](long I) -> long {
        /* GATE 120 (LUT3 _1495_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut295.push_back(ctx.genrate_lut(lut295idx0));
    flut295.push_back(lut295idx0);
    auto fvec295 = [flut295](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut295[i](I));
        return ret;
    };

    std::cerr << "\rLUT295   ";
    long gin295_clear = 1 * gout183_clear[1] + 2 * gout268_clear[1] + 4 * gout228_clear[0];
    std::vector<long> gout295_clear = fvec295(gin295_clear);

    std::vector<RotationPoly> lut296;
    std::vector<long (*)(long)> flut296;
    auto lut296idx0 = [](long I) -> long {
        /* GATE 96 (LUT3 _1471_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut296.push_back(ctx.genrate_lut(lut296idx0));
    flut296.push_back(lut296idx0);
    auto fvec296 = [flut296](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut296[i](I));
        return ret;
    };

    std::cerr << "\rLUT296   ";
    long gin296_clear = 1 * gout183_clear[0] + 2 * gout268_clear[0] + 4 * gout228_clear[0];
    std::vector<long> gout296_clear = fvec296(gin296_clear);

    std::vector<RotationPoly> lut297;
    std::vector<long (*)(long)> flut297;
    auto lut297idx0 = [](long I) -> long {
        /* GATE 95 (LUT2 _1470_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut297.push_back(ctx.genrate_lut(lut297idx0));
    flut297.push_back(lut297idx0);
    auto fvec297 = [flut297](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut297[i](I));
        return ret;
    };

    std::cerr << "\rLUT297   ";
    long gin297_clear = 1 * gout296_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout297_clear = fvec297(gin297_clear);

    std::vector<RotationPoly> lut298;
    std::vector<long (*)(long)> flut298;
    auto lut298idx0 = [](long I) -> long {
        /* GATE 197 (LUT2 _1572_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut298.push_back(ctx.genrate_lut(lut298idx0));
    flut298.push_back(lut298idx0);
    auto lut298idx1 = [](long I) -> long {
        /* GATE 162 (LUT2 _1537_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut298.push_back(ctx.genrate_lut(lut298idx1));
    flut298.push_back(lut298idx1);
    auto fvec298 = [flut298](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut298[i](I));
        return ret;
    };

    std::cerr << "\rLUT298   ";
    long gin298_clear = 1 * gout269_clear[1] + 2 * gout252_clear[0];
    std::vector<long> gout298_clear = fvec298(gin298_clear);

    std::vector<RotationPoly> lut299;
    std::vector<long (*)(long)> flut299;
    auto lut299idx0 = [](long I) -> long {
        /* GATE 152 (LUT3 _1527_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut299.push_back(ctx.genrate_lut(lut299idx0));
    flut299.push_back(lut299idx0);
    auto fvec299 = [flut299](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut299[i](I));
        return ret;
    };

    std::cerr << "\rLUT299   ";
    long gin299_clear = 1 * gout185_clear[0] + 2 * gout277_clear[0] + 4 * gout228_clear[0];
    std::vector<long> gout299_clear = fvec299(gin299_clear);

    std::vector<RotationPoly> lut300;
    std::vector<long (*)(long)> flut300;
    auto lut300idx0 = [](long I) -> long {
        /* GATE 151 (LUT2 _1526_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut300.push_back(ctx.genrate_lut(lut300idx0));
    flut300.push_back(lut300idx0);
    auto fvec300 = [flut300](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut300[i](I));
        return ret;
    };

    std::cerr << "\rLUT300   ";
    long gin300_clear = 1 * gout299_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout300_clear = fvec300(gin300_clear);

    std::vector<RotationPoly> lut301;
    std::vector<long (*)(long)> flut301;
    auto lut301idx0 = [](long I) -> long {
        /* GATE 188 (LUT3 _1563_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut301.push_back(ctx.genrate_lut(lut301idx0));
    flut301.push_back(lut301idx0);
    auto fvec301 = [flut301](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut301[i](I));
        return ret;
    };

    std::cerr << "\rLUT301   ";
    long gin301_clear = 1 * gout185_clear[1] + 2 * gout277_clear[1] + 4 * gout228_clear[0];
    std::vector<long> gout301_clear = fvec301(gin301_clear);

    std::vector<RotationPoly> lut302;
    std::vector<long (*)(long)> flut302;
    auto lut302idx0 = [](long I) -> long {
        /* GATE 455 (LUT3 _1830_ INIT 0x71 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut302.push_back(ctx.genrate_lut(lut302idx0));
    flut302.push_back(lut302idx0);
    auto lut302idx1 = [](long I) -> long {
        /* GATE 369 (LUT3 _1744_ INIT 0x69 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut302.push_back(ctx.genrate_lut(lut302idx1));
    flut302.push_back(lut302idx1);
    auto fvec302 = [flut302](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut302[i](I));
        return ret;
    };

    std::cerr << "\rLUT302   ";
    long gin302_clear = 1 * gout292_clear[0] + 2 * gout286_clear[0] + 4 * gout289_clear[0];
    std::vector<long> gout302_clear = fvec302(gin302_clear);

    std::vector<RotationPoly> lut303;
    std::vector<long (*)(long)> flut303;
    auto lut303idx0 = [](long I) -> long {
        /* GATE 187 (LUT2 _1562_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut303.push_back(ctx.genrate_lut(lut303idx0));
    flut303.push_back(lut303idx0);
    auto fvec303 = [flut303](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut303[i](I));
        return ret;
    };

    std::cerr << "\rLUT303   ";
    long gin303_clear = 1 * gout301_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout303_clear = fvec303(gin303_clear);

    std::cerr << "\rFA304    ";
    long gin304_clear = gout277_clear[2] + 1 * ct_x10_clear + 2 * ct_x11_clear + 1 * gout91_clear[0] + 2 * gout71_clear[0];
    std::vector<long> gout304_clear = vdecomp(gin304_clear);

    std::vector<RotationPoly> lut305;
    std::vector<long (*)(long)> flut305;
    auto lut305idx0 = [](long I) -> long {
        /* GATE 195 (LUT2 _1570_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut305.push_back(ctx.genrate_lut(lut305idx0));
    flut305.push_back(lut305idx0);
    auto lut305idx1 = [](long I) -> long {
        /* GATE 160 (LUT2 _1535_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut305.push_back(ctx.genrate_lut(lut305idx1));
    flut305.push_back(lut305idx1);
    auto fvec305 = [flut305](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut305[i](I));
        return ret;
    };

    std::cerr << "\rLUT305   ";
    long gin305_clear = 1 * gout274_clear[1] + 2 * gout298_clear[1];
    std::vector<long> gout305_clear = fvec305(gin305_clear);

    std::vector<RotationPoly> lut306;
    std::vector<long (*)(long)> flut306;
    auto lut306idx0 = [](long I) -> long {
        /* GATE 280 (LUT3 _1655_ INIT 0x69 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut306.push_back(ctx.genrate_lut(lut306idx0));
    flut306.push_back(lut306idx0);
    auto lut306idx1 = [](long I) -> long {
        /* GATE 324 (LUT3 _1699_ INIT 0x2b PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut306.push_back(ctx.genrate_lut(lut306idx1));
    flut306.push_back(lut306idx1);
    auto fvec306 = [flut306](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut306[i](I));
        return ret;
    };

    std::cerr << "\rLUT306   ";
    long gin306_clear = 1 * gout270_clear[0] + 2 * gout291_clear[0] + 4 * gout231_clear[1];
    std::vector<long> gout306_clear = fvec306(gin306_clear);

    std::vector<RotationPoly> lut307;
    std::vector<long (*)(long)> flut307;
    auto lut307idx0 = [](long I) -> long {
        /* GATE 53 (LUT3 _1428_ INIT 0x60 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut307.push_back(ctx.genrate_lut(lut307idx0));
    flut307.push_back(lut307idx0);
    auto lut307idx1 = [](long I) -> long {
        /* GATE 76 (LUT2 _1451_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut307.push_back(ctx.genrate_lut(lut307idx1));
    flut307.push_back(lut307idx1);
    auto fvec307 = [flut307](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut307[i](I));
        return ret;
    };

    std::cerr << "\rLUT307   ";
    long gin307_clear = 1 * gout288_clear[1] + 2 * gout293_clear[0] + 4 * gout205_clear[0];
    std::vector<long> gout307_clear = fvec307(gin307_clear);

    std::vector<RotationPoly> lut308;
    std::vector<long (*)(long)> flut308;
    auto lut308idx0 = [](long I) -> long {
        /* GATE 235 (LUT2 _1610_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut308.push_back(ctx.genrate_lut(lut308idx0));
    flut308.push_back(lut308idx0);
    auto lut308idx1 = [](long I) -> long {
        /* GATE 277 (LUT2 _1652_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut308.push_back(ctx.genrate_lut(lut308idx1));
    flut308.push_back(lut308idx1);
    auto fvec308 = [flut308](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut308[i](I));
        return ret;
    };

    std::cerr << "\rLUT308   ";
    long gin308_clear = 1 * gout276_clear[1] + 2 * gout287_clear[1];
    std::vector<long> gout308_clear = fvec308(gin308_clear);

    std::vector<RotationPoly> lut309;
    std::vector<long (*)(long)> flut309;
    auto lut309idx0 = [](long I) -> long {
        /* GATE 227 (LUT3 _1602_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut309.push_back(ctx.genrate_lut(lut309idx0));
    flut309.push_back(lut309idx0);
    auto fvec309 = [flut309](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut309[i](I));
        return ret;
    };

    std::cerr << "\rLUT309   ";
    long gin309_clear = 1 * gout208_clear[0] + 2 * gout304_clear[0] + 4 * gout228_clear[0];
    std::vector<long> gout309_clear = fvec309(gin309_clear);

    std::vector<RotationPoly> lut310;
    std::vector<long (*)(long)> flut310;
    auto lut310idx0 = [](long I) -> long {
        /* GATE 97 (LUT2 _1472_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut310.push_back(ctx.genrate_lut(lut310idx0));
    flut310.push_back(lut310idx0);
    auto lut310idx1 = [](long I) -> long {
        /* GATE 77 (LUT2 _1452_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut310.push_back(ctx.genrate_lut(lut310idx1));
    flut310.push_back(lut310idx1);
    auto fvec310 = [flut310](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut310[i](I));
        return ret;
    };

    std::cerr << "\rLUT310   ";
    long gin310_clear = 1 * gout293_clear[1] + 2 * gout264_clear[0];
    std::vector<long> gout310_clear = fvec310(gin310_clear);

    std::vector<RotationPoly> lut311;
    std::vector<long (*)(long)> flut311;
    auto lut311idx0 = [](long I) -> long {
        /* GATE 226 (LUT2 _1601_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut311.push_back(ctx.genrate_lut(lut311idx0));
    flut311.push_back(lut311idx0);
    auto fvec311 = [flut311](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut311[i](I));
        return ret;
    };

    std::cerr << "\rLUT311   ";
    long gin311_clear = 1 * gout309_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout311_clear = fvec311(gin311_clear);

    std::vector<RotationPoly> lut312;
    std::vector<long (*)(long)> flut312;
    auto lut312idx0 = [](long I) -> long {
        /* GATE 416 (LUT3 _1791_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut312.push_back(ctx.genrate_lut(lut312idx0));
    flut312.push_back(lut312idx0);
    auto fvec312 = [flut312](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut312[i](I));
        return ret;
    };

    std::cerr << "\rLUT312   ";
    long gin312_clear = 1 * gout281_clear[0] + 2 * gout285_clear[0] + 4 * gout222_clear[0];
    std::vector<long> gout312_clear = fvec312(gin312_clear);

    std::vector<RotationPoly> lut313;
    std::vector<long (*)(long)> flut313;
    auto lut313idx0 = [](long I) -> long {
        /* GATE 234 (LUT2 _1609_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut313.push_back(ctx.genrate_lut(lut313idx0));
    flut313.push_back(lut313idx0);
    auto lut313idx1 = [](long I) -> long {
        /* GATE 196 (LUT2 _1571_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut313.push_back(ctx.genrate_lut(lut313idx1));
    flut313.push_back(lut313idx1);
    auto fvec313 = [flut313](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut313[i](I));
        return ret;
    };

    std::cerr << "\rLUT313   ";
    long gin313_clear = 1 * gout298_clear[0] + 2 * gout276_clear[0];
    std::vector<long> gout313_clear = fvec313(gin313_clear);

    std::vector<RotationPoly> lut314;
    std::vector<long (*)(long)> flut314;
    auto lut314idx0 = [](long I) -> long {
        /* GATE 52 (LUT3 _1427_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut314.push_back(ctx.genrate_lut(lut314idx0));
    flut314.push_back(lut314idx0);
    auto fvec314 = [flut314](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut314[i](I));
        return ret;
    };

    std::cerr << "\rLUT314   ";
    long gin314_clear = 1 * gout307_clear[0] + 2 * gout259_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout314_clear = fvec314(gin314_clear);

    std::vector<RotationPoly> lut315;
    std::vector<long (*)(long)> flut315;
    auto lut315idx0 = [](long I) -> long {
        /* GATE 415 (LUT3 _1790_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut315.push_back(ctx.genrate_lut(lut315idx0));
    flut315.push_back(lut315idx0);
    auto fvec315 = [flut315](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut315[i](I));
        return ret;
    };

    std::cerr << "\rLUT315   ";
    long gin315_clear = 1 * gout312_clear[0] + 2 * gout292_clear[1] + 4 * gout263_clear[0];
    std::vector<long> gout315_clear = fvec315(gin315_clear);

    std::vector<RotationPoly> lut316;
    std::vector<long (*)(long)> flut316;
    auto lut316idx0 = [](long I) -> long {
        /* GATE 414 (LUT2 _1789_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut316.push_back(ctx.genrate_lut(lut316idx0));
    flut316.push_back(lut316idx0);
    auto fvec316 = [flut316](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut316[i](I));
        return ret;
    };

    std::cerr << "\rLUT316   ";
    long gin316_clear = 1 * gout315_clear[0] + 2 * gout302_clear[0];
    std::vector<long> gout316_clear = fvec316(gin316_clear);

    std::vector<RotationPoly> lut317;
    std::vector<long (*)(long)> flut317;
    auto lut317idx0 = [](long I) -> long {
        /* GATE 119 (LUT3 _1494_ INIT 0x80 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut317.push_back(ctx.genrate_lut(lut317idx0));
    flut317.push_back(lut317idx0);
    auto fvec317 = [flut317](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut317[i](I));
        return ret;
    };

    std::cerr << "\rLUT317   ";
    long gin317_clear = 1 * gout310_clear[1] + 2 * gout307_clear[1] + 4 * gout275_clear[1];
    std::vector<long> gout317_clear = fvec317(gin317_clear);

    std::vector<RotationPoly> lut318;
    std::vector<long (*)(long)> flut318;
    auto lut318idx0 = [](long I) -> long {
        /* GATE 275 (LUT2 _1650_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut318.push_back(ctx.genrate_lut(lut318idx0));
    flut318.push_back(lut318idx0);
    auto lut318idx1 = [](long I) -> long {
        /* GATE 233 (LUT2 _1608_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut318.push_back(ctx.genrate_lut(lut318idx1));
    flut318.push_back(lut318idx1);
    auto fvec318 = [flut318](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut318[i](I));
        return ret;
    };

    std::cerr << "\rLUT318   ";
    long gin318_clear = 1 * gout313_clear[0] + 2 * gout308_clear[0];
    std::vector<long> gout318_clear = fvec318(gin318_clear);

    std::vector<RotationPoly> lut319;
    std::vector<long (*)(long)> flut319;
    auto lut319idx0 = [](long I) -> long {
        /* GATE 270 (LUT3 _1645_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut319.push_back(ctx.genrate_lut(lut319idx0));
    flut319.push_back(lut319idx0);
    auto fvec319 = [flut319](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut319[i](I));
        return ret;
    };

    std::cerr << "\rLUT319   ";
    long gin319_clear = 1 * gout208_clear[1] + 2 * gout304_clear[1] + 4 * gout228_clear[0];
    std::vector<long> gout319_clear = fvec319(gin319_clear);

    std::vector<RotationPoly> lut320;
    std::vector<long (*)(long)> flut320;
    auto lut320idx0 = [](long I) -> long {
        /* GATE 269 (LUT2 _1644_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut320.push_back(ctx.genrate_lut(lut320idx0));
    flut320.push_back(lut320idx0);
    auto fvec320 = [flut320](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut320[i](I));
        return ret;
    };

    std::cerr << "\rLUT320   ";
    long gin320_clear = 1 * gout319_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout320_clear = fvec320(gin320_clear);

    std::vector<RotationPoly> lut321;
    std::vector<long (*)(long)> flut321;
    auto lut321idx0 = [](long I) -> long {
        /* GATE 124 (LUT2 _1499_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut321.push_back(ctx.genrate_lut(lut321idx0));
    flut321.push_back(lut321idx0);
    auto fvec321 = [flut321](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut321[i](I));
        return ret;
    };

    std::cerr << "\rLUT321   ";
    long gin321_clear = 1 * gout310_clear[0] + 2 * gout275_clear[1];
    std::vector<long> gout321_clear = fvec321(gin321_clear);

    std::vector<RotationPoly> lut322;
    std::vector<long (*)(long)> flut322;
    auto lut322idx0 = [](long I) -> long {
        /* GATE 460 (LUT3 _1835_ INIT 0x7 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut322.push_back(ctx.genrate_lut(lut322idx0));
    flut322.push_back(lut322idx0);
    auto fvec322 = [flut322](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut322[i](I));
        return ret;
    };

    std::cerr << "\rLUT322   ";
    long gin322_clear = 1 * gout310_clear[1] + 2 * gout307_clear[1] + 4 * gout310_clear[0];
    std::vector<long> gout322_clear = fvec322(gin322_clear);

    std::vector<RotationPoly> lut323;
    std::vector<long (*)(long)> flut323;
    auto lut323idx0 = [](long I) -> long {
        /* GATE 278 (LUT2 _1653_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut323.push_back(ctx.genrate_lut(lut323idx0));
    flut323.push_back(lut323idx0);
    auto lut323idx1 = [](long I) -> long {
        /* GATE 322 (LUT2 _1697_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut323.push_back(ctx.genrate_lut(lut323idx1));
    flut323.push_back(lut323idx1);
    auto fvec323 = [flut323](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut323[i](I));
        return ret;
    };

    std::cerr << "\rLUT323   ";
    long gin323_clear = 1 * gout287_clear[0] + 2 * gout306_clear[0];
    std::vector<long> gout323_clear = fvec323(gin323_clear);

    std::vector<RotationPoly> lut324;
    std::vector<long (*)(long)> flut324;
    auto lut324idx0 = [](long I) -> long {
        /* GATE 75 (LUT3 _1450_ INIT 0x60 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut324.push_back(ctx.genrate_lut(lut324idx0));
    flut324.push_back(lut324idx0);
    auto fvec324 = [flut324](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut324[i](I));
        return ret;
    };

    std::cerr << "\rLUT324   ";
    long gin324_clear = 1 * gout310_clear[1] + 2 * gout307_clear[1] + 4 * gout205_clear[0];
    std::vector<long> gout324_clear = fvec324(gin324_clear);

    std::vector<RotationPoly> lut325;
    std::vector<long (*)(long)> flut325;
    auto lut325idx0 = [](long I) -> long {
        /* GATE 158 (LUT2 _1533_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut325.push_back(ctx.genrate_lut(lut325idx0));
    flut325.push_back(lut325idx0);
    auto fvec325 = [flut325](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut325[i](I));
        return ret;
    };

    std::cerr << "\rLUT325   ";
    long gin325_clear = 1 * gout284_clear[1] + 2 * gout305_clear[1];
    std::vector<long> gout325_clear = fvec325(gin325_clear);

    std::vector<RotationPoly> lut326;
    std::vector<long (*)(long)> flut326;
    auto lut326idx0 = [](long I) -> long {
        /* GATE 74 (LUT3 _1449_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut326.push_back(ctx.genrate_lut(lut326idx0));
    flut326.push_back(lut326idx0);
    auto fvec326 = [flut326](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut326[i](I));
        return ret;
    };

    std::cerr << "\rLUT326   ";
    long gin326_clear = 1 * gout324_clear[0] + 2 * gout297_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout326_clear = fvec326(gin326_clear);

    std::vector<RotationPoly> lut327;
    std::vector<long (*)(long)> flut327;
    auto lut327idx0 = [](long I) -> long {
        /* GATE 406 (LUT2 _1781_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut327.push_back(ctx.genrate_lut(lut327idx0));
    flut327.push_back(lut327idx0);
    auto lut327idx1 = [](long I) -> long {
        /* GATE 323 (LUT2 _1698_ INIT 0x9 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut327.push_back(ctx.genrate_lut(lut327idx1));
    flut327.push_back(lut327idx1);
    auto fvec327 = [flut327](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut327[i](I));
        return ret;
    };

    std::cerr << "\rLUT327   ";
    long gin327_clear = 1 * gout306_clear[1] + 2 * gout294_clear[0];
    std::vector<long> gout327_clear = fvec327(gin327_clear);

    std::cerr << "\rFA328    ";
    long gin328_clear = gout304_clear[2] + 1 * ct_x12_clear + 2 * ct_x13_clear + 1 * gout69_clear[0] + 2 * gout64_clear[0];
    std::vector<long> gout328_clear = vdecomp(gin328_clear);

    std::vector<RotationPoly> lut329;
    std::vector<long (*)(long)> flut329;
    auto lut329idx0 = [](long I) -> long {
        /* GATE 368 (LUT2 _1743_ INIT 0x9 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut329.push_back(ctx.genrate_lut(lut329idx0));
    flut329.push_back(lut329idx0);
    auto lut329idx1 = [](long I) -> long {
        /* GATE 456 (LUT2 _1831_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut329.push_back(ctx.genrate_lut(lut329idx1));
    flut329.push_back(lut329idx1);
    auto fvec329 = [flut329](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut329[i](I));
        return ret;
    };

    std::cerr << "\rLUT329   ";
    long gin329_clear = 1 * gout294_clear[1] + 2 * gout302_clear[1];
    std::vector<long> gout329_clear = fvec329(gin329_clear);

    std::vector<RotationPoly> lut330;
    std::vector<long (*)(long)> flut330;
    auto lut330idx0 = [](long I) -> long {
        /* GATE 232 (LUT2 _1607_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut330.push_back(ctx.genrate_lut(lut330idx0));
    flut330.push_back(lut330idx0);
    auto lut330idx1 = [](long I) -> long {
        /* GATE 194 (LUT2 _1569_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut330.push_back(ctx.genrate_lut(lut330idx1));
    flut330.push_back(lut330idx1);
    auto fvec330 = [flut330](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut330[i](I));
        return ret;
    };

    std::cerr << "\rLUT330   ";
    long gin330_clear = 1 * gout305_clear[0] + 2 * gout313_clear[1];
    std::vector<long> gout330_clear = fvec330(gin330_clear);

    std::vector<RotationPoly> lut331;
    std::vector<long (*)(long)> flut331;
    auto lut331idx0 = [](long I) -> long {
        /* GATE 366 (LUT2 _1741_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut331.push_back(ctx.genrate_lut(lut331idx0));
    flut331.push_back(lut331idx0);
    auto lut331idx1 = [](long I) -> long {
        /* GATE 321 (LUT2 _1696_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut331.push_back(ctx.genrate_lut(lut331idx1));
    flut331.push_back(lut331idx1);
    auto fvec331 = [flut331](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut331[i](I));
        return ret;
    };

    std::cerr << "\rLUT331   ";
    long gin331_clear = 1 * gout323_clear[1] + 2 * gout327_clear[1];
    std::vector<long> gout331_clear = fvec331(gin331_clear);

    std::vector<RotationPoly> lut332;
    std::vector<long (*)(long)> flut332;
    auto lut332idx0 = [](long I) -> long {
        /* GATE 157 (LUT2 _1532_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut332.push_back(ctx.genrate_lut(lut332idx0));
    flut332.push_back(lut332idx0);
    auto fvec332 = [flut332](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut332[i](I));
        return ret;
    };

    std::cerr << "\rLUT332   ";
    long gin332_clear = 1 * gout284_clear[0] + 2 * gout317_clear[0];
    std::vector<long> gout332_clear = fvec332(gin332_clear);

    std::vector<RotationPoly> lut333;
    std::vector<long (*)(long)> flut333;
    auto lut333idx0 = [](long I) -> long {
        /* GATE 367 (LUT2 _1742_ INIT 0x6 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut333.push_back(ctx.genrate_lut(lut333idx0));
    flut333.push_back(lut333idx0);
    auto fvec333 = [flut333](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut333[i](I));
        return ret;
    };

    std::cerr << "\rLUT333   ";
    long gin333_clear = 1 * gout327_clear[0] + 2 * gout329_clear[0];
    std::vector<long> gout333_clear = fvec333(gin333_clear);

    std::vector<RotationPoly> lut334;
    std::vector<long (*)(long)> flut334;
    auto lut334idx0 = [](long I) -> long {
        /* GATE 192 (LUT2 _1567_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut334.push_back(ctx.genrate_lut(lut334idx0));
    flut334.push_back(lut334idx0);
    auto fvec334 = [flut334](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut334[i](I));
        return ret;
    };

    std::cerr << "\rLUT334   ";
    long gin334_clear = 1 * gout332_clear[0] + 2 * gout325_clear[0];
    std::vector<long> gout334_clear = fvec334(gin334_clear);

    std::vector<RotationPoly> lut335;
    std::vector<long (*)(long)> flut335;
    auto lut335idx0 = [](long I) -> long {
        /* GATE 361 (LUT3 _1736_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut335.push_back(ctx.genrate_lut(lut335idx0));
    flut335.push_back(lut335idx0);
    auto fvec335 = [flut335](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut335[i](I));
        return ret;
    };

    std::cerr << "\rLUT335   ";
    long gin335_clear = 1 * gout217_clear[1] + 2 * gout328_clear[1] + 4 * gout228_clear[0];
    std::vector<long> gout335_clear = fvec335(gin335_clear);

    std::vector<RotationPoly> lut336;
    std::vector<long (*)(long)> flut336;
    auto lut336idx0 = [](long I) -> long {
        /* GATE 360 (LUT2 _1735_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut336.push_back(ctx.genrate_lut(lut336idx0));
    flut336.push_back(lut336idx0);
    auto fvec336 = [flut336](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut336[i](I));
        return ret;
    };

    std::cerr << "\rLUT336   ";
    long gin336_clear = 1 * gout335_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout336_clear = fvec336(gin336_clear);

    std::vector<RotationPoly> lut337;
    std::vector<long (*)(long)> flut337;
    auto lut337idx0 = [](long I) -> long {
        /* GATE 413 (LUT3 _1788_ INIT 0x96 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut337.push_back(ctx.genrate_lut(lut337idx0));
    flut337.push_back(lut337idx0);
    auto fvec337 = [flut337](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut337[i](I));
        return ret;
    };

    std::cerr << "\rLUT337   ";
    long gin337_clear = 1 * gout316_clear[0] + 2 * gout329_clear[1] + 4 * gout286_clear[1];
    std::vector<long> gout337_clear = fvec337(gin337_clear);

    std::vector<RotationPoly> lut338;
    std::vector<long (*)(long)> flut338;
    auto lut338idx0 = [](long I) -> long {
        /* GATE 123 (LUT2 _1498_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut338.push_back(ctx.genrate_lut(lut338idx0));
    flut338.push_back(lut338idx0);
    auto lut338idx1 = [](long I) -> long {
        /* GATE 156 (LUT2 _1531_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut338.push_back(ctx.genrate_lut(lut338idx1));
    flut338.push_back(lut338idx1);
    auto fvec338 = [flut338](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut338[i](I));
        return ret;
    };

    std::cerr << "\rLUT338   ";
    long gin338_clear = 1 * gout321_clear[0] + 2 * gout284_clear[0];
    std::vector<long> gout338_clear = fvec338(gin338_clear);

    std::vector<RotationPoly> lut339;
    std::vector<long (*)(long)> flut339;
    auto lut339idx0 = [](long I) -> long {
        /* GATE 461 (LUT2 _1836_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut339.push_back(ctx.genrate_lut(lut339idx0));
    flut339.push_back(lut339idx0);
    auto fvec339 = [flut339](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut339[i](I));
        return ret;
    };

    std::cerr << "\rLUT339   ";
    long gin339_clear = 1 * gout322_clear[0] + 2 * gout275_clear[1];
    std::vector<long> gout339_clear = fvec339(gin339_clear);

    std::vector<RotationPoly> lut340;
    std::vector<long (*)(long)> flut340;
    auto lut340idx0 = [](long I) -> long {
        /* GATE 320 (LUT2 _1695_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut340.push_back(ctx.genrate_lut(lut340idx0));
    flut340.push_back(lut340idx0);
    auto lut340idx1 = [](long I) -> long {
        /* GATE 276 (LUT2 _1651_ INIT 0x6 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut340.push_back(ctx.genrate_lut(lut340idx1));
    flut340.push_back(lut340idx1);
    auto fvec340 = [flut340](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut340[i](I));
        return ret;
    };

    std::cerr << "\rLUT340   ";
    long gin340_clear = 1 * gout308_clear[1] + 2 * gout323_clear[0];
    std::vector<long> gout340_clear = fvec340(gin340_clear);

    std::cerr << "\rFA341    ";
    long gin341_clear = gout328_clear[2] + 1 * ct_x14_clear + 2 * ct_x15_clear + 1 * gout56_clear[0] + 2 * gout82_clear[0];
    std::vector<long> gout341_clear = vdecomp(gin341_clear);

    std::vector<RotationPoly> lut342;
    std::vector<long (*)(long)> flut342;
    auto lut342idx0 = [](long I) -> long {
        /* GATE 122 (LUT3 _1497_ INIT 0x60 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut342.push_back(ctx.genrate_lut(lut342idx0));
    flut342.push_back(lut342idx0);
    auto fvec342 = [flut342](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut342[i](I));
        return ret;
    };

    std::cerr << "\rLUT342   ";
    long gin342_clear = 1 * gout338_clear[0] + 2 * gout317_clear[0] + 4 * gout205_clear[0];
    std::vector<long> gout342_clear = fvec342(gin342_clear);

    std::vector<RotationPoly> lut343;
    std::vector<long (*)(long)> flut343;
    auto lut343idx0 = [](long I) -> long {
        /* GATE 462 (LUT3 _1837_ INIT 0xc5 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut343.push_back(ctx.genrate_lut(lut343idx0));
    flut343.push_back(lut343idx0);
    auto fvec343 = [flut343](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut343[i](I));
        return ret;
    };

    std::cerr << "\rLUT343   ";
    long gin343_clear = 1 * gout295_clear[0] + 2 * gout339_clear[0] + 4 * gout205_clear[0];
    std::vector<long> gout343_clear = fvec343(gin343_clear);

    std::vector<RotationPoly> lut344;
    std::vector<long (*)(long)> flut344;
    auto lut344idx0 = [](long I) -> long {
        /* GATE 155 (LUT2 _1530_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut344.push_back(ctx.genrate_lut(lut344idx0));
    flut344.push_back(lut344idx0);
    auto fvec344 = [flut344](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut344[i](I));
        return ret;
    };

    std::cerr << "\rLUT344   ";
    long gin344_clear = 1 * gout338_clear[1] + 2 * gout332_clear[0];
    std::vector<long> gout344_clear = fvec344(gin344_clear);

    std::vector<RotationPoly> lut345;
    std::vector<long (*)(long)> flut345;
    auto lut345idx0 = [](long I) -> long {
        /* GATE 154 (LUT3 _1529_ INIT 0x90 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut345.push_back(ctx.genrate_lut(lut345idx0));
    flut345.push_back(lut345idx0);
    auto fvec345 = [flut345](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut345[i](I));
        return ret;
    };

    std::cerr << "\rLUT345   ";
    long gin345_clear = 1 * gout344_clear[0] + 2 * gout325_clear[0] + 4 * gout205_clear[0];
    std::vector<long> gout345_clear = fvec345(gin345_clear);

    std::vector<RotationPoly> lut346;
    std::vector<long (*)(long)> flut346;
    auto lut346idx0 = [](long I) -> long {
        /* GATE 315 (LUT3 _1690_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut346.push_back(ctx.genrate_lut(lut346idx0));
    flut346.push_back(lut346idx0);
    auto fvec346 = [flut346](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut346[i](I));
        return ret;
    };

    std::cerr << "\rLUT346   ";
    long gin346_clear = 1 * gout217_clear[0] + 2 * gout328_clear[0] + 4 * gout228_clear[0];
    std::vector<long> gout346_clear = fvec346(gin346_clear);

    std::vector<RotationPoly> lut347;
    std::vector<long (*)(long)> flut347;
    auto lut347idx0 = [](long I) -> long {
        /* GATE 314 (LUT2 _1689_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut347.push_back(ctx.genrate_lut(lut347idx0));
    flut347.push_back(lut347idx0);
    auto fvec347 = [flut347](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut347[i](I));
        return ret;
    };

    std::cerr << "\rLUT347   ";
    long gin347_clear = 1 * gout346_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout347_clear = fvec347(gin347_clear);

    std::vector<RotationPoly> lut348;
    std::vector<long (*)(long)> flut348;
    auto lut348idx0 = [](long I) -> long {
        /* GATE 193 (LUT3 _1568_ INIT 0x17 PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut348.push_back(ctx.genrate_lut(lut348idx0));
    flut348.push_back(lut348idx0);
    auto fvec348 = [flut348](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut348[i](I));
        return ret;
    };

    std::cerr << "\rLUT348   ";
    long gin348_clear = 1 * gout284_clear[1] + 2 * gout305_clear[1] + 4 * gout338_clear[1];
    std::vector<long> gout348_clear = fvec348(gin348_clear);

    std::vector<RotationPoly> lut349;
    std::vector<long (*)(long)> flut349;
    auto lut349idx0 = [](long I) -> long {
        /* GATE 231 (LUT3 _1606_ INIT 0xd0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut349.push_back(ctx.genrate_lut(lut349idx0));
    flut349.push_back(lut349idx0);
    auto lut349idx1 = [](long I) -> long {
        /* GATE 191 (LUT2 _1566_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut349.push_back(ctx.genrate_lut(lut349idx1));
    flut349.push_back(lut349idx1);
    auto fvec349 = [flut349](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut349[i](I));
        return ret;
    };

    std::cerr << "\rLUT349   ";
    long gin349_clear = 1 * gout334_clear[0] + 2 * gout348_clear[0] + 4 * gout330_clear[1];
    std::vector<long> gout349_clear = fvec349(gin349_clear);

    std::vector<RotationPoly> lut350;
    std::vector<long (*)(long)> flut350;
    auto lut350idx0 = [](long I) -> long {
        /* GATE 190 (LUT3 _1565_ INIT 0x90 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut350.push_back(ctx.genrate_lut(lut350idx0));
    flut350.push_back(lut350idx0);
    auto fvec350 = [flut350](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut350[i](I));
        return ret;
    };

    std::cerr << "\rLUT350   ";
    long gin350_clear = 1 * gout349_clear[1] + 2 * gout330_clear[1] + 4 * gout205_clear[0];
    std::vector<long> gout350_clear = fvec350(gin350_clear);

    std::vector<RotationPoly> lut351;
    std::vector<long (*)(long)> flut351;
    auto lut351idx0 = [](long I) -> long {
        /* GATE 408 (LUT3 _1783_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut351.push_back(ctx.genrate_lut(lut351idx0));
    flut351.push_back(lut351idx0);
    auto fvec351 = [flut351](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut351[i](I));
        return ret;
    };

    std::cerr << "\rLUT351   ";
    long gin351_clear = 1 * gout218_clear[0] + 2 * gout341_clear[0] + 4 * gout228_clear[0];
    std::vector<long> gout351_clear = fvec351(gin351_clear);

    std::vector<RotationPoly> lut352;
    std::vector<long (*)(long)> flut352;
    auto lut352idx0 = [](long I) -> long {
        /* GATE 407 (LUT2 _1782_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut352.push_back(ctx.genrate_lut(lut352idx0));
    flut352.push_back(lut352idx0);
    auto fvec352 = [flut352](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut352[i](I));
        return ret;
    };

    std::cerr << "\rLUT352   ";
    long gin352_clear = 1 * gout351_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout352_clear = fvec352(gin352_clear);

    std::vector<RotationPoly> lut353;
    std::vector<long (*)(long)> flut353;
    auto lut353idx0 = [](long I) -> long {
        /* GATE 274 (LUT3 _1649_ INIT 0xe0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut353.push_back(ctx.genrate_lut(lut353idx0));
    flut353.push_back(lut353idx0);
    auto lut353idx1 = [](long I) -> long {
        /* GATE 230 (LUT2 _1605_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut353.push_back(ctx.genrate_lut(lut353idx1));
    flut353.push_back(lut353idx1);
    auto fvec353 = [flut353](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut353[i](I));
        return ret;
    };

    std::cerr << "\rLUT353   ";
    long gin353_clear = 1 * gout349_clear[0] + 2 * gout330_clear[0] + 4 * gout318_clear[1];
    std::vector<long> gout353_clear = fvec353(gin353_clear);

    std::vector<RotationPoly> lut354;
    std::vector<long (*)(long)> flut354;
    auto lut354idx0 = [](long I) -> long {
        /* GATE 121 (LUT3 _1496_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut354.push_back(ctx.genrate_lut(lut354idx0));
    flut354.push_back(lut354idx0);
    auto fvec354 = [flut354](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut354[i](I));
        return ret;
    };

    std::cerr << "\rLUT354   ";
    long gin354_clear = 1 * gout342_clear[0] + 2 * gout300_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout354_clear = fvec354(gin354_clear);

    std::vector<RotationPoly> lut355;
    std::vector<long (*)(long)> flut355;
    auto lut355idx0 = [](long I) -> long {
        /* GATE 153 (LUT3 _1528_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut355.push_back(ctx.genrate_lut(lut355idx0));
    flut355.push_back(lut355idx0);
    auto fvec355 = [flut355](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut355[i](I));
        return ret;
    };

    std::cerr << "\rLUT355   ";
    long gin355_clear = 1 * gout345_clear[0] + 2 * gout303_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout355_clear = fvec355(gin355_clear);

    std::vector<RotationPoly> lut356;
    std::vector<long (*)(long)> flut356;
    auto lut356idx0 = [](long I) -> long {
        /* GATE 273 (LUT2 _1648_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut356.push_back(ctx.genrate_lut(lut356idx0));
    flut356.push_back(lut356idx0);
    auto fvec356 = [flut356](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut356[i](I));
        return ret;
    };

    std::cerr << "\rLUT356   ";
    long gin356_clear = 1 * gout318_clear[0] + 2 * gout353_clear[0];
    std::vector<long> gout356_clear = fvec356(gin356_clear);

    std::vector<RotationPoly> lut357;
    std::vector<long (*)(long)> flut357;
    auto lut357idx0 = [](long I) -> long {
        /* GATE 459 (LUT3 _1834_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut357.push_back(ctx.genrate_lut(lut357idx0));
    flut357.push_back(lut357idx0);
    auto fvec357 = [flut357](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut357[i](I));
        return ret;
    };

    std::cerr << "\rLUT357   ";
    long gin357_clear = 1 * gout218_clear[1] + 2 * gout341_clear[1] + 4 * gout228_clear[0];
    std::vector<long> gout357_clear = fvec357(gin357_clear);

    std::vector<RotationPoly> lut358;
    std::vector<long (*)(long)> flut358;
    auto lut358idx0 = [](long I) -> long {
        /* GATE 458 (LUT2 _1833_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut358.push_back(ctx.genrate_lut(lut358idx0));
    flut358.push_back(lut358idx0);
    auto fvec358 = [flut358](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut358[i](I));
        return ret;
    };

    std::cerr << "\rLUT358   ";
    long gin358_clear = 1 * gout357_clear[0] + 2 * gout205_clear[0];
    std::vector<long> gout358_clear = fvec358(gin358_clear);

    std::vector<RotationPoly> lut359;
    std::vector<long (*)(long)> flut359;
    auto lut359idx0 = [](long I) -> long {
        /* GATE 463 (LUT2 _1838_ INIT 0xb PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut359.push_back(ctx.genrate_lut(lut359idx0));
    flut359.push_back(lut359idx0);
    auto fvec359 = [flut359](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut359[i](I));
        return ret;
    };

    std::cerr << "\rLUT359   ";
    long gin359_clear = 1 * gout250_clear[0] + 2 * gout343_clear[0];
    std::vector<long> gout359_clear = fvec359(gin359_clear);

    std::vector<RotationPoly> lut360;
    std::vector<long (*)(long)> flut360;
    auto lut360idx0 = [](long I) -> long {
        /* GATE 272 (LUT3 _1647_ INIT 0x90 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut360.push_back(ctx.genrate_lut(lut360idx0));
    flut360.push_back(lut360idx0);
    auto fvec360 = [flut360](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut360[i](I));
        return ret;
    };

    std::cerr << "\rLUT360   ";
    long gin360_clear = 1 * gout356_clear[0] + 2 * gout340_clear[1] + 4 * gout205_clear[0];
    std::vector<long> gout360_clear = fvec360(gin360_clear);

    std::vector<RotationPoly> lut361;
    std::vector<long (*)(long)> flut361;
    auto lut361idx0 = [](long I) -> long {
        /* GATE 319 (LUT3 _1694_ INIT 0xe0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut361.push_back(ctx.genrate_lut(lut361idx0));
    flut361.push_back(lut361idx0);
    auto fvec361 = [flut361](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut361[i](I));
        return ret;
    };

    std::cerr << "\rLUT361   ";
    long gin361_clear = 1 * gout318_clear[0] + 2 * gout353_clear[0] + 4 * gout340_clear[1];
    std::vector<long> gout361_clear = fvec361(gin361_clear);

    std::vector<RotationPoly> lut362;
    std::vector<long (*)(long)> flut362;
    auto lut362idx0 = [](long I) -> long {
        /* GATE 318 (LUT2 _1693_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut362.push_back(ctx.genrate_lut(lut362idx0));
    flut362.push_back(lut362idx0);
    auto fvec362 = [flut362](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut362[i](I));
        return ret;
    };

    std::cerr << "\rLUT362   ";
    long gin362_clear = 1 * gout361_clear[0] + 2 * gout340_clear[0];
    std::vector<long> gout362_clear = fvec362(gin362_clear);

    std::vector<RotationPoly> lut363;
    std::vector<long (*)(long)> flut363;
    auto lut363idx0 = [](long I) -> long {
        /* GATE 189 (LUT3 _1564_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut363.push_back(ctx.genrate_lut(lut363idx0));
    flut363.push_back(lut363idx0);
    auto fvec363 = [flut363](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut363[i](I));
        return ret;
    };

    std::cerr << "\rLUT363   ";
    long gin363_clear = 1 * gout350_clear[0] + 2 * gout311_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout363_clear = fvec363(gin363_clear);

    std::vector<RotationPoly> lut364;
    std::vector<long (*)(long)> flut364;
    auto lut364idx0 = [](long I) -> long {
        /* GATE 365 (LUT3 _1740_ INIT 0xe0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut364.push_back(ctx.genrate_lut(lut364idx0));
    flut364.push_back(lut364idx0);
    auto fvec364 = [flut364](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut364[i](I));
        return ret;
    };

    std::cerr << "\rLUT364   ";
    long gin364_clear = 1 * gout361_clear[0] + 2 * gout340_clear[0] + 4 * gout331_clear[1];
    std::vector<long> gout364_clear = fvec364(gin364_clear);

    std::vector<RotationPoly> lut365;
    std::vector<long (*)(long)> flut365;
    auto lut365idx0 = [](long I) -> long {
        /* GATE 364 (LUT2 _1739_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut365.push_back(ctx.genrate_lut(lut365idx0));
    flut365.push_back(lut365idx0);
    auto fvec365 = [flut365](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut365[i](I));
        return ret;
    };

    std::cerr << "\rLUT365   ";
    long gin365_clear = 1 * gout331_clear[0] + 2 * gout364_clear[0];
    std::vector<long> gout365_clear = fvec365(gin365_clear);

    std::vector<RotationPoly> lut366;
    std::vector<long (*)(long)> flut366;
    auto lut366idx0 = [](long I) -> long {
        /* GATE 229 (LUT3 _1604_ INIT 0x90 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut366.push_back(ctx.genrate_lut(lut366idx0));
    flut366.push_back(lut366idx0);
    auto fvec366 = [flut366](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut366[i](I));
        return ret;
    };

    std::cerr << "\rLUT366   ";
    long gin366_clear = 1 * gout353_clear[1] + 2 * gout318_clear[1] + 4 * gout205_clear[0];
    std::vector<long> gout366_clear = fvec366(gin366_clear);

    std::vector<RotationPoly> lut367;
    std::vector<long (*)(long)> flut367;
    auto lut367idx0 = [](long I) -> long {
        /* GATE 363 (LUT3 _1738_ INIT 0x90 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut367.push_back(ctx.genrate_lut(lut367idx0));
    flut367.push_back(lut367idx0);
    auto fvec367 = [flut367](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut367[i](I));
        return ret;
    };

    std::cerr << "\rLUT367   ";
    long gin367_clear = 1 * gout365_clear[0] + 2 * gout333_clear[0] + 4 * gout205_clear[0];
    std::vector<long> gout367_clear = fvec367(gin367_clear);

    std::vector<RotationPoly> lut368;
    std::vector<long (*)(long)> flut368;
    auto lut368idx0 = [](long I) -> long {
        /* GATE 228 (LUT3 _1603_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut368.push_back(ctx.genrate_lut(lut368idx0));
    flut368.push_back(lut368idx0);
    auto fvec368 = [flut368](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut368[i](I));
        return ret;
    };

    std::cerr << "\rLUT368   ";
    long gin368_clear = 1 * gout366_clear[0] + 2 * gout320_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout368_clear = fvec368(gin368_clear);

    std::vector<RotationPoly> lut369;
    std::vector<long (*)(long)> flut369;
    auto lut369idx0 = [](long I) -> long {
        /* GATE 412 (LUT3 _1787_ INIT 0xe0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut369.push_back(ctx.genrate_lut(lut369idx0));
    flut369.push_back(lut369idx0);
    auto fvec369 = [flut369](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut369[i](I));
        return ret;
    };

    std::cerr << "\rLUT369   ";
    long gin369_clear = 1 * gout331_clear[0] + 2 * gout364_clear[0] + 4 * gout333_clear[0];
    std::vector<long> gout369_clear = fvec369(gin369_clear);

    std::vector<RotationPoly> lut370;
    std::vector<long (*)(long)> flut370;
    auto lut370idx0 = [](long I) -> long {
        /* GATE 271 (LUT3 _1646_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut370.push_back(ctx.genrate_lut(lut370idx0));
    flut370.push_back(lut370idx0);
    auto fvec370 = [flut370](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut370[i](I));
        return ret;
    };

    std::cerr << "\rLUT370   ";
    long gin370_clear = 1 * gout360_clear[0] + 2 * gout347_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout370_clear = fvec370(gin370_clear);

    std::vector<RotationPoly> lut371;
    std::vector<long (*)(long)> flut371;
    auto lut371idx0 = [](long I) -> long {
        /* GATE 411 (LUT3 _1786_ INIT 0x7 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut371.push_back(ctx.genrate_lut(lut371idx0));
    flut371.push_back(lut371idx0);
    auto fvec371 = [flut371](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut371[i](I));
        return ret;
    };

    std::cerr << "\rLUT371   ";
    long gin371_clear = 1 * gout327_clear[0] + 2 * gout329_clear[0] + 4 * gout369_clear[0];
    std::vector<long> gout371_clear = fvec371(gin371_clear);

    std::vector<RotationPoly> lut372;
    std::vector<long (*)(long)> flut372;
    auto lut372idx0 = [](long I) -> long {
        /* GATE 317 (LUT3 _1692_ INIT 0x90 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut372.push_back(ctx.genrate_lut(lut372idx0));
    flut372.push_back(lut372idx0);
    auto fvec372 = [flut372](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut372[i](I));
        return ret;
    };

    std::cerr << "\rLUT372   ";
    long gin372_clear = 1 * gout362_clear[0] + 2 * gout331_clear[1] + 4 * gout205_clear[0];
    std::vector<long> gout372_clear = fvec372(gin372_clear);

    std::vector<RotationPoly> lut373;
    std::vector<long (*)(long)> flut373;
    auto lut373idx0 = [](long I) -> long {
        /* GATE 316 (LUT3 _1691_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut373.push_back(ctx.genrate_lut(lut373idx0));
    flut373.push_back(lut373idx0);
    auto fvec373 = [flut373](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut373[i](I));
        return ret;
    };

    std::cerr << "\rLUT373   ";
    long gin373_clear = 1 * gout372_clear[0] + 2 * gout336_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout373_clear = fvec373(gin373_clear);

    std::vector<RotationPoly> lut374;
    std::vector<long (*)(long)> flut374;
    auto lut374idx0 = [](long I) -> long {
        /* GATE 362 (LUT3 _1737_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut374.push_back(ctx.genrate_lut(lut374idx0));
    flut374.push_back(lut374idx0);
    auto fvec374 = [flut374](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut374[i](I));
        return ret;
    };

    std::cerr << "\rLUT374   ";
    long gin374_clear = 1 * gout367_clear[0] + 2 * gout352_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout374_clear = fvec374(gin374_clear);

    std::vector<RotationPoly> lut375;
    std::vector<long (*)(long)> flut375;
    auto lut375idx0 = [](long I) -> long {
        /* GATE 410 (LUT3 _1785_ INIT 0x90 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut375.push_back(ctx.genrate_lut(lut375idx0));
    flut375.push_back(lut375idx0);
    auto fvec375 = [flut375](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut375[i](I));
        return ret;
    };

    std::cerr << "\rLUT375   ";
    long gin375_clear = 1 * gout371_clear[0] + 2 * gout337_clear[0] + 4 * gout205_clear[0];
    std::vector<long> gout375_clear = fvec375(gin375_clear);

    std::vector<RotationPoly> lut376;
    std::vector<long (*)(long)> flut376;
    auto lut376idx0 = [](long I) -> long {
        /* GATE 409 (LUT3 _1784_ INIT 0xfe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut376.push_back(ctx.genrate_lut(lut376idx0));
    flut376.push_back(lut376idx0);
    auto fvec376 = [flut376](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut376[i](I));
        return ret;
    };

    std::cerr << "\rLUT376   ";
    long gin376_clear = 1 * gout375_clear[0] + 2 * gout358_clear[0] + 4 * gout250_clear[0];
    std::vector<long> gout376_clear = fvec376(gin376_clear);

    std::cerr << "\r          \r";
    std::vector<long> out;
    out.push_back(gout278_clear[0]); /* out0 */
    out.push_back(gout282_clear[0]); /* out1 */
    out.push_back(gout279_clear[0]); /* out2 */
    out.push_back(gout283_clear[0]); /* out3 */
    out.push_back(gout290_clear[0]); /* out4 */
    out.push_back(gout314_clear[0]); /* out5 */
    out.push_back(gout326_clear[0]); /* out6 */
    out.push_back(gout359_clear[0]); /* out7 */
    out.push_back(gout354_clear[0]); /* out8 */
    out.push_back(gout355_clear[0]); /* out9 */
    out.push_back(gout363_clear[0]); /* out10 */
    out.push_back(gout368_clear[0]); /* out11 */
    out.push_back(gout370_clear[0]); /* out12 */
    out.push_back(gout373_clear[0]); /* out13 */
    out.push_back(gout374_clear[0]); /* out14 */
    out.push_back(gout376_clear[0]); /* out15 */
    return out;
}

std::vector<long>
test_sqrt_lut3fa(FHEContext& ctx, uint16_t num)
{
    long ct_num0_clear = (num >> 0) & 1;
    long ct_num1_clear = (num >> 1) & 1;
    long ct_num2_clear = (num >> 2) & 1;
    long ct_num3_clear = (num >> 3) & 1;
    long ct_num4_clear = (num >> 4) & 1;
    long ct_num5_clear = (num >> 5) & 1;
    long ct_num6_clear = (num >> 6) & 1;
    long ct_num7_clear = (num >> 7) & 1;
    long ct_num8_clear = (num >> 8) & 1;
    long ct_num9_clear = (num >> 9) & 1;
    long ct_num10_clear = (num >> 10) & 1;
    long ct_num11_clear = (num >> 11) & 1;
    long ct_num12_clear = (num >> 12) & 1;
    long ct_num13_clear = (num >> 13) & 1;
    long ct_num14_clear = (num >> 14) & 1;
    long ct_num15_clear = (num >> 15) & 1;

    std::vector<RotationPoly> decomp;
    std::vector<long (*)(long)> fdecomp;
    auto decomp0 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp0));
    fdecomp.push_back(decomp0);
    auto decomp1 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp1));
    fdecomp.push_back(decomp1);
    auto decomp2 = [](long I) -> long {
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    decomp.push_back(ctx.genrate_lut(decomp2));
    fdecomp.push_back(decomp2);
    auto vdecomp = [fdecomp](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 3; ++i)
            ret.push_back(fdecomp[i](I));
        return ret;
    };

    std::cerr << "\rINV0   ";
    std::vector<long> gout0_clear;
    gout0_clear.push_back(1);

    std::cerr << "\rINV1   ";
    std::vector<long> gout1_clear;
    gout1_clear.push_back(1);

    std::vector<RotationPoly> lut2;
    std::vector<long (*)(long)> flut2;
    auto lut2idx0 = [](long I) -> long {
        /* GATE 117 (LUT3 _535_ INIT 0x1 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut2.push_back(ctx.genrate_lut(lut2idx0));
    flut2.push_back(lut2idx0);
    auto fvec2 = [flut2](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut2[i](I));
        return ret;
    };

    std::cerr << "\rLUT2   ";
    long gin2_clear = 1 * ct_num2_clear + 2 * ct_num1_clear + 4 * ct_num0_clear;
    std::vector<long> gout2_clear = fvec2(gin2_clear);

    std::cerr << "\rINV3   ";
    std::vector<long> gout3_clear;
    gout3_clear.push_back(1);

    std::cerr << "\rINV4   ";
    std::vector<long> gout4_clear;
    gout4_clear.push_back(1);

    std::cerr << "\rINV5   ";
    std::vector<long> gout5_clear;
    gout5_clear.push_back(0);

    std::cerr << "\rINV6   ";
    std::vector<long> gout6_clear;
    gout6_clear.push_back(1);

    std::cerr << "\rINV7   ";
    std::vector<long> gout7_clear;
    gout7_clear.push_back(1);

    std::cerr << "\rINV8   ";
    std::vector<long> gout8_clear;
    gout8_clear.push_back(1);

    std::cerr << "\rINV9   ";
    std::vector<long> gout9_clear;
    gout9_clear.push_back(1);

    std::cerr << "\rINV10   ";
    std::vector<long> gout10_clear;
    gout10_clear.push_back(0);

    std::cerr << "\rINV11   ";
    std::vector<long> gout11_clear;
    gout11_clear.push_back(0);

    std::cerr << "\rINV12   ";
    std::vector<long> gout12_clear;
    gout12_clear.push_back(1);

    std::cerr << "\rINV13   ";
    std::vector<long> gout13_clear;
    gout13_clear.push_back(1);

    std::cerr << "\rINV14   ";
    std::vector<long> gout14_clear;
    gout14_clear.push_back(0);

    std::cerr << "\rINV15   ";
    std::vector<long> gout15_clear;
    gout15_clear.push_back(1);

    std::cerr << "\rINV16   ";
    std::vector<long> gout16_clear;
    gout16_clear.push_back(1);

    std::cerr << "\rINV17   ";
    std::vector<long> gout17_clear;
    gout17_clear.push_back(1);

    std::cerr << "\rINV18   ";
    std::vector<long> gout18_clear;
    gout18_clear.push_back(0);

    std::cerr << "\rFA19    ";
    long gin19_clear = 1 + 1 * ct_num8_clear + 2 * ct_num9_clear + 1 * gout14_clear[0] + 2 * gout9_clear[0];
    std::vector<long> gout19_clear = vdecomp(gin19_clear);

    std::vector<RotationPoly> lut20;
    std::vector<long (*)(long)> flut20;
    auto lut20idx0 = [](long I) -> long {
        /* GATE 55 (LUT2 _473_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut20.push_back(ctx.genrate_lut(lut20idx0));
    flut20.push_back(lut20idx0);
    auto fvec20 = [flut20](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut20[i](I));
        return ret;
    };

    std::cerr << "\rLUT20   ";
    long gin20_clear = 1 * ct_num7_clear + 2 * ct_num6_clear;
    std::vector<long> gout20_clear = fvec20(gin20_clear);

    std::vector<RotationPoly> lut21;
    std::vector<long (*)(long)> flut21;
    auto lut21idx0 = [](long I) -> long {
        /* GATE 77 (LUT2 _495_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut21.push_back(ctx.genrate_lut(lut21idx0));
    flut21.push_back(lut21idx0);
    auto fvec21 = [flut21](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut21[i](I));
        return ret;
    };

    std::cerr << "\rLUT21   ";
    long gin21_clear = 1 * ct_num5_clear + 2 * ct_num4_clear;
    std::vector<long> gout21_clear = fvec21(gin21_clear);

    std::vector<RotationPoly> lut22;
    std::vector<long (*)(long)> flut22;
    auto lut22idx0 = [](long I) -> long {
        /* GATE 106 (LUT2 _524_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut22.push_back(ctx.genrate_lut(lut22idx0));
    flut22.push_back(lut22idx0);
    auto fvec22 = [flut22](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut22[i](I));
        return ret;
    };

    std::cerr << "\rLUT22   ";
    long gin22_clear = 1 * ct_num3_clear + 2 * ct_num2_clear;
    std::vector<long> gout22_clear = fvec22(gin22_clear);

    std::cerr << "\rINV23   ";
    std::vector<long> gout23_clear;
    gout23_clear.push_back(1);

    std::cerr << "\rINV24   ";
    std::vector<long> gout24_clear;
    gout24_clear.push_back(1);

    std::cerr << "\rINV25   ";
    std::vector<long> gout25_clear;
    gout25_clear.push_back(0);

    std::cerr << "\rINV26   ";
    std::vector<long> gout26_clear;
    gout26_clear.push_back(1);

    std::cerr << "\rINV27   ";
    std::vector<long> gout27_clear;
    gout27_clear.push_back(1);

    std::cerr << "\rINV28   ";
    std::vector<long> gout28_clear;
    gout28_clear.push_back(1);

    std::cerr << "\rINV29   ";
    std::vector<long> gout29_clear;
    gout29_clear.push_back(1);

    std::cerr << "\rINV30   ";
    std::vector<long> gout30_clear;
    gout30_clear.push_back(1);

    std::cerr << "\rINV31   ";
    std::vector<long> gout31_clear;
    gout31_clear.push_back(1);

    std::cerr << "\rINV32   ";
    std::vector<long> gout32_clear;
    gout32_clear.push_back(1);

    std::cerr << "\rFA33    ";
    long gin33_clear = 1 + 1 * ct_num6_clear + 2 * ct_num7_clear + 1 * gout5_clear[0] + 2 * gout0_clear[0];
    std::vector<long> gout33_clear = vdecomp(gin33_clear);

    std::cerr << "\rINV34   ";
    std::vector<long> gout34_clear;
    gout34_clear.push_back(1);

    std::vector<RotationPoly> lut35;
    std::vector<long (*)(long)> flut35;
    auto lut35idx0 = [](long I) -> long {
        /* GATE 34 (LUT2 _452_ INIT 0x1 PERM 10) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut35.push_back(ctx.genrate_lut(lut35idx0));
    flut35.push_back(lut35idx0);
    auto fvec35 = [flut35](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut35[i](I));
        return ret;
    };

    std::cerr << "\rLUT35   ";
    long gin35_clear = 1 * ct_num9_clear + 2 * ct_num8_clear;
    std::vector<long> gout35_clear = fvec35(gin35_clear);

    std::cerr << "\rINV36   ";
    std::vector<long> gout36_clear;
    gout36_clear.push_back(1);

    std::cerr << "\rINV37   ";
    std::vector<long> gout37_clear;
    gout37_clear.push_back(1);

    std::vector<RotationPoly> lut38;
    std::vector<long (*)(long)> flut38;
    auto lut38idx0 = [](long I) -> long {
        /* GATE 4 (LUT3 _422_ INIT 0xe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut38.push_back(ctx.genrate_lut(lut38idx0));
    flut38.push_back(lut38idx0);
    auto fvec38 = [flut38](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut38[i](I));
        return ret;
    };

    std::cerr << "\rLUT38   ";
    long gin38_clear = 1 * ct_num13_clear + 2 * ct_num12_clear + 4 * ct_num14_clear;
    std::vector<long> gout38_clear = fvec38(gin38_clear);

    std::cerr << "\rINV39   ";
    std::vector<long> gout39_clear;
    gout39_clear.push_back(1);

    std::cerr << "\rINV40   ";
    std::vector<long> gout40_clear;
    gout40_clear.push_back(1);

    std::vector<RotationPoly> lut41;
    std::vector<long (*)(long)> flut41;
    auto lut41idx0 = [](long I) -> long {
        /* GATE 2 (LUT2 _420_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut41.push_back(ctx.genrate_lut(lut41idx0));
    flut41.push_back(lut41idx0);
    auto lut41idx1 = [](long I) -> long {
        /* GATE 1 (LUT2 _419_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut41.push_back(ctx.genrate_lut(lut41idx1));
    flut41.push_back(lut41idx1);
    auto fvec41 = [flut41](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut41[i](I));
        return ret;
    };

    std::cerr << "\rLUT41   ";
    long gin41_clear = 1 * ct_num14_clear + 2 * ct_num15_clear;
    std::vector<long> gout41_clear = fvec41(gin41_clear);

    std::cerr << "\rFA42    ";
    long gin42_clear = 1 + 1 * ct_num10_clear + 2 * ct_num11_clear + 1 * gout25_clear[0] + 2 * gout23_clear[0];
    std::vector<long> gout42_clear = vdecomp(gin42_clear);

    std::vector<RotationPoly> lut43;
    std::vector<long (*)(long)> flut43;
    auto lut43idx0 = [](long I) -> long {
        /* GATE 8 (LUT3 _426_ INIT 0xb0 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut43.push_back(ctx.genrate_lut(lut43idx0));
    flut43.push_back(lut43idx0);
    auto fvec43 = [flut43](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut43[i](I));
        return ret;
    };

    std::cerr << "\rLUT43   ";
    long gin43_clear = 1 * ct_num13_clear + 2 * gout38_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout43_clear = fvec43(gin43_clear);

    std::vector<RotationPoly> lut44;
    std::vector<long (*)(long)> flut44;
    auto lut44idx0 = [](long I) -> long {
        /* GATE 17 (LUT3 _435_ INIT 0xb0 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut44.push_back(ctx.genrate_lut(lut44idx0));
    flut44.push_back(lut44idx0);
    auto fvec44 = [flut44](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut44[i](I));
        return ret;
    };

    std::cerr << "\rLUT44   ";
    long gin44_clear = 1 * gout38_clear[0] + 2 * ct_num12_clear + 4 * ct_num15_clear;
    std::vector<long> gout44_clear = fvec44(gin44_clear);

    std::cerr << "\rINV45   ";
    std::vector<long> gout45_clear;
    gout45_clear.push_back(1 - gout41_clear[1]);

    std::cerr << "\rFA46    ";
    long gin46_clear = 1 + 1 * ct_num4_clear + 2 * ct_num5_clear + 1 * gout18_clear[0] + 2 * gout37_clear[0];
    std::vector<long> gout46_clear = vdecomp(gin46_clear);

    std::cerr << "\rFA47    ";
    long gin47_clear = 1 + 1 * ct_num12_clear + 2 * ct_num13_clear + 1 * gout10_clear[0] + 2 * gout32_clear[0];
    std::vector<long> gout47_clear = vdecomp(gin47_clear);

    std::cerr << "\rINV48   ";
    std::vector<long> gout48_clear;
    gout48_clear.push_back(1 - gout41_clear[1]);

    std::cerr << "\rFA49    ";
    long gin49_clear = 1 + 1 * ct_num2_clear + 2 * ct_num3_clear + 1 * gout11_clear[0] + 2 * gout31_clear[0];
    std::vector<long> gout49_clear = vdecomp(gin49_clear);

    std::vector<RotationPoly> lut50;
    std::vector<long (*)(long)> flut50;
    auto lut50idx0 = [](long I) -> long {
        /* GATE 3 (LUT2 _421_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut50.push_back(ctx.genrate_lut(lut50idx0));
    flut50.push_back(lut50idx0);
    auto fvec50 = [flut50](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut50[i](I));
        return ret;
    };

    std::cerr << "\rLUT50   ";
    long gin50_clear = 1 * gout38_clear[0] + 2 * ct_num15_clear;
    std::vector<long> gout50_clear = fvec50(gin50_clear);

    std::vector<RotationPoly> lut51;
    std::vector<long (*)(long)> flut51;
    auto lut51idx0 = [](long I) -> long {
        /* GATE 15 (LUT3 _433_ INIT 0x10 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut51.push_back(ctx.genrate_lut(lut51idx0));
    flut51.push_back(lut51idx0);
    auto fvec51 = [flut51](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut51[i](I));
        return ret;
    };

    std::cerr << "\rLUT51   ";
    long gin51_clear = 1 * gout38_clear[0] + 2 * gout47_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout51_clear = fvec51(gin51_clear);

    std::cerr << "\rINV52   ";
    std::vector<long> gout52_clear;
    gout52_clear.push_back(1 - gout41_clear[1]);

    std::cerr << "\rINV53   ";
    std::vector<long> gout53_clear;
    gout53_clear.push_back(1 - gout50_clear[0]);

    std::cerr << "\rINV54   ";
    std::vector<long> gout54_clear;
    gout54_clear.push_back(1 - gout41_clear[1]);

    std::cerr << "\rINV55   ";
    std::vector<long> gout55_clear;
    gout55_clear.push_back(1 - gout41_clear[1]);

    std::cerr << "\rINV56   ";
    std::vector<long> gout56_clear;
    gout56_clear.push_back(1 - gout50_clear[0]);

    std::cerr << "\rFA57    ";
    long gin57_clear = gout47_clear[2] + 1 * gout41_clear[0] + 2 * ct_num15_clear + 1 * gout55_clear[0] + 2 * gout28_clear[0];
    std::vector<long> gout57_clear = vdecomp(gin57_clear);

    std::cerr << "\rINV58   ";
    std::vector<long> gout58_clear;
    gout58_clear.push_back(1 - gout50_clear[0]);

    std::vector<RotationPoly> lut59;
    std::vector<long (*)(long)> flut59;
    auto lut59idx0 = [](long I) -> long {
        /* GATE 7 (LUT3 _425_ INIT 0x40 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut59.push_back(ctx.genrate_lut(lut59idx0));
    flut59.push_back(lut59idx0);
    auto fvec59 = [flut59](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut59[i](I));
        return ret;
    };

    std::cerr << "\rLUT59   ";
    long gin59_clear = 1 * gout47_clear[1] + 2 * gout38_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout59_clear = fvec59(gin59_clear);

    std::vector<RotationPoly> lut60;
    std::vector<long (*)(long)> flut60;
    auto lut60idx0 = [](long I) -> long {
        /* GATE 14 (LUT3 _432_ INIT 0xe PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut60.push_back(ctx.genrate_lut(lut60idx0));
    flut60.push_back(lut60idx0);
    auto fvec60 = [flut60](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut60[i](I));
        return ret;
    };

    std::cerr << "\rLUT60   ";
    long gin60_clear = 1 * gout51_clear[0] + 2 * ct_num11_clear + 4 * ct_num10_clear;
    std::vector<long> gout60_clear = fvec60(gin60_clear);

    std::cerr << "\rINV61   ";
    std::vector<long> gout61_clear;
    gout61_clear.push_back(1 - gout41_clear[1]);

    std::cerr << "\rINV62   ";
    std::vector<long> gout62_clear;
    gout62_clear.push_back(1 - gout50_clear[0]);

    std::vector<RotationPoly> lut63;
    std::vector<long (*)(long)> flut63;
    auto lut63idx0 = [](long I) -> long {
        /* GATE 11 (LUT3 _429_ INIT 0xf8 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut63.push_back(ctx.genrate_lut(lut63idx0));
    flut63.push_back(lut63idx0);
    auto fvec63 = [flut63](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut63[i](I));
        return ret;
    };

    std::cerr << "\rLUT63   ";
    long gin63_clear = 1 * gout57_clear[1] + 2 * gout38_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout63_clear = fvec63(gin63_clear);

    std::vector<RotationPoly> lut64;
    std::vector<long (*)(long)> flut64;
    auto lut64idx0 = [](long I) -> long {
        /* GATE 6 (LUT2 _424_ INIT 0xe PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut64.push_back(ctx.genrate_lut(lut64idx0));
    flut64.push_back(lut64idx0);
    auto fvec64 = [flut64](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut64[i](I));
        return ret;
    };

    std::cerr << "\rLUT64   ";
    long gin64_clear = 1 * gout43_clear[0] + 2 * gout59_clear[0];
    std::vector<long> gout64_clear = fvec64(gin64_clear);

    std::vector<RotationPoly> lut65;
    std::vector<long (*)(long)> flut65;
    auto lut65idx0 = [](long I) -> long {
        /* GATE 5 (LUT3 _423_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut65.push_back(ctx.genrate_lut(lut65idx0));
    flut65.push_back(lut65idx0);
    auto fvec65 = [flut65](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut65[i](I));
        return ret;
    };

    std::cerr << "\rLUT65   ";
    long gin65_clear = 1 * ct_num12_clear + 2 * gout47_clear[0] + 4 * gout50_clear[0];
    std::vector<long> gout65_clear = fvec65(gin65_clear);

    std::vector<RotationPoly> lut66;
    std::vector<long (*)(long)> flut66;
    auto lut66idx0 = [](long I) -> long {
        /* GATE 18 (LUT3 _436_ INIT 0xb PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut66.push_back(ctx.genrate_lut(lut66idx0));
    flut66.push_back(lut66idx0);
    auto fvec66 = [flut66](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut66[i](I));
        return ret;
    };

    std::cerr << "\rLUT66   ";
    long gin66_clear = 1 * ct_num13_clear + 2 * ct_num14_clear + 4 * gout63_clear[0];
    std::vector<long> gout66_clear = fvec66(gin66_clear);

    std::vector<RotationPoly> lut67;
    std::vector<long (*)(long)> flut67;
    auto lut67idx0 = [](long I) -> long {
        /* GATE 116 (LUT3 _534_ INIT 0xe0 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut67.push_back(ctx.genrate_lut(lut67idx0));
    flut67.push_back(lut67idx0);
    auto fvec67 = [flut67](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut67[i](I));
        return ret;
    };

    std::cerr << "\rLUT67   ";
    long gin67_clear = 1 * gout49_clear[0] + 2 * ct_num1_clear + 4 * ct_num0_clear;
    std::vector<long> gout67_clear = fvec67(gin67_clear);

    std::cerr << "\rINV68   ";
    std::vector<long> gout68_clear;
    gout68_clear.push_back(1 - gout50_clear[0]);

    std::vector<RotationPoly> lut69;
    std::vector<long (*)(long)> flut69;
    auto lut69idx0 = [](long I) -> long {
        /* GATE 10 (LUT3 _428_ INIT 0x40 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut69.push_back(ctx.genrate_lut(lut69idx0));
    flut69.push_back(lut69idx0);
    auto fvec69 = [flut69](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut69[i](I));
        return ret;
    };

    std::cerr << "\rLUT69   ";
    long gin69_clear = 1 * gout57_clear[0] + 2 * gout38_clear[0] + 4 * ct_num15_clear;
    std::vector<long> gout69_clear = fvec69(gin69_clear);

    std::cerr << "\rFA70    ";
    long gin70_clear = gout42_clear[2] + 1 * gout65_clear[0] + 2 * gout64_clear[0] + 1 * gout62_clear[0] + 2 * gout61_clear[0];
    std::vector<long> gout70_clear = vdecomp(gin70_clear);

    std::vector<RotationPoly> lut71;
    std::vector<long (*)(long)> flut71;
    auto lut71idx0 = [](long I) -> long {
        /* GATE 9 (LUT2 _427_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut71.push_back(ctx.genrate_lut(lut71idx0));
    flut71.push_back(lut71idx0);
    auto fvec71 = [flut71](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut71[i](I));
        return ret;
    };

    std::cerr << "\rLUT71   ";
    long gin71_clear = 1 * gout69_clear[0] + 2 * gout41_clear[0];
    std::vector<long> gout71_clear = fvec71(gin71_clear);

    std::cerr << "\rFA72    ";
    long gin72_clear = gout70_clear[2] + 1 * gout71_clear[0] + 2 * gout63_clear[0] + 1 * gout39_clear[0] + 2 * gout36_clear[0];
    std::vector<long> gout72_clear = vdecomp(gin72_clear);

    std::vector<RotationPoly> lut73;
    std::vector<long (*)(long)> flut73;
    auto lut73idx0 = [](long I) -> long {
        /* GATE 16 (LUT2 _434_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut73.push_back(ctx.genrate_lut(lut73idx0));
    flut73.push_back(lut73idx0);
    auto fvec73 = [flut73](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut73[i](I));
        return ret;
    };

    std::cerr << "\rLUT73   ";
    long gin73_clear = 1 * gout44_clear[0] + 2 * gout69_clear[0];
    std::vector<long> gout73_clear = fvec73(gin73_clear);

    std::vector<RotationPoly> lut74;
    std::vector<long (*)(long)> flut74;
    auto lut74idx0 = [](long I) -> long {
        /* GATE 13 (LUT3 _431_ INIT 0x10 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut74.push_back(ctx.genrate_lut(lut74idx0));
    flut74.push_back(lut74idx0);
    auto fvec74 = [flut74](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut74[i](I));
        return ret;
    };

    std::cerr << "\rLUT74   ";
    long gin74_clear = 1 * gout60_clear[0] + 2 * gout59_clear[0] + 4 * gout73_clear[0];
    std::vector<long> gout74_clear = fvec74(gin74_clear);

    std::vector<RotationPoly> lut75;
    std::vector<long (*)(long)> flut75;
    auto lut75idx0 = [](long I) -> long {
        /* GATE 33 (LUT3 _451_ INIT 0xd0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut75.push_back(ctx.genrate_lut(lut75idx0));
    flut75.push_back(lut75idx0);
    auto fvec75 = [flut75](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut75[i](I));
        return ret;
    };

    std::cerr << "\rLUT75   ";
    long gin75_clear = 1 * gout74_clear[0] + 2 * gout66_clear[0] + 4 * ct_num10_clear;
    std::vector<long> gout75_clear = fvec75(gin75_clear);

    std::vector<RotationPoly> lut76;
    std::vector<long (*)(long)> flut76;
    auto lut76idx0 = [](long I) -> long {
        /* GATE 32 (LUT3 _450_ INIT 0x10 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut76.push_back(ctx.genrate_lut(lut76idx0));
    flut76.push_back(lut76idx0);
    auto fvec76 = [flut76](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut76[i](I));
        return ret;
    };

    std::cerr << "\rLUT76   ";
    long gin76_clear = 1 * gout74_clear[0] + 2 * gout66_clear[0] + 4 * gout42_clear[0];
    std::vector<long> gout76_clear = fvec76(gin76_clear);

    std::vector<RotationPoly> lut77;
    std::vector<long (*)(long)> flut77;
    auto lut77idx0 = [](long I) -> long {
        /* GATE 22 (LUT3 _440_ INIT 0x40 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut77.push_back(ctx.genrate_lut(lut77idx0));
    flut77.push_back(lut77idx0);
    auto fvec77 = [flut77](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut77[i](I));
        return ret;
    };

    std::cerr << "\rLUT77   ";
    long gin77_clear = 1 * gout70_clear[0] + 2 * gout74_clear[0] + 4 * gout66_clear[0];
    std::vector<long> gout77_clear = fvec77(gin77_clear);

    std::vector<RotationPoly> lut78;
    std::vector<long (*)(long)> flut78;
    auto lut78idx0 = [](long I) -> long {
        /* GATE 31 (LUT3 _449_ INIT 0xd PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut78.push_back(ctx.genrate_lut(lut78idx0));
    flut78.push_back(lut78idx0);
    auto fvec78 = [flut78](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut78[i](I));
        return ret;
    };

    std::cerr << "\rLUT78   ";
    long gin78_clear = 1 * gout35_clear[0] + 2 * gout75_clear[0] + 4 * gout76_clear[0];
    std::vector<long> gout78_clear = fvec78(gin78_clear);

    std::vector<RotationPoly> lut79;
    std::vector<long (*)(long)> flut79;
    auto lut79idx0 = [](long I) -> long {
        /* GATE 23 (LUT3 _441_ INIT 0xd0 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut79.push_back(ctx.genrate_lut(lut79idx0));
    flut79.push_back(lut79idx0);
    auto lut79idx1 = [](long I) -> long {
        /* GATE 12 (LUT2 _430_ INIT 0x4 PERM 12) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut79.push_back(ctx.genrate_lut(lut79idx1));
    flut79.push_back(lut79idx1);
    auto fvec79 = [flut79](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut79[i](I));
        return ret;
    };

    std::cerr << "\rLUT79   ";
    long gin79_clear = 1 * gout65_clear[0] + 2 * gout74_clear[0] + 4 * gout66_clear[0];
    std::vector<long> gout79_clear = fvec79(gin79_clear);

    std::vector<RotationPoly> lut80;
    std::vector<long (*)(long)> flut80;
    auto lut80idx0 = [](long I) -> long {
        /* GATE 20 (LUT3 _438_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut80.push_back(ctx.genrate_lut(lut80idx0));
    flut80.push_back(lut80idx0);
    auto fvec80 = [flut80](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut80[i](I));
        return ret;
    };

    std::cerr << "\rLUT80   ";
    long gin80_clear = 1 * ct_num11_clear + 2 * gout42_clear[1] + 4 * gout79_clear[1];
    std::vector<long> gout80_clear = fvec80(gin80_clear);

    std::vector<RotationPoly> lut81;
    std::vector<long (*)(long)> flut81;
    auto lut81idx0 = [](long I) -> long {
        /* GATE 25 (LUT3 _443_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut81.push_back(ctx.genrate_lut(lut81idx0));
    flut81.push_back(lut81idx0);
    auto fvec81 = [flut81](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut81[i](I));
        return ret;
    };

    std::cerr << "\rLUT81   ";
    long gin81_clear = 1 * gout71_clear[0] + 2 * gout72_clear[0] + 4 * gout79_clear[1];
    std::vector<long> gout81_clear = fvec81(gin81_clear);

    std::vector<RotationPoly> lut82;
    std::vector<long (*)(long)> flut82;
    auto lut82idx0 = [](long I) -> long {
        /* GATE 19 (LUT3 _437_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut82.push_back(ctx.genrate_lut(lut82idx0));
    flut82.push_back(lut82idx0);
    auto fvec82 = [flut82](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut82[i](I));
        return ret;
    };

    std::cerr << "\rLUT82   ";
    long gin82_clear = 1 * ct_num10_clear + 2 * gout42_clear[0] + 4 * gout79_clear[1];
    std::vector<long> gout82_clear = fvec82(gin82_clear);

    std::vector<RotationPoly> lut83;
    std::vector<long (*)(long)> flut83;
    auto lut83idx0 = [](long I) -> long {
        /* GATE 36 (LUT3 _454_ INIT 0xe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut83.push_back(ctx.genrate_lut(lut83idx0));
    flut83.push_back(lut83idx0);
    auto fvec83 = [flut83](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut83[i](I));
        return ret;
    };

    std::cerr << "\rLUT83   ";
    long gin83_clear = 1 * gout79_clear[0] + 2 * gout77_clear[0] + 4 * gout41_clear[1];
    std::vector<long> gout83_clear = fvec83(gin83_clear);

    std::cerr << "\rINV84   ";
    std::vector<long> gout84_clear;
    gout84_clear.push_back(1 - gout79_clear[1]);

    std::cerr << "\rINV85   ";
    std::vector<long> gout85_clear;
    gout85_clear.push_back(1 - gout79_clear[1]);

    std::vector<RotationPoly> lut86;
    std::vector<long (*)(long)> flut86;
    auto lut86idx0 = [](long I) -> long {
        /* GATE 30 (LUT3 _448_ INIT 0x71 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut86.push_back(ctx.genrate_lut(lut86idx0));
    flut86.push_back(lut86idx0);
    auto fvec86 = [flut86](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut86[i](I));
        return ret;
    };

    std::cerr << "\rLUT86   ";
    long gin86_clear = 1 * gout78_clear[0] + 2 * gout80_clear[0] + 4 * gout50_clear[0];
    std::vector<long> gout86_clear = fvec86(gin86_clear);

    std::vector<RotationPoly> lut87;
    std::vector<long (*)(long)> flut87;
    auto lut87idx0 = [](long I) -> long {
        /* GATE 21 (LUT2 _439_ INIT 0xe PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut87.push_back(ctx.genrate_lut(lut87idx0));
    flut87.push_back(lut87idx0);
    auto fvec87 = [flut87](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut87[i](I));
        return ret;
    };

    std::cerr << "\rLUT87   ";
    long gin87_clear = 1 * gout79_clear[0] + 2 * gout77_clear[0];
    std::vector<long> gout87_clear = fvec87(gin87_clear);

    std::cerr << "\rINV88   ";
    std::vector<long> gout88_clear;
    gout88_clear.push_back(1 - gout79_clear[1]);

    std::cerr << "\rINV89   ";
    std::vector<long> gout89_clear;
    gout89_clear.push_back(1 - gout79_clear[1]);

    std::vector<RotationPoly> lut90;
    std::vector<long (*)(long)> flut90;
    auto lut90idx0 = [](long I) -> long {
        /* GATE 26 (LUT3 _444_ INIT 0xf8 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut90.push_back(ctx.genrate_lut(lut90idx0));
    flut90.push_back(lut90idx0);
    auto fvec90 = [flut90](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut90[i](I));
        return ret;
    };

    std::cerr << "\rLUT90   ";
    long gin90_clear = 1 * gout72_clear[1] + 2 * gout63_clear[0] + 4 * gout79_clear[1];
    std::vector<long> gout90_clear = fvec90(gin90_clear);

    std::vector<RotationPoly> lut91;
    std::vector<long (*)(long)> flut91;
    auto lut91idx0 = [](long I) -> long {
        /* GATE 24 (LUT3 _442_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut91.push_back(ctx.genrate_lut(lut91idx0));
    flut91.push_back(lut91idx0);
    auto fvec91 = [flut91](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut91[i](I));
        return ret;
    };

    std::cerr << "\rLUT91   ";
    long gin91_clear = 1 * gout64_clear[0] + 2 * gout70_clear[1] + 4 * gout79_clear[1];
    std::vector<long> gout91_clear = fvec91(gin91_clear);

    std::vector<RotationPoly> lut92;
    std::vector<long (*)(long)> flut92;
    auto lut92idx0 = [](long I) -> long {
        /* GATE 29 (LUT2 _447_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut92.push_back(ctx.genrate_lut(lut92idx0));
    flut92.push_back(lut92idx0);
    auto fvec92 = [flut92](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut92[i](I));
        return ret;
    };

    std::cerr << "\rLUT92   ";
    long gin92_clear = 1 * gout87_clear[0] + 2 * gout41_clear[1];
    std::vector<long> gout92_clear = fvec92(gin92_clear);

    std::vector<RotationPoly> lut93;
    std::vector<long (*)(long)> flut93;
    auto lut93idx0 = [](long I) -> long {
        /* GATE 35 (LUT3 _453_ INIT 0x1 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut93.push_back(ctx.genrate_lut(lut93idx0));
    flut93.push_back(lut93idx0);
    auto fvec93 = [flut93](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut93[i](I));
        return ret;
    };

    std::cerr << "\rLUT93   ";
    long gin93_clear = 1 * gout83_clear[0] + 2 * gout91_clear[0] + 4 * gout81_clear[0];
    std::vector<long> gout93_clear = fvec93(gin93_clear);

    std::cerr << "\rFA94    ";
    long gin94_clear = gout19_clear[2] + 1 * gout82_clear[0] + 2 * gout80_clear[0] + 1 * gout88_clear[0] + 2 * gout56_clear[0];
    std::vector<long> gout94_clear = vdecomp(gin94_clear);

    std::vector<RotationPoly> lut95;
    std::vector<long (*)(long)> flut95;
    auto lut95idx0 = [](long I) -> long {
        /* GATE 28 (LUT3 _446_ INIT 0xe0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut95.push_back(ctx.genrate_lut(lut95idx0));
    flut95.push_back(lut95idx0);
    auto fvec95 = [flut95](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut95[i](I));
        return ret;
    };

    std::cerr << "\rLUT95   ";
    long gin95_clear = 1 * gout86_clear[0] + 2 * gout92_clear[0] + 4 * gout93_clear[0];
    std::vector<long> gout95_clear = fvec95(gin95_clear);

    std::vector<RotationPoly> lut96;
    std::vector<long (*)(long)> flut96;
    auto lut96idx0 = [](long I) -> long {
        /* GATE 53 (LUT3 _471_ INIT 0x1 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut96.push_back(ctx.genrate_lut(lut96idx0));
    flut96.push_back(lut96idx0);
    auto fvec96 = [flut96](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut96[i](I));
        return ret;
    };

    std::cerr << "\rLUT96   ";
    long gin96_clear = 1 * gout95_clear[0] + 2 * gout90_clear[0] + 4 * gout19_clear[0];
    std::vector<long> gout96_clear = fvec96(gin96_clear);

    std::vector<RotationPoly> lut97;
    std::vector<long (*)(long)> flut97;
    auto lut97idx0 = [](long I) -> long {
        /* GATE 54 (LUT3 _472_ INIT 0xe0 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut97.push_back(ctx.genrate_lut(lut97idx0));
    flut97.push_back(lut97idx0);
    auto fvec97 = [flut97](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut97[i](I));
        return ret;
    };

    std::cerr << "\rLUT97   ";
    long gin97_clear = 1 * gout95_clear[0] + 2 * gout90_clear[0] + 4 * ct_num8_clear;
    std::vector<long> gout97_clear = fvec97(gin97_clear);

    std::vector<RotationPoly> lut98;
    std::vector<long (*)(long)> flut98;
    auto lut98idx0 = [](long I) -> long {
        /* GATE 44 (LUT3 _462_ INIT 0x10 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut98.push_back(ctx.genrate_lut(lut98idx0));
    flut98.push_back(lut98idx0);
    auto fvec98 = [flut98](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut98[i](I));
        return ret;
    };

    std::cerr << "\rLUT98   ";
    long gin98_clear = 1 * gout94_clear[1] + 2 * gout95_clear[0] + 4 * gout90_clear[0];
    std::vector<long> gout98_clear = fvec98(gin98_clear);

    std::vector<RotationPoly> lut99;
    std::vector<long (*)(long)> flut99;
    auto lut99idx0 = [](long I) -> long {
        /* GATE 52 (LUT3 _470_ INIT 0xe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut99.push_back(ctx.genrate_lut(lut99idx0));
    flut99.push_back(lut99idx0);
    auto fvec99 = [flut99](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut99[i](I));
        return ret;
    };

    std::cerr << "\rLUT99   ";
    long gin99_clear = 1 * gout20_clear[0] + 2 * gout96_clear[0] + 4 * gout97_clear[0];
    std::vector<long> gout99_clear = fvec99(gin99_clear);

    std::vector<RotationPoly> lut100;
    std::vector<long (*)(long)> flut100;
    auto lut100idx0 = [](long I) -> long {
        /* GATE 40 (LUT3 _458_ INIT 0xe0 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut100.push_back(ctx.genrate_lut(lut100idx0));
    flut100.push_back(lut100idx0);
    auto lut100idx1 = [](long I) -> long {
        /* GATE 27 (LUT2 _445_ INIT 0x1 PERM 12) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut100.push_back(ctx.genrate_lut(lut100idx1));
    flut100.push_back(lut100idx1);
    auto fvec100 = [flut100](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut100[i](I));
        return ret;
    };

    std::cerr << "\rLUT100   ";
    long gin100_clear = 1 * ct_num9_clear + 2 * gout95_clear[0] + 4 * gout90_clear[0];
    std::vector<long> gout100_clear = fvec100(gin100_clear);

    std::cerr << "\rINV101   ";
    std::vector<long> gout101_clear;
    gout101_clear.push_back(1 - gout100_clear[1]);

    std::cerr << "\rINV102   ";
    std::vector<long> gout102_clear;
    gout102_clear.push_back(1 - gout100_clear[1]);

    std::vector<RotationPoly> lut103;
    std::vector<long (*)(long)> flut103;
    auto lut103idx0 = [](long I) -> long {
        /* GATE 43 (LUT3 _461_ INIT 0xe0 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut103.push_back(ctx.genrate_lut(lut103idx0));
    flut103.push_back(lut103idx0);
    auto fvec103 = [flut103](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut103[i](I));
        return ret;
    };

    std::cerr << "\rLUT103   ";
    long gin103_clear = 1 * gout80_clear[0] + 2 * gout95_clear[0] + 4 * gout90_clear[0];
    std::vector<long> gout103_clear = fvec103(gin103_clear);

    std::cerr << "\rFA104    ";
    long gin104_clear = gout94_clear[2] + 1 * gout87_clear[0] + 2 * gout91_clear[0] + 1 * gout45_clear[0] + 2 * gout29_clear[0];
    std::vector<long> gout104_clear = vdecomp(gin104_clear);

    std::vector<RotationPoly> lut105;
    std::vector<long (*)(long)> flut105;
    auto lut105idx0 = [](long I) -> long {
        /* GATE 39 (LUT3 _457_ INIT 0x10 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut105.push_back(ctx.genrate_lut(lut105idx0));
    flut105.push_back(lut105idx0);
    auto fvec105 = [flut105](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut105[i](I));
        return ret;
    };

    std::cerr << "\rLUT105   ";
    long gin105_clear = 1 * gout19_clear[1] + 2 * gout95_clear[0] + 4 * gout90_clear[0];
    std::vector<long> gout105_clear = fvec105(gin105_clear);

    std::vector<RotationPoly> lut106;
    std::vector<long (*)(long)> flut106;
    auto lut106idx0 = [](long I) -> long {
        /* GATE 42 (LUT2 _460_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut106.push_back(ctx.genrate_lut(lut106idx0));
    flut106.push_back(lut106idx0);
    auto fvec106 = [flut106](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut106[i](I));
        return ret;
    };

    std::cerr << "\rLUT106   ";
    long gin106_clear = 1 * gout103_clear[0] + 2 * gout98_clear[0];
    std::vector<long> gout106_clear = fvec106(gin106_clear);

    std::vector<RotationPoly> lut107;
    std::vector<long (*)(long)> flut107;
    auto lut107idx0 = [](long I) -> long {
        /* GATE 59 (LUT3 _477_ INIT 0x10 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut107.push_back(ctx.genrate_lut(lut107idx0));
    flut107.push_back(lut107idx0);
    auto fvec107 = [flut107](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut107[i](I));
        return ret;
    };

    std::cerr << "\rLUT107   ";
    long gin107_clear = 1 * gout103_clear[0] + 2 * gout98_clear[0] + 4 * gout41_clear[1];
    std::vector<long> gout107_clear = fvec107(gin107_clear);

    std::cerr << "\rINV108   ";
    std::vector<long> gout108_clear;
    gout108_clear.push_back(1 - gout100_clear[1]);

    std::vector<RotationPoly> lut109;
    std::vector<long (*)(long)> flut109;
    auto lut109idx0 = [](long I) -> long {
        /* GATE 57 (LUT3 _475_ INIT 0xe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut109.push_back(ctx.genrate_lut(lut109idx0));
    flut109.push_back(lut109idx0);
    auto lut109idx1 = [](long I) -> long {
        /* GATE 38 (LUT2 _456_ INIT 0xe PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut109.push_back(ctx.genrate_lut(lut109idx1));
    flut109.push_back(lut109idx1);
    auto fvec109 = [flut109](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut109[i](I));
        return ret;
    };

    std::cerr << "\rLUT109   ";
    long gin109_clear = 1 * gout100_clear[0] + 2 * gout105_clear[0] + 4 * gout79_clear[1];
    std::vector<long> gout109_clear = fvec109(gin109_clear);

    std::vector<RotationPoly> lut110;
    std::vector<long (*)(long)> flut110;
    auto lut110idx0 = [](long I) -> long {
        /* GATE 45 (LUT3 _463_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut110.push_back(ctx.genrate_lut(lut110idx0));
    flut110.push_back(lut110idx0);
    auto fvec110 = [flut110](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut110[i](I));
        return ret;
    };

    std::cerr << "\rLUT110   ";
    long gin110_clear = 1 * gout87_clear[0] + 2 * gout104_clear[0] + 4 * gout100_clear[1];
    std::vector<long> gout110_clear = fvec110(gin110_clear);

    std::vector<RotationPoly> lut111;
    std::vector<long (*)(long)> flut111;
    auto lut111idx0 = [](long I) -> long {
        /* GATE 41 (LUT3 _459_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut111.push_back(ctx.genrate_lut(lut111idx0));
    flut111.push_back(lut111idx0);
    auto fvec111 = [flut111](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut111[i](I));
        return ret;
    };

    std::cerr << "\rLUT111   ";
    long gin111_clear = 1 * gout82_clear[0] + 2 * gout94_clear[0] + 4 * gout100_clear[1];
    std::vector<long> gout111_clear = fvec111(gin111_clear);

    std::vector<RotationPoly> lut112;
    std::vector<long (*)(long)> flut112;
    auto lut112idx0 = [](long I) -> long {
        /* GATE 37 (LUT3 _455_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut112.push_back(ctx.genrate_lut(lut112idx0));
    flut112.push_back(lut112idx0);
    auto fvec112 = [flut112](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut112[i](I));
        return ret;
    };

    std::cerr << "\rLUT112   ";
    long gin112_clear = 1 * ct_num8_clear + 2 * gout19_clear[0] + 4 * gout100_clear[1];
    std::vector<long> gout112_clear = fvec112(gin112_clear);

    std::vector<RotationPoly> lut113;
    std::vector<long (*)(long)> flut113;
    auto lut113idx0 = [](long I) -> long {
        /* GATE 51 (LUT3 _469_ INIT 0xd PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut113.push_back(ctx.genrate_lut(lut113idx0));
    flut113.push_back(lut113idx0);
    auto fvec113 = [flut113](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut113[i](I));
        return ret;
    };

    std::cerr << "\rLUT113   ";
    long gin113_clear = 1 * gout99_clear[0] + 2 * gout109_clear[1] + 4 * gout79_clear[1];
    std::vector<long> gout113_clear = fvec113(gin113_clear);

    std::vector<RotationPoly> lut114;
    std::vector<long (*)(long)> flut114;
    auto lut114idx0 = [](long I) -> long {
        /* GATE 46 (LUT3 _464_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut114.push_back(ctx.genrate_lut(lut114idx0));
    flut114.push_back(lut114idx0);
    auto fvec114 = [flut114](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut114[i](I));
        return ret;
    };

    std::cerr << "\rLUT114   ";
    long gin114_clear = 1 * gout91_clear[0] + 2 * gout104_clear[1] + 4 * gout100_clear[1];
    std::vector<long> gout114_clear = fvec114(gin114_clear);

    std::vector<RotationPoly> lut115;
    std::vector<long (*)(long)> flut115;
    auto lut115idx0 = [](long I) -> long {
        /* GATE 58 (LUT3 _476_ INIT 0xd PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut115.push_back(ctx.genrate_lut(lut115idx0));
    flut115.push_back(lut115idx0);
    auto fvec115 = [flut115](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut115[i](I));
        return ret;
    };

    std::cerr << "\rLUT115   ";
    long gin115_clear = 1 * gout107_clear[0] + 2 * gout111_clear[0] + 4 * gout50_clear[0];
    std::vector<long> gout115_clear = fvec115(gin115_clear);

    std::cerr << "\rFA116    ";
    long gin116_clear = gout104_clear[2] + 1 * gout81_clear[0] + 2 * gout90_clear[0] + 1 * gout3_clear[0] + 2 * gout26_clear[0];
    std::vector<long> gout116_clear = vdecomp(gin116_clear);

    std::cerr << "\rFA117    ";
    long gin117_clear = gout33_clear[2] + 1 * gout112_clear[0] + 2 * gout109_clear[1] + 1 * gout101_clear[0] + 2 * gout84_clear[0];
    std::vector<long> gout117_clear = vdecomp(gin117_clear);

    std::cerr << "\rFA118    ";
    long gin118_clear = gout117_clear[2] + 1 * gout111_clear[0] + 2 * gout106_clear[0] + 1 * gout53_clear[0] + 2 * gout52_clear[0];
    std::vector<long> gout118_clear = vdecomp(gin118_clear);

    std::cerr << "\rFA119    ";
    long gin119_clear = gout118_clear[2] + 1 * gout110_clear[0] + 2 * gout114_clear[0] + 1 * gout1_clear[0] + 2 * gout24_clear[0];
    std::vector<long> gout119_clear = vdecomp(gin119_clear);

    std::vector<RotationPoly> lut120;
    std::vector<long (*)(long)> flut120;
    auto lut120idx0 = [](long I) -> long {
        /* GATE 48 (LUT3 _466_ INIT 0xf4 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut120.push_back(ctx.genrate_lut(lut120idx0));
    flut120.push_back(lut120idx0);
    auto fvec120 = [flut120](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut120[i](I));
        return ret;
    };

    std::cerr << "\rLUT120   ";
    long gin120_clear = 1 * gout95_clear[0] + 2 * gout116_clear[1] + 4 * gout90_clear[0];
    std::vector<long> gout120_clear = fvec120(gin120_clear);

    std::vector<RotationPoly> lut121;
    std::vector<long (*)(long)> flut121;
    auto lut121idx0 = [](long I) -> long {
        /* GATE 56 (LUT3 _474_ INIT 0xb PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut121.push_back(ctx.genrate_lut(lut121idx0));
    flut121.push_back(lut121idx0);
    auto fvec121 = [flut121](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut121[i](I));
        return ret;
    };

    std::cerr << "\rLUT121   ";
    long gin121_clear = 1 * gout109_clear[0] + 2 * gout111_clear[0] + 4 * gout50_clear[0];
    std::vector<long> gout121_clear = fvec121(gin121_clear);

    std::vector<RotationPoly> lut122;
    std::vector<long (*)(long)> flut122;
    auto lut122idx0 = [](long I) -> long {
        /* GATE 47 (LUT3 _465_ INIT 0xac PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut122.push_back(ctx.genrate_lut(lut122idx0));
    flut122.push_back(lut122idx0);
    auto fvec122 = [flut122](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut122[i](I));
        return ret;
    };

    std::cerr << "\rLUT122   ";
    long gin122_clear = 1 * gout116_clear[0] + 2 * gout81_clear[0] + 4 * gout100_clear[1];
    std::vector<long> gout122_clear = fvec122(gin122_clear);

    std::cerr << "\rFA123    ";
    long gin123_clear = gout119_clear[2] + 1 * gout122_clear[0] + 2 * gout120_clear[0] + 1 * gout17_clear[0] + 2 * gout12_clear[0];
    std::vector<long> gout123_clear = vdecomp(gin123_clear);

    std::vector<RotationPoly> lut124;
    std::vector<long (*)(long)> flut124;
    auto lut124idx0 = [](long I) -> long {
        /* GATE 61 (LUT3 _479_ INIT 0x1 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut124.push_back(ctx.genrate_lut(lut124idx0));
    flut124.push_back(lut124idx0);
    auto fvec124 = [flut124](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut124[i](I));
        return ret;
    };

    std::cerr << "\rLUT124   ";
    long gin124_clear = 1 * gout110_clear[0] + 2 * gout114_clear[0] + 4 * gout122_clear[0];
    std::vector<long> gout124_clear = fvec124(gin124_clear);

    std::vector<RotationPoly> lut125;
    std::vector<long (*)(long)> flut125;
    auto lut125idx0 = [](long I) -> long {
        /* GATE 50 (LUT3 _468_ INIT 0xd0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut125.push_back(ctx.genrate_lut(lut125idx0));
    flut125.push_back(lut125idx0);
    auto fvec125 = [flut125](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut125[i](I));
        return ret;
    };

    std::cerr << "\rLUT125   ";
    long gin125_clear = 1 * gout121_clear[0] + 2 * gout113_clear[0] + 4 * gout115_clear[0];
    std::vector<long> gout125_clear = fvec125(gin125_clear);

    std::vector<RotationPoly> lut126;
    std::vector<long (*)(long)> flut126;
    auto lut126idx0 = [](long I) -> long {
        /* GATE 60 (LUT3 _478_ INIT 0xb0 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut126.push_back(ctx.genrate_lut(lut126idx0));
    flut126.push_back(lut126idx0);
    auto fvec126 = [flut126](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut126[i](I));
        return ret;
    };

    std::cerr << "\rLUT126   ";
    long gin126_clear = 1 * gout124_clear[0] + 2 * gout106_clear[0] + 4 * gout41_clear[1];
    std::vector<long> gout126_clear = fvec126(gin126_clear);

    std::vector<RotationPoly> lut127;
    std::vector<long (*)(long)> flut127;
    auto lut127idx0 = [](long I) -> long {
        /* GATE 49 (LUT3 _467_ INIT 0xd PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut127.push_back(ctx.genrate_lut(lut127idx0));
    flut127.push_back(lut127idx0);
    auto fvec127 = [flut127](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut127[i](I));
        return ret;
    };

    std::cerr << "\rLUT127   ";
    long gin127_clear = 1 * gout126_clear[0] + 2 * gout125_clear[0] + 4 * gout120_clear[0];
    std::vector<long> gout127_clear = fvec127(gin127_clear);

    std::vector<RotationPoly> lut128;
    std::vector<long (*)(long)> flut128;
    auto lut128idx0 = [](long I) -> long {
        /* GATE 63 (LUT3 _481_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut128.push_back(ctx.genrate_lut(lut128idx0));
    flut128.push_back(lut128idx0);
    auto fvec128 = [flut128](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut128[i](I));
        return ret;
    };

    std::cerr << "\rLUT128   ";
    long gin128_clear = 1 * ct_num7_clear + 2 * gout33_clear[1] + 4 * gout127_clear[0];
    std::vector<long> gout128_clear = fvec128(gin128_clear);

    std::cerr << "\rINV129   ";
    std::vector<long> gout129_clear;
    gout129_clear.push_back(1 - gout127_clear[0]);

    std::vector<RotationPoly> lut130;
    std::vector<long (*)(long)> flut130;
    auto lut130idx0 = [](long I) -> long {
        /* GATE 66 (LUT3 _484_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut130.push_back(ctx.genrate_lut(lut130idx0));
    flut130.push_back(lut130idx0);
    auto fvec130 = [flut130](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut130[i](I));
        return ret;
    };

    std::cerr << "\rLUT130   ";
    long gin130_clear = 1 * gout111_clear[0] + 2 * gout118_clear[0] + 4 * gout127_clear[0];
    std::vector<long> gout130_clear = fvec130(gin130_clear);

    std::vector<RotationPoly> lut131;
    std::vector<long (*)(long)> flut131;
    auto lut131idx0 = [](long I) -> long {
        /* GATE 69 (LUT3 _487_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut131.push_back(ctx.genrate_lut(lut131idx0));
    flut131.push_back(lut131idx0);
    auto fvec131 = [flut131](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut131[i](I));
        return ret;
    };

    std::cerr << "\rLUT131   ";
    long gin131_clear = 1 * gout114_clear[0] + 2 * gout119_clear[1] + 4 * gout127_clear[0];
    std::vector<long> gout131_clear = fvec131(gin131_clear);

    std::vector<RotationPoly> lut132;
    std::vector<long (*)(long)> flut132;
    auto lut132idx0 = [](long I) -> long {
        /* GATE 64 (LUT3 _482_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut132.push_back(ctx.genrate_lut(lut132idx0));
    flut132.push_back(lut132idx0);
    auto fvec132 = [flut132](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut132[i](I));
        return ret;
    };

    std::cerr << "\rLUT132   ";
    long gin132_clear = 1 * gout112_clear[0] + 2 * gout117_clear[0] + 4 * gout127_clear[0];
    std::vector<long> gout132_clear = fvec132(gin132_clear);

    std::vector<RotationPoly> lut133;
    std::vector<long (*)(long)> flut133;
    auto lut133idx0 = [](long I) -> long {
        /* GATE 72 (LUT3 _490_ INIT 0xd0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut133.push_back(ctx.genrate_lut(lut133idx0));
    flut133.push_back(lut133idx0);
    auto fvec133 = [flut133](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut133[i](I));
        return ret;
    };

    std::cerr << "\rLUT133   ";
    long gin133_clear = 1 * gout126_clear[0] + 2 * gout125_clear[0] + 4 * gout123_clear[1];
    std::vector<long> gout133_clear = fvec133(gin133_clear);

    std::vector<RotationPoly> lut134;
    std::vector<long (*)(long)> flut134;
    auto lut134idx0 = [](long I) -> long {
        /* GATE 85 (LUT2 _503_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut134.push_back(ctx.genrate_lut(lut134idx0));
    flut134.push_back(lut134idx0);
    auto lut134idx1 = [](long I) -> long {
        /* GATE 82 (LUT2 _500_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut134.push_back(ctx.genrate_lut(lut134idx1));
    flut134.push_back(lut134idx1);
    auto fvec134 = [flut134](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut134[i](I));
        return ret;
    };

    std::cerr << "\rLUT134   ";
    long gin134_clear = 1 * gout130_clear[0] + 2 * gout41_clear[1];
    std::vector<long> gout134_clear = fvec134(gin134_clear);

    std::vector<RotationPoly> lut135;
    std::vector<long (*)(long)> flut135;
    auto lut135idx0 = [](long I) -> long {
        /* GATE 70 (LUT3 _488_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut135.push_back(ctx.genrate_lut(lut135idx0));
    flut135.push_back(lut135idx0);
    auto fvec135 = [flut135](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut135[i](I));
        return ret;
    };

    std::cerr << "\rLUT135   ";
    long gin135_clear = 1 * gout122_clear[0] + 2 * gout123_clear[0] + 4 * gout127_clear[0];
    std::vector<long> gout135_clear = fvec135(gin135_clear);

    std::vector<RotationPoly> lut136;
    std::vector<long (*)(long)> flut136;
    auto lut136idx0 = [](long I) -> long {
        /* GATE 67 (LUT3 _485_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut136.push_back(ctx.genrate_lut(lut136idx0));
    flut136.push_back(lut136idx0);
    auto fvec136 = [flut136](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut136[i](I));
        return ret;
    };

    std::cerr << "\rLUT136   ";
    long gin136_clear = 1 * gout106_clear[0] + 2 * gout118_clear[1] + 4 * gout127_clear[0];
    std::vector<long> gout136_clear = fvec136(gin136_clear);

    std::cerr << "\rINV137   ";
    std::vector<long> gout137_clear;
    gout137_clear.push_back(1 - gout127_clear[0]);

    std::vector<RotationPoly> lut138;
    std::vector<long (*)(long)> flut138;
    auto lut138idx0 = [](long I) -> long {
        /* GATE 142 (LUT3 _560_ INIT 0xa3 PERM 102) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut138.push_back(ctx.genrate_lut(lut138idx0));
    flut138.push_back(lut138idx0);
    auto lut138idx1 = [](long I) -> long {
        /* GATE 62 (LUT3 _480_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut138.push_back(ctx.genrate_lut(lut138idx1));
    flut138.push_back(lut138idx1);
    auto fvec138 = [flut138](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut138[i](I));
        return ret;
    };

    std::cerr << "\rLUT138   ";
    long gin138_clear = 1 * ct_num6_clear + 2 * gout33_clear[0] + 4 * gout127_clear[0];
    std::vector<long> gout138_clear = fvec138(gin138_clear);

    std::vector<RotationPoly> lut139;
    std::vector<long (*)(long)> flut139;
    auto lut139idx0 = [](long I) -> long {
        /* GATE 65 (LUT3 _483_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut139.push_back(ctx.genrate_lut(lut139idx0));
    flut139.push_back(lut139idx0);
    auto fvec139 = [flut139](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut139[i](I));
        return ret;
    };

    std::cerr << "\rLUT139   ";
    long gin139_clear = 1 * gout109_clear[1] + 2 * gout117_clear[1] + 4 * gout127_clear[0];
    std::vector<long> gout139_clear = fvec139(gin139_clear);

    std::vector<RotationPoly> lut140;
    std::vector<long (*)(long)> flut140;
    auto lut140idx0 = [](long I) -> long {
        /* GATE 80 (LUT2 _498_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut140.push_back(ctx.genrate_lut(lut140idx0));
    flut140.push_back(lut140idx0);
    auto fvec140 = [flut140](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut140[i](I));
        return ret;
    };

    std::cerr << "\rLUT140   ";
    long gin140_clear = 1 * gout132_clear[0] + 2 * gout79_clear[1];
    std::vector<long> gout140_clear = fvec140(gin140_clear);

    std::vector<RotationPoly> lut141;
    std::vector<long (*)(long)> flut141;
    auto lut141idx0 = [](long I) -> long {
        /* GATE 68 (LUT3 _486_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut141.push_back(ctx.genrate_lut(lut141idx0));
    flut141.push_back(lut141idx0);
    auto fvec141 = [flut141](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut141[i](I));
        return ret;
    };

    std::cerr << "\rLUT141   ";
    long gin141_clear = 1 * gout110_clear[0] + 2 * gout119_clear[0] + 4 * gout127_clear[0];
    std::vector<long> gout141_clear = fvec141(gin141_clear);

    std::cerr << "\rFA142    ";
    long gin142_clear = gout46_clear[2] + 1 * gout138_clear[1] + 2 * gout128_clear[0] + 1 * gout137_clear[0] + 2 * gout108_clear[0];
    std::vector<long> gout142_clear = vdecomp(gin142_clear);

    std::vector<RotationPoly> lut143;
    std::vector<long (*)(long)> flut143;
    auto lut143idx0 = [](long I) -> long {
        /* GATE 81 (LUT3 _499_ INIT 0xd PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut143.push_back(ctx.genrate_lut(lut143idx0));
    flut143.push_back(lut143idx0);
    auto lut143idx1 = [](long I) -> long {
        /* GATE 83 (LUT2 _501_ INIT 0x4 PERM 21) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut143.push_back(ctx.genrate_lut(lut143idx1));
    flut143.push_back(lut143idx1);
    auto fvec143 = [flut143](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut143[i](I));
        return ret;
    };

    std::cerr << "\rLUT143   ";
    long gin143_clear = 1 * gout134_clear[1] + 2 * gout139_clear[0] + 4 * gout50_clear[0];
    std::vector<long> gout143_clear = fvec143(gin143_clear);

    std::vector<RotationPoly> lut144;
    std::vector<long (*)(long)> flut144;
    auto lut144idx0 = [](long I) -> long {
        /* GATE 79 (LUT2 _497_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut144.push_back(ctx.genrate_lut(lut144idx0));
    flut144.push_back(lut144idx0);
    auto fvec144 = [flut144](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut144[i](I));
        return ret;
    };

    std::cerr << "\rLUT144   ";
    long gin144_clear = 1 * gout128_clear[0] + 2 * gout100_clear[1];
    std::vector<long> gout144_clear = fvec144(gin144_clear);

    std::vector<RotationPoly> lut145;
    std::vector<long (*)(long)> flut145;
    auto lut145idx0 = [](long I) -> long {
        /* GATE 71 (LUT2 _489_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut145.push_back(ctx.genrate_lut(lut145idx0));
    flut145.push_back(lut145idx0);
    auto fvec145 = [flut145](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut145[i](I));
        return ret;
    };

    std::cerr << "\rLUT145   ";
    long gin145_clear = 1 * gout133_clear[0] + 2 * gout120_clear[0];
    std::vector<long> gout145_clear = fvec145(gin145_clear);

    std::vector<RotationPoly> lut146;
    std::vector<long (*)(long)> flut146;
    auto lut146idx0 = [](long I) -> long {
        /* GATE 143 (LUT3 _561_ INIT 0x35 PERM 201) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut146.push_back(ctx.genrate_lut(lut146idx0));
    flut146.push_back(lut146idx0);
    auto fvec146 = [flut146](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut146[i](I));
        return ret;
    };

    std::cerr << "\rLUT146   ";
    long gin146_clear = 1 * gout21_clear[0] + 2 * gout138_clear[0] + 4 * gout127_clear[0];
    std::vector<long> gout146_clear = fvec146(gin146_clear);

    std::vector<RotationPoly> lut147;
    std::vector<long (*)(long)> flut147;
    auto lut147idx0 = [](long I) -> long {
        /* GATE 76 (LUT3 _494_ INIT 0xd0 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut147.push_back(ctx.genrate_lut(lut147idx0));
    flut147.push_back(lut147idx0);
    auto fvec147 = [flut147](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut147[i](I));
        return ret;
    };

    std::cerr << "\rLUT147   ";
    long gin147_clear = 1 * gout146_clear[0] + 2 * gout128_clear[0] + 4 * gout100_clear[1];
    std::vector<long> gout147_clear = fvec147(gin147_clear);

    std::cerr << "\rFA148    ";
    long gin148_clear = gout142_clear[2] + 1 * gout132_clear[0] + 2 * gout139_clear[0] + 1 * gout89_clear[0] + 2 * gout58_clear[0];
    std::vector<long> gout148_clear = vdecomp(gin148_clear);

    std::vector<RotationPoly> lut149;
    std::vector<long (*)(long)> flut149;
    auto lut149idx0 = [](long I) -> long {
        /* GATE 86 (LUT3 _504_ INIT 0x1 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut149.push_back(ctx.genrate_lut(lut149idx0));
    flut149.push_back(lut149idx0);
    auto fvec149 = [flut149](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut149[i](I));
        return ret;
    };

    std::cerr << "\rLUT149   ";
    long gin149_clear = 1 * gout141_clear[0] + 2 * gout131_clear[0] + 4 * gout135_clear[0];
    std::vector<long> gout149_clear = fvec149(gin149_clear);

    std::vector<RotationPoly> lut150;
    std::vector<long (*)(long)> flut150;
    auto lut150idx0 = [](long I) -> long {
        /* GATE 78 (LUT3 _496_ INIT 0xb PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut150.push_back(ctx.genrate_lut(lut150idx0));
    flut150.push_back(lut150idx0);
    auto fvec150 = [flut150](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut150[i](I));
        return ret;
    };

    std::cerr << "\rLUT150   ";
    long gin150_clear = 1 * gout144_clear[0] + 2 * gout132_clear[0] + 4 * gout79_clear[1];
    std::vector<long> gout150_clear = fvec150(gin150_clear);

    std::vector<RotationPoly> lut151;
    std::vector<long (*)(long)> flut151;
    auto lut151idx0 = [](long I) -> long {
        /* GATE 75 (LUT3 _493_ INIT 0xd PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut151.push_back(ctx.genrate_lut(lut151idx0));
    flut151.push_back(lut151idx0);
    auto fvec151 = [flut151](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut151[i](I));
        return ret;
    };

    std::cerr << "\rLUT151   ";
    long gin151_clear = 1 * gout150_clear[0] + 2 * gout147_clear[0] + 4 * gout140_clear[0];
    std::vector<long> gout151_clear = fvec151(gin151_clear);

    std::vector<RotationPoly> lut152;
    std::vector<long (*)(long)> flut152;
    auto lut152idx0 = [](long I) -> long {
        /* GATE 84 (LUT3 _502_ INIT 0x10 PERM 021) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut152.push_back(ctx.genrate_lut(lut152idx0));
    flut152.push_back(lut152idx0);
    auto fvec152 = [flut152](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut152[i](I));
        return ret;
    };

    std::cerr << "\rLUT152   ";
    long gin152_clear = 1 * gout134_clear[0] + 2 * gout149_clear[0] + 4 * gout136_clear[0];
    std::vector<long> gout152_clear = fvec152(gin152_clear);

    std::cerr << "\rFA153    ";
    long gin153_clear = gout148_clear[2] + 1 * gout130_clear[0] + 2 * gout136_clear[0] + 1 * gout54_clear[0] + 2 * gout27_clear[0];
    std::vector<long> gout153_clear = vdecomp(gin153_clear);

    std::cerr << "\rFA154    ";
    long gin154_clear = gout153_clear[2] + 1 * gout141_clear[0] + 2 * gout131_clear[0] + 1 * gout4_clear[0] + 2 * gout34_clear[0];
    std::vector<long> gout154_clear = vdecomp(gin154_clear);

    std::vector<RotationPoly> lut155;
    std::vector<long (*)(long)> flut155;
    auto lut155idx0 = [](long I) -> long {
        /* GATE 74 (LUT3 _492_ INIT 0xe0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut155.push_back(ctx.genrate_lut(lut155idx0));
    flut155.push_back(lut155idx0);
    auto fvec155 = [flut155](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut155[i](I));
        return ret;
    };

    std::cerr << "\rLUT155   ";
    long gin155_clear = 1 * gout143_clear[1] + 2 * gout151_clear[0] + 4 * gout143_clear[0];
    std::vector<long> gout155_clear = fvec155(gin155_clear);

    std::cerr << "\rFA156    ";
    long gin156_clear = gout154_clear[2] + 1 * gout135_clear[0] + 2 * gout145_clear[0] + 1 * gout40_clear[0] + 2 * gout15_clear[0];
    std::vector<long> gout156_clear = vdecomp(gin156_clear);

    std::vector<RotationPoly> lut157;
    std::vector<long (*)(long)> flut157;
    auto lut157idx0 = [](long I) -> long {
        /* GATE 99 (LUT3 _517_ INIT 0xd0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut157.push_back(ctx.genrate_lut(lut157idx0));
    flut157.push_back(lut157idx0);
    auto fvec157 = [flut157](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut157[i](I));
        return ret;
    };

    std::cerr << "\rLUT157   ";
    long gin157_clear = 1 * gout152_clear[0] + 2 * gout155_clear[0] + 4 * gout156_clear[1];
    std::vector<long> gout157_clear = fvec157(gin157_clear);

    std::vector<RotationPoly> lut158;
    std::vector<long (*)(long)> flut158;
    auto lut158idx0 = [](long I) -> long {
        /* GATE 98 (LUT2 _516_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut158.push_back(ctx.genrate_lut(lut158idx0));
    flut158.push_back(lut158idx0);
    auto fvec158 = [flut158](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut158[i](I));
        return ret;
    };

    std::cerr << "\rLUT158   ";
    long gin158_clear = 1 * gout157_clear[0] + 2 * gout145_clear[0];
    std::vector<long> gout158_clear = fvec158(gin158_clear);

    std::vector<RotationPoly> lut159;
    std::vector<long (*)(long)> flut159;
    auto lut159idx0 = [](long I) -> long {
        /* GATE 73 (LUT3 _491_ INIT 0xd PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut159.push_back(ctx.genrate_lut(lut159idx0));
    flut159.push_back(lut159idx0);
    auto fvec159 = [flut159](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut159[i](I));
        return ret;
    };

    std::cerr << "\rLUT159   ";
    long gin159_clear = 1 * gout152_clear[0] + 2 * gout155_clear[0] + 4 * gout145_clear[0];
    std::vector<long> gout159_clear = fvec159(gin159_clear);

    std::vector<RotationPoly> lut160;
    std::vector<long (*)(long)> flut160;
    auto lut160idx0 = [](long I) -> long {
        /* GATE 93 (LUT3 _511_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut160.push_back(ctx.genrate_lut(lut160idx0));
    flut160.push_back(lut160idx0);
    auto fvec160 = [flut160](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut160[i](I));
        return ret;
    };

    std::cerr << "\rLUT160   ";
    long gin160_clear = 1 * gout130_clear[0] + 2 * gout153_clear[0] + 4 * gout159_clear[0];
    std::vector<long> gout160_clear = fvec160(gin160_clear);

    std::vector<RotationPoly> lut161;
    std::vector<long (*)(long)> flut161;
    auto lut161idx0 = [](long I) -> long {
        /* GATE 88 (LUT3 _506_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut161.push_back(ctx.genrate_lut(lut161idx0));
    flut161.push_back(lut161idx0);
    auto fvec161 = [flut161](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut161[i](I));
        return ret;
    };

    std::cerr << "\rLUT161   ";
    long gin161_clear = 1 * ct_num5_clear + 2 * gout46_clear[1] + 4 * gout159_clear[0];
    std::vector<long> gout161_clear = fvec161(gin161_clear);

    std::vector<RotationPoly> lut162;
    std::vector<long (*)(long)> flut162;
    auto lut162idx0 = [](long I) -> long {
        /* GATE 91 (LUT3 _509_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut162.push_back(ctx.genrate_lut(lut162idx0));
    flut162.push_back(lut162idx0);
    auto fvec162 = [flut162](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut162[i](I));
        return ret;
    };

    std::cerr << "\rLUT162   ";
    long gin162_clear = 1 * gout132_clear[0] + 2 * gout148_clear[0] + 4 * gout159_clear[0];
    std::vector<long> gout162_clear = fvec162(gin162_clear);

    std::vector<RotationPoly> lut163;
    std::vector<long (*)(long)> flut163;
    auto lut163idx0 = [](long I) -> long {
        /* GATE 94 (LUT3 _512_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut163.push_back(ctx.genrate_lut(lut163idx0));
    flut163.push_back(lut163idx0);
    auto fvec163 = [flut163](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut163[i](I));
        return ret;
    };

    std::cerr << "\rLUT163   ";
    long gin163_clear = 1 * gout136_clear[0] + 2 * gout153_clear[1] + 4 * gout159_clear[0];
    std::vector<long> gout163_clear = fvec163(gin163_clear);

    std::vector<RotationPoly> lut164;
    std::vector<long (*)(long)> flut164;
    auto lut164idx0 = [](long I) -> long {
        /* GATE 96 (LUT3 _514_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut164.push_back(ctx.genrate_lut(lut164idx0));
    flut164.push_back(lut164idx0);
    auto fvec164 = [flut164](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut164[i](I));
        return ret;
    };

    std::cerr << "\rLUT164   ";
    long gin164_clear = 1 * gout131_clear[0] + 2 * gout154_clear[1] + 4 * gout159_clear[0];
    std::vector<long> gout164_clear = fvec164(gin164_clear);

    std::vector<RotationPoly> lut165;
    std::vector<long (*)(long)> flut165;
    auto lut165idx0 = [](long I) -> long {
        /* GATE 148 (LUT3 _566_ INIT 0xa3 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut165.push_back(ctx.genrate_lut(lut165idx0));
    flut165.push_back(lut165idx0);
    auto lut165idx1 = [](long I) -> long {
        /* GATE 87 (LUT3 _505_ INIT 0xca PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut165.push_back(ctx.genrate_lut(lut165idx1));
    flut165.push_back(lut165idx1);
    auto fvec165 = [flut165](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut165[i](I));
        return ret;
    };

    std::cerr << "\rLUT165   ";
    long gin165_clear = 1 * gout46_clear[0] + 2 * ct_num4_clear + 4 * gout159_clear[0];
    std::vector<long> gout165_clear = fvec165(gin165_clear);

    std::vector<RotationPoly> lut166;
    std::vector<long (*)(long)> flut166;
    auto lut166idx0 = [](long I) -> long {
        /* GATE 89 (LUT3 _507_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut166.push_back(ctx.genrate_lut(lut166idx0));
    flut166.push_back(lut166idx0);
    auto fvec166 = [flut166](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut166[i](I));
        return ret;
    };

    std::cerr << "\rLUT166   ";
    long gin166_clear = 1 * gout138_clear[1] + 2 * gout142_clear[0] + 4 * gout159_clear[0];
    std::vector<long> gout166_clear = fvec166(gin166_clear);

    std::vector<RotationPoly> lut167;
    std::vector<long (*)(long)> flut167;
    auto lut167idx0 = [](long I) -> long {
        /* GATE 97 (LUT3 _515_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut167.push_back(ctx.genrate_lut(lut167idx0));
    flut167.push_back(lut167idx0);
    auto fvec167 = [flut167](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut167[i](I));
        return ret;
    };

    std::cerr << "\rLUT167   ";
    long gin167_clear = 1 * gout135_clear[0] + 2 * gout156_clear[0] + 4 * gout159_clear[0];
    std::vector<long> gout167_clear = fvec167(gin167_clear);

    std::vector<RotationPoly> lut168;
    std::vector<long (*)(long)> flut168;
    auto lut168idx0 = [](long I) -> long {
        /* GATE 151 (LUT2 _569_ INIT 0xb PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut168.push_back(ctx.genrate_lut(lut168idx0));
    flut168.push_back(lut168idx0);
    auto lut168idx1 = [](long I) -> long {
        /* GATE 108 (LUT2 _526_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut168.push_back(ctx.genrate_lut(lut168idx1));
    flut168.push_back(lut168idx1);
    auto fvec168 = [flut168](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut168[i](I));
        return ret;
    };

    std::cerr << "\rLUT168   ";
    long gin168_clear = 1 * gout166_clear[0] + 2 * gout100_clear[1];
    std::vector<long> gout168_clear = fvec168(gin168_clear);

    std::vector<RotationPoly> lut169;
    std::vector<long (*)(long)> flut169;
    auto lut169idx0 = [](long I) -> long {
        /* GATE 92 (LUT3 _510_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut169.push_back(ctx.genrate_lut(lut169idx0));
    flut169.push_back(lut169idx0);
    auto fvec169 = [flut169](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut169[i](I));
        return ret;
    };

    std::cerr << "\rLUT169   ";
    long gin169_clear = 1 * gout139_clear[0] + 2 * gout148_clear[1] + 4 * gout159_clear[0];
    std::vector<long> gout169_clear = fvec169(gin169_clear);

    std::vector<RotationPoly> lut170;
    std::vector<long (*)(long)> flut170;
    auto lut170idx0 = [](long I) -> long {
        /* GATE 111 (LUT2 _529_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut170.push_back(ctx.genrate_lut(lut170idx0));
    flut170.push_back(lut170idx0);
    auto fvec170 = [flut170](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut170[i](I));
        return ret;
    };

    std::cerr << "\rLUT170   ";
    long gin170_clear = 1 * gout162_clear[0] + 2 * gout50_clear[0];
    std::vector<long> gout170_clear = fvec170(gin170_clear);

    std::vector<RotationPoly> lut171;
    std::vector<long (*)(long)> flut171;
    auto lut171idx0 = [](long I) -> long {
        /* GATE 95 (LUT3 _513_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut171.push_back(ctx.genrate_lut(lut171idx0));
    flut171.push_back(lut171idx0);
    auto fvec171 = [flut171](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut171[i](I));
        return ret;
    };

    std::cerr << "\rLUT171   ";
    long gin171_clear = 1 * gout141_clear[0] + 2 * gout154_clear[0] + 4 * gout159_clear[0];
    std::vector<long> gout171_clear = fvec171(gin171_clear);

    std::cerr << "\rINV172   ";
    std::vector<long> gout172_clear;
    gout172_clear.push_back(1 - gout159_clear[0]);

    std::vector<RotationPoly> lut173;
    std::vector<long (*)(long)> flut173;
    auto lut173idx0 = [](long I) -> long {
        /* GATE 90 (LUT3 _508_ INIT 0xca PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut173.push_back(ctx.genrate_lut(lut173idx0));
    flut173.push_back(lut173idx0);
    auto fvec173 = [flut173](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut173[i](I));
        return ret;
    };

    std::cerr << "\rLUT173   ";
    long gin173_clear = 1 * gout128_clear[0] + 2 * gout142_clear[1] + 4 * gout159_clear[0];
    std::vector<long> gout173_clear = fvec173(gin173_clear);

    std::vector<RotationPoly> lut174;
    std::vector<long (*)(long)> flut174;
    auto lut174idx0 = [](long I) -> long {
        /* GATE 110 (LUT2 _528_ INIT 0x4 PERM 10) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut174.push_back(ctx.genrate_lut(lut174idx0));
    flut174.push_back(lut174idx0);
    auto fvec174 = [flut174](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut174[i](I));
        return ret;
    };

    std::cerr << "\rLUT174   ";
    long gin174_clear = 1 * gout79_clear[1] + 2 * gout173_clear[0];
    std::vector<long> gout174_clear = fvec174(gin174_clear);

    std::vector<RotationPoly> lut175;
    std::vector<long (*)(long)> flut175;
    auto lut175idx0 = [](long I) -> long {
        /* GATE 149 (LUT3 _567_ INIT 0xca PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut175.push_back(ctx.genrate_lut(lut175idx0));
    flut175.push_back(lut175idx0);
    auto fvec175 = [flut175](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut175[i](I));
        return ret;
    };

    std::cerr << "\rLUT175   ";
    long gin175_clear = 1 * gout22_clear[0] + 2 * gout165_clear[0] + 4 * gout159_clear[0];
    std::vector<long> gout175_clear = fvec175(gin175_clear);

    std::vector<RotationPoly> lut176;
    std::vector<long (*)(long)> flut176;
    auto lut176idx0 = [](long I) -> long {
        /* GATE 114 (LUT3 _532_ INIT 0x1 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut176.push_back(ctx.genrate_lut(lut176idx0));
    flut176.push_back(lut176idx0);
    auto fvec176 = [flut176](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut176[i](I));
        return ret;
    };

    std::cerr << "\rLUT176   ";
    long gin176_clear = 1 * gout171_clear[0] + 2 * gout164_clear[0] + 4 * gout167_clear[0];
    std::vector<long> gout176_clear = fvec176(gin176_clear);

    std::vector<RotationPoly> lut177;
    std::vector<long (*)(long)> flut177;
    auto lut177idx0 = [](long I) -> long {
        /* GATE 107 (LUT3 _525_ INIT 0xb PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut177.push_back(ctx.genrate_lut(lut177idx0));
    flut177.push_back(lut177idx0);
    auto fvec177 = [flut177](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut177[i](I));
        return ret;
    };

    std::cerr << "\rLUT177   ";
    long gin177_clear = 1 * gout168_clear[1] + 2 * gout79_clear[1] + 4 * gout173_clear[0];
    std::vector<long> gout177_clear = fvec177(gin177_clear);

    std::vector<RotationPoly> lut178;
    std::vector<long (*)(long)> flut178;
    auto lut178idx0 = [](long I) -> long {
        /* GATE 150 (LUT3 _568_ INIT 0x71 PERM 021) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut178.push_back(ctx.genrate_lut(lut178idx0));
    flut178.push_back(lut178idx0);
    auto fvec178 = [flut178](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut178[i](I));
        return ret;
    };

    std::cerr << "\rLUT178   ";
    long gin178_clear = 1 * gout175_clear[0] + 2 * gout161_clear[0] + 4 * gout127_clear[0];
    std::vector<long> gout178_clear = fvec178(gin178_clear);

    std::vector<RotationPoly> lut179;
    std::vector<long (*)(long)> flut179;
    auto lut179idx0 = [](long I) -> long {
        /* GATE 109 (LUT3 _527_ INIT 0xd PERM 210) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut179.push_back(ctx.genrate_lut(lut179idx0));
    flut179.push_back(lut179idx0);
    auto fvec179 = [flut179](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut179[i](I));
        return ret;
    };

    std::cerr << "\rLUT179   ";
    long gin179_clear = 1 * gout174_clear[0] + 2 * gout162_clear[0] + 4 * gout50_clear[0];
    std::vector<long> gout179_clear = fvec179(gin179_clear);

    std::vector<RotationPoly> lut180;
    std::vector<long (*)(long)> flut180;
    auto lut180idx0 = [](long I) -> long {
        /* GATE 115 (LUT2 _533_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut180.push_back(ctx.genrate_lut(lut180idx0));
    flut180.push_back(lut180idx0);
    auto fvec180 = [flut180](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut180[i](I));
        return ret;
    };

    std::cerr << "\rLUT180   ";
    long gin180_clear = 1 * gout169_clear[0] + 2 * gout41_clear[1];
    std::vector<long> gout180_clear = fvec180(gin180_clear);

    std::vector<RotationPoly> lut181;
    std::vector<long (*)(long)> flut181;
    auto lut181idx0 = [](long I) -> long {
        /* GATE 113 (LUT3 _531_ INIT 0x10 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut181.push_back(ctx.genrate_lut(lut181idx0));
    flut181.push_back(lut181idx0);
    auto fvec181 = [flut181](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut181[i](I));
        return ret;
    };

    std::cerr << "\rLUT181   ";
    long gin181_clear = 1 * gout160_clear[0] + 2 * gout163_clear[0] + 4 * gout176_clear[0];
    std::vector<long> gout181_clear = fvec181(gin181_clear);

    std::cerr << "\rFA182    ";
    long gin182_clear = gout49_clear[2] + 1 * gout165_clear[1] + 2 * gout161_clear[0] + 1 * gout172_clear[0] + 2 * gout129_clear[0];
    std::vector<long> gout182_clear = vdecomp(gin182_clear);

    std::cerr << "\rFA183    ";
    long gin183_clear = gout182_clear[2] + 1 * gout166_clear[0] + 2 * gout173_clear[0] + 1 * gout102_clear[0] + 2 * gout85_clear[0];
    std::vector<long> gout183_clear = vdecomp(gin183_clear);

    std::vector<RotationPoly> lut184;
    std::vector<long (*)(long)> flut184;
    auto lut184idx0 = [](long I) -> long {
        /* GATE 112 (LUT3 _530_ INIT 0xb0 PERM 201) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut184.push_back(ctx.genrate_lut(lut184idx0));
    flut184.push_back(lut184idx0);
    auto fvec184 = [flut184](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut184[i](I));
        return ret;
    };

    std::cerr << "\rLUT184   ";
    long gin184_clear = 1 * gout169_clear[0] + 2 * gout181_clear[0] + 4 * gout41_clear[1];
    std::vector<long> gout184_clear = fvec184(gin184_clear);

    std::cerr << "\rFA185    ";
    long gin185_clear = gout183_clear[2] + 1 * gout162_clear[0] + 2 * gout169_clear[0] + 1 * gout68_clear[0] + 2 * gout48_clear[0];
    std::vector<long> gout185_clear = vdecomp(gin185_clear);

    std::cerr << "\rFA186    ";
    long gin186_clear = gout185_clear[2] + 1 * gout160_clear[0] + 2 * gout163_clear[0] + 1 * gout16_clear[0] + 2 * gout13_clear[0];
    std::vector<long> gout186_clear = vdecomp(gin186_clear);

    std::vector<RotationPoly> lut187;
    std::vector<long (*)(long)> flut187;
    auto lut187idx0 = [](long I) -> long {
        /* GATE 152 (LUT3 _570_ INIT 0x70 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut187.push_back(ctx.genrate_lut(lut187idx0));
    flut187.push_back(lut187idx0);
    auto fvec187 = [flut187](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut187[i](I));
        return ret;
    };

    std::cerr << "\rLUT187   ";
    long gin187_clear = 1 * gout168_clear[0] + 2 * gout178_clear[0] + 4 * gout177_clear[0];
    std::vector<long> gout187_clear = fvec187(gin187_clear);

    std::vector<RotationPoly> lut188;
    std::vector<long (*)(long)> flut188;
    auto lut188idx0 = [](long I) -> long {
        /* GATE 105 (LUT3 _523_ INIT 0xd PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut188.push_back(ctx.genrate_lut(lut188idx0));
    flut188.push_back(lut188idx0);
    auto fvec188 = [flut188](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut188[i](I));
        return ret;
    };

    std::cerr << "\rLUT188   ";
    long gin188_clear = 1 * gout179_clear[0] + 2 * gout187_clear[0] + 4 * gout170_clear[0];
    std::vector<long> gout188_clear = fvec188(gin188_clear);

    std::cerr << "\rFA189    ";
    long gin189_clear = gout186_clear[2] + 1 * gout171_clear[0] + 2 * gout164_clear[0] + 1 * gout8_clear[0] + 2 * gout7_clear[0];
    std::vector<long> gout189_clear = vdecomp(gin189_clear);

    std::vector<RotationPoly> lut190;
    std::vector<long (*)(long)> flut190;
    auto lut190idx0 = [](long I) -> long {
        /* GATE 140 (LUT2 _558_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut190.push_back(ctx.genrate_lut(lut190idx0));
    flut190.push_back(lut190idx0);
    auto fvec190 = [flut190](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut190[i](I));
        return ret;
    };

    std::cerr << "\rLUT190   ";
    long gin190_clear = 1 * gout189_clear[0] + 2 * gout189_clear[1];
    std::vector<long> gout190_clear = fvec190(gin190_clear);

    std::vector<RotationPoly> lut191;
    std::vector<long (*)(long)> flut191;
    auto lut191idx0 = [](long I) -> long {
        /* GATE 104 (LUT3 _522_ INIT 0xe0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut191.push_back(ctx.genrate_lut(lut191idx0));
    flut191.push_back(lut191idx0);
    auto fvec191 = [flut191](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut191[i](I));
        return ret;
    };

    std::cerr << "\rLUT191   ";
    long gin191_clear = 1 * gout180_clear[0] + 2 * gout188_clear[0] + 4 * gout184_clear[0];
    std::vector<long> gout191_clear = fvec191(gin191_clear);

    std::vector<RotationPoly> lut192;
    std::vector<long (*)(long)> flut192;
    auto lut192idx0 = [](long I) -> long {
        /* GATE 139 (LUT3 _557_ INIT 0x10 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut192.push_back(ctx.genrate_lut(lut192idx0));
    flut192.push_back(lut192idx0);
    auto fvec192 = [flut192](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut192[i](I));
        return ret;
    };

    std::cerr << "\rLUT192   ";
    long gin192_clear = 1 * gout185_clear[1] + 2 * gout186_clear[1] + 4 * gout190_clear[0];
    std::vector<long> gout192_clear = fvec192(gin192_clear);

    std::vector<RotationPoly> lut193;
    std::vector<long (*)(long)> flut193;
    auto lut193idx0 = [](long I) -> long {
        /* GATE 103 (LUT3 _521_ INIT 0x1 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut193.push_back(ctx.genrate_lut(lut193idx0));
    flut193.push_back(lut193idx0);
    auto lut193idx1 = [](long I) -> long {
        /* GATE 119 (LUT2 _537_ INIT 0x1 PERM 12) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut193.push_back(ctx.genrate_lut(lut193idx1));
    flut193.push_back(lut193idx1);
    auto fvec193 = [flut193](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut193[i](I));
        return ret;
    };

    std::cerr << "\rLUT193   ";
    long gin193_clear = 1 * gout67_clear[0] + 2 * gout191_clear[0] + 4 * gout158_clear[0];
    std::vector<long> gout193_clear = fvec193(gin193_clear);

    std::vector<RotationPoly> lut194;
    std::vector<long (*)(long)> flut194;
    auto lut194idx0 = [](long I) -> long {
        /* GATE 123 (LUT3 _541_ INIT 0x10 PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut194.push_back(ctx.genrate_lut(lut194idx0));
    flut194.push_back(lut194idx0);
    auto fvec194 = [flut194](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut194[i](I));
        return ret;
    };

    std::cerr << "\rLUT194   ";
    long gin194_clear = 1 * gout182_clear[1] + 2 * gout191_clear[0] + 4 * gout158_clear[0];
    std::vector<long> gout194_clear = fvec194(gin194_clear);

    std::vector<RotationPoly> lut195;
    std::vector<long (*)(long)> flut195;
    auto lut195idx0 = [](long I) -> long {
        /* GATE 118 (LUT3 _536_ INIT 0x35 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut195.push_back(ctx.genrate_lut(lut195idx0));
    flut195.push_back(lut195idx0);
    auto fvec195 = [flut195](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut195[i](I));
        return ret;
    };

    std::cerr << "\rLUT195   ";
    long gin195_clear = 1 * ct_num3_clear + 2 * gout49_clear[1] + 4 * gout193_clear[1];
    std::vector<long> gout195_clear = fvec195(gin195_clear);

    std::vector<RotationPoly> lut196;
    std::vector<long (*)(long)> flut196;
    auto lut196idx0 = [](long I) -> long {
        /* GATE 130 (LUT3 _548_ INIT 0x35 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut196.push_back(ctx.genrate_lut(lut196idx0));
    flut196.push_back(lut196idx0);
    auto fvec196 = [flut196](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut196[i](I));
        return ret;
    };

    std::cerr << "\rLUT196   ";
    long gin196_clear = 1 * gout173_clear[0] + 2 * gout183_clear[1] + 4 * gout193_clear[1];
    std::vector<long> gout196_clear = fvec196(gin196_clear);

    std::vector<RotationPoly> lut197;
    std::vector<long (*)(long)> flut197;
    auto lut197idx0 = [](long I) -> long {
        /* GATE 145 (LUT2 _563_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut197.push_back(ctx.genrate_lut(lut197idx0));
    flut197.push_back(lut197idx0);
    auto fvec197 = [flut197](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut197[i](I));
        return ret;
    };

    std::cerr << "\rLUT197   ";
    long gin197_clear = 1 * gout193_clear[0] + 2 * gout2_clear[0];
    std::vector<long> gout197_clear = fvec197(gin197_clear);

    std::vector<RotationPoly> lut198;
    std::vector<long (*)(long)> flut198;
    auto lut198idx0 = [](long I) -> long {
        /* GATE 120 (LUT3 _538_ INIT 0x35 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut198.push_back(ctx.genrate_lut(lut198idx0));
    flut198.push_back(lut198idx0);
    auto fvec198 = [flut198](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut198[i](I));
        return ret;
    };

    std::cerr << "\rLUT198   ";
    long gin198_clear = 1 * gout165_clear[1] + 2 * gout182_clear[0] + 4 * gout193_clear[1];
    std::vector<long> gout198_clear = fvec198(gin198_clear);

    std::vector<RotationPoly> lut199;
    std::vector<long (*)(long)> flut199;
    auto lut199idx0 = [](long I) -> long {
        /* GATE 136 (LUT3 _554_ INIT 0xb PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut199.push_back(ctx.genrate_lut(lut199idx0));
    flut199.push_back(lut199idx0);
    auto fvec199 = [flut199](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut199[i](I));
        return ret;
    };

    std::cerr << "\rLUT199   ";
    long gin199_clear = 1 * gout169_clear[0] + 2 * gout181_clear[0] + 4 * gout193_clear[1];
    std::vector<long> gout199_clear = fvec199(gin199_clear);

    std::cerr << "\rFA200    ";
    long gin200_clear = gout189_clear[2] + 1 * gout167_clear[0] + 2 * gout158_clear[0] + 1 * gout6_clear[0] + 2 * gout30_clear[0];
    std::vector<long> gout200_clear = vdecomp(gin200_clear);

    std::vector<RotationPoly> lut201;
    std::vector<long (*)(long)> flut201;
    auto lut201idx0 = [](long I) -> long {
        /* GATE 133 (LUT3 _551_ INIT 0x35 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut201.push_back(ctx.genrate_lut(lut201idx0));
    flut201.push_back(lut201idx0);
    auto fvec201 = [flut201](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut201[i](I));
        return ret;
    };

    std::cerr << "\rLUT201   ";
    long gin201_clear = 1 * gout162_clear[0] + 2 * gout185_clear[0] + 4 * gout193_clear[1];
    std::vector<long> gout201_clear = fvec201(gin201_clear);

    std::vector<RotationPoly> lut202;
    std::vector<long (*)(long)> flut202;
    auto lut202idx0 = [](long I) -> long {
        /* GATE 144 (LUT2 _562_ INIT 0xe PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut202.push_back(ctx.genrate_lut(lut202idx0));
    flut202.push_back(lut202idx0);
    auto fvec202 = [flut202](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut202[i](I));
        return ret;
    };

    std::cerr << "\rLUT202   ";
    long gin202_clear = 1 * gout127_clear[0] + 2 * gout198_clear[0];
    std::vector<long> gout202_clear = fvec202(gin202_clear);

    std::vector<RotationPoly> lut203;
    std::vector<long (*)(long)> flut203;
    auto lut203idx0 = [](long I) -> long {
        /* GATE 141 (LUT3 _559_ INIT 0xd PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut203.push_back(ctx.genrate_lut(lut203idx0));
    flut203.push_back(lut203idx0);
    auto fvec203 = [flut203](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut203[i](I));
        return ret;
    };

    std::cerr << "\rLUT203   ";
    long gin203_clear = 1 * gout200_clear[1] + 2 * gout191_clear[0] + 4 * gout158_clear[0];
    std::vector<long> gout203_clear = fvec203(gin203_clear);

    std::vector<RotationPoly> lut204;
    std::vector<long (*)(long)> flut204;
    auto lut204idx0 = [](long I) -> long {
        /* GATE 138 (LUT3 _556_ INIT 0x10 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut204.push_back(ctx.genrate_lut(lut204idx0));
    flut204.push_back(lut204idx0);
    auto fvec204 = [flut204](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut204[i](I));
        return ret;
    };

    std::cerr << "\rLUT204   ";
    long gin204_clear = 1 * gout186_clear[0] + 2 * gout200_clear[0] + 4 * gout192_clear[0];
    std::vector<long> gout204_clear = fvec204(gin204_clear);

    std::vector<RotationPoly> lut205;
    std::vector<long (*)(long)> flut205;
    auto lut205idx0 = [](long I) -> long {
        /* GATE 124 (LUT3 _542_ INIT 0xe0 PERM 210) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut205.push_back(ctx.genrate_lut(lut205idx0));
    flut205.push_back(lut205idx0);
    auto fvec205 = [flut205](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut205[i](I));
        return ret;
    };

    std::cerr << "\rLUT205   ";
    long gin205_clear = 1 * gout161_clear[0] + 2 * gout191_clear[0] + 4 * gout158_clear[0];
    std::vector<long> gout205_clear = fvec205(gin205_clear);

    std::vector<RotationPoly> lut206;
    std::vector<long (*)(long)> flut206;
    auto lut206idx0 = [](long I) -> long {
        /* GATE 127 (LUT3 _545_ INIT 0xe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut206.push_back(ctx.genrate_lut(lut206idx0));
    flut206.push_back(lut206idx0);
    auto lut206idx1 = [](long I) -> long {
        /* GATE 122 (LUT3 _540_ INIT 0x10 PERM 102) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut206.push_back(ctx.genrate_lut(lut206idx1));
    flut206.push_back(lut206idx1);
    auto fvec206 = [flut206](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut206[i](I));
        return ret;
    };

    std::cerr << "\rLUT206   ";
    long gin206_clear = 1 * gout205_clear[0] + 2 * gout194_clear[0] + 4 * gout100_clear[1];
    std::vector<long> gout206_clear = fvec206(gin206_clear);

    std::vector<RotationPoly> lut207;
    std::vector<long (*)(long)> flut207;
    auto lut207idx0 = [](long I) -> long {
        /* GATE 146 (LUT3 _564_ INIT 0xb2 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut207.push_back(ctx.genrate_lut(lut207idx0));
    flut207.push_back(lut207idx0);
    auto fvec207 = [flut207](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut207[i](I));
        return ret;
    };

    std::cerr << "\rLUT207   ";
    long gin207_clear = 1 * gout159_clear[0] + 2 * gout197_clear[0] + 4 * gout195_clear[0];
    std::vector<long> gout207_clear = fvec207(gin207_clear);

    std::vector<RotationPoly> lut208;
    std::vector<long (*)(long)> flut208;
    auto lut208idx0 = [](long I) -> long {
        /* GATE 126 (LUT3 _544_ INIT 0x35 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut208.push_back(ctx.genrate_lut(lut208idx0));
    flut208.push_back(lut208idx0);
    auto fvec208 = [flut208](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut208[i](I));
        return ret;
    };

    std::cerr << "\rLUT208   ";
    long gin208_clear = 1 * gout166_clear[0] + 2 * gout183_clear[0] + 4 * gout193_clear[1];
    std::vector<long> gout208_clear = fvec208(gin208_clear);

    std::vector<RotationPoly> lut209;
    std::vector<long (*)(long)> flut209;
    auto lut209idx0 = [](long I) -> long {
        /* GATE 137 (LUT2 _555_ INIT 0x4 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut209.push_back(ctx.genrate_lut(lut209idx0));
    flut209.push_back(lut209idx0);
    auto fvec209 = [flut209](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut209[i](I));
        return ret;
    };

    std::cerr << "\rLUT209   ";
    long gin209_clear = 1 * gout204_clear[0] + 2 * gout193_clear[1];
    std::vector<long> gout209_clear = fvec209(gin209_clear);

    std::vector<RotationPoly> lut210;
    std::vector<long (*)(long)> flut210;
    auto lut210idx0 = [](long I) -> long {
        /* GATE 121 (LUT3 _539_ INIT 0x7 PERM 120) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut210.push_back(ctx.genrate_lut(lut210idx0));
    flut210.push_back(lut210idx0);
    auto fvec210 = [flut210](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut210[i](I));
        return ret;
    };

    std::cerr << "\rLUT210   ";
    long gin210_clear = 1 * gout206_clear[1] + 2 * gout127_clear[0] + 4 * gout198_clear[0];
    std::vector<long> gout210_clear = fvec210(gin210_clear);

    std::vector<RotationPoly> lut211;
    std::vector<long (*)(long)> flut211;
    auto lut211idx0 = [](long I) -> long {
        /* GATE 135 (LUT2 _553_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut211.push_back(ctx.genrate_lut(lut211idx0));
    flut211.push_back(lut211idx0);
    auto lut211idx1 = [](long I) -> long {
        /* GATE 132 (LUT2 _550_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut211.push_back(ctx.genrate_lut(lut211idx1));
    flut211.push_back(lut211idx1);
    auto fvec211 = [flut211](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut211[i](I));
        return ret;
    };

    std::cerr << "\rLUT211   ";
    long gin211_clear = 1 * gout201_clear[0] + 2 * gout41_clear[1];
    std::vector<long> gout211_clear = fvec211(gin211_clear);

    std::vector<RotationPoly> lut212;
    std::vector<long (*)(long)> flut212;
    auto lut212idx0 = [](long I) -> long {
        /* GATE 147 (LUT3 _565_ INIT 0x70 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 1;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut212.push_back(ctx.genrate_lut(lut212idx0));
    flut212.push_back(lut212idx0);
    auto fvec212 = [flut212](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut212[i](I));
        return ret;
    };

    std::cerr << "\rLUT212   ";
    long gin212_clear = 1 * gout207_clear[0] + 2 * gout202_clear[0] + 4 * gout210_clear[0];
    std::vector<long> gout212_clear = fvec212(gin212_clear);

    std::vector<RotationPoly> lut213;
    std::vector<long (*)(long)> flut213;
    auto lut213idx0 = [](long I) -> long {
        /* GATE 125 (LUT2 _543_ INIT 0x8 PERM 01) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut213.push_back(ctx.genrate_lut(lut213idx0));
    flut213.push_back(lut213idx0);
    auto lut213idx1 = [](long I) -> long {
        /* GATE 129 (LUT2 _547_ INIT 0x1 PERM 01) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut213.push_back(ctx.genrate_lut(lut213idx1));
    flut213.push_back(lut213idx1);
    auto fvec213 = [flut213](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 2; ++i)
            ret.push_back(flut213[i](I));
        return ret;
    };

    std::cerr << "\rLUT213   ";
    long gin213_clear = 1 * gout208_clear[0] + 2 * gout79_clear[1];
    std::vector<long> gout213_clear = fvec213(gin213_clear);

    std::vector<RotationPoly> lut214;
    std::vector<long (*)(long)> flut214;
    auto lut214idx0 = [](long I) -> long {
        /* GATE 131 (LUT3 _549_ INIT 0x7 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 1;
            case  2: return 1;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut214.push_back(ctx.genrate_lut(lut214idx0));
    flut214.push_back(lut214idx0);
    auto fvec214 = [flut214](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut214[i](I));
        return ret;
    };

    std::cerr << "\rLUT214   ";
    long gin214_clear = 1 * gout50_clear[0] + 2 * gout196_clear[0] + 4 * gout211_clear[1];
    std::vector<long> gout214_clear = fvec214(gin214_clear);

    std::vector<RotationPoly> lut215;
    std::vector<long (*)(long)> flut215;
    auto lut215idx0 = [](long I) -> long {
        /* GATE 134 (LUT3 _552_ INIT 0x1 PERM 012) */
        switch (I) {
            case  0: return 1;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut215.push_back(ctx.genrate_lut(lut215idx0));
    flut215.push_back(lut215idx0);
    auto fvec215 = [flut215](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut215[i](I));
        return ret;
    };

    std::cerr << "\rLUT215   ";
    long gin215_clear = 1 * gout211_clear[0] + 2 * gout199_clear[0] + 4 * gout209_clear[0];
    std::vector<long> gout215_clear = fvec215(gin215_clear);

    std::vector<RotationPoly> lut216;
    std::vector<long (*)(long)> flut216;
    auto lut216idx0 = [](long I) -> long {
        /* GATE 128 (LUT3 _546_ INIT 0xe PERM 120) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 1;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut216.push_back(ctx.genrate_lut(lut216idx0));
    flut216.push_back(lut216idx0);
    auto fvec216 = [flut216](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut216[i](I));
        return ret;
    };

    std::cerr << "\rLUT216   ";
    long gin216_clear = 1 * gout213_clear[1] + 2 * gout50_clear[0] + 4 * gout196_clear[0];
    std::vector<long> gout216_clear = fvec216(gin216_clear);

    std::vector<RotationPoly> lut217;
    std::vector<long (*)(long)> flut217;
    auto lut217idx0 = [](long I) -> long {
        /* GATE 102 (LUT3 _520_ INIT 0xe PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 1;
            case  2: return 1;
            case  3: return 1;
            case  4: return 0;
            case  5: return 0;
            case  6: return 0;
            case  7: return 0;
            default: assert(0);
        };
    };
    lut217.push_back(ctx.genrate_lut(lut217idx0));
    flut217.push_back(lut217idx0);
    auto fvec217 = [flut217](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut217[i](I));
        return ret;
    };

    std::cerr << "\rLUT217   ";
    long gin217_clear = 1 * gout206_clear[0] + 2 * gout212_clear[0] + 4 * gout213_clear[0];
    std::vector<long> gout217_clear = fvec217(gin217_clear);

    std::vector<RotationPoly> lut218;
    std::vector<long (*)(long)> flut218;
    auto lut218idx0 = [](long I) -> long {
        /* GATE 101 (LUT3 _519_ INIT 0xd0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut218.push_back(ctx.genrate_lut(lut218idx0));
    flut218.push_back(lut218idx0);
    auto fvec218 = [flut218](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut218[i](I));
        return ret;
    };

    std::cerr << "\rLUT218   ";
    long gin218_clear = 1 * gout216_clear[0] + 2 * gout217_clear[0] + 4 * gout214_clear[0];
    std::vector<long> gout218_clear = fvec218(gin218_clear);

    std::vector<RotationPoly> lut219;
    std::vector<long (*)(long)> flut219;
    auto lut219idx0 = [](long I) -> long {
        /* GATE 100 (LUT3 _518_ INIT 0xd0 PERM 012) */
        switch (I) {
            case  0: return 0;
            case  1: return 0;
            case  2: return 0;
            case  3: return 0;
            case  4: return 1;
            case  5: return 0;
            case  6: return 1;
            case  7: return 1;
            default: assert(0);
        };
    };
    lut219.push_back(ctx.genrate_lut(lut219idx0));
    flut219.push_back(lut219idx0);
    auto fvec219 = [flut219](long I) -> std::vector<long> {
        std::vector<long> ret;
        for (size_t i = 0; i < 1; ++i)
            ret.push_back(flut219[i](I));
        return ret;
    };

    std::cerr << "\rLUT219   ";
    long gin219_clear = 1 * gout215_clear[0] + 2 * gout218_clear[0] + 4 * gout203_clear[0];
    std::vector<long> gout219_clear = fvec219(gin219_clear);

    std::cerr << "\r          \r";
    std::vector<long> out;
    out.push_back(gout219_clear[0]); /* out0 */
    out.push_back(gout193_clear[1]); /* out1 */
    out.push_back(gout159_clear[0]); /* out2 */
    out.push_back(gout127_clear[0]); /* out3 */
    out.push_back(gout100_clear[1]); /* out4 */
    out.push_back(gout79_clear[1]); /* out5 */
    out.push_back(gout50_clear[0]); /* out6 */
    out.push_back(gout41_clear[1]); /* out7 */
    out.push_back(0); /* out15 */
    return out;
}

int
main(void)
{
    /* setup */
    FHEContext ctx;
    long out;

    std::cout << "[+] ";
    ctx.generate_context(rlwe_hom_acc_scheme_C_11_NTT);
    ctx.set_default_message_encoding_type(partial_domain);
    ctx.set_default_plaintext_space(4);

    /* add4 tests */
    std::cout << "[+] Testing add4" << std::endl;
    for (int i = 0; i < 16; ++i) {
        for (int j = 0; j < 16; ++j) {
            std::cerr << i << " + " << j;
            out = compose(test_add4_boolean(ctx, i, j));
            assert(out == i + j);
            out = compose(test_add4_lut3(ctx, i, j));
            assert(out == i + j);
            out = compose(test_add4_lut3fa(ctx, i, j));
            assert(out == i + j);
        }
    }

    /* calculator tests */
    std::cout << "[+] Testing calculator" << std::endl;
    std::cout << "[>] 0 0 0" << std::endl;
    std::cout << "exp:    1111111111111111" << std::endl;
    out = compose(test_calculator_boolean(ctx, 0, 0, 0));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, 0, 0, 0));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, 0, 0, 0));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 6 + 7" << std::endl;
    std::cout << "exp:    0000000000001101" << std::endl;
    out = compose(test_calculator_boolean(ctx, '+', 6, 7));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, '+', 6, 7));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, '+', 6, 7));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 6 - 7" << std::endl;
    std::cout << "exp:    1111111111111111" << std::endl;
    out = compose(test_calculator_boolean(ctx, '-', 6, 7));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, '-', 6, 7));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, '-', 6, 7));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 6 * 7" << std::endl;
    std::cout << "exp:    0000000000101010" << std::endl;
    out = compose(test_calculator_boolean(ctx, '*', 6, 7));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, '*', 6, 7));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, '*', 6, 7));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 0xba + 0xbe" << std::endl;
    std::cout << "exp:    0000000101111000" << std::endl;
    out = compose(test_calculator_boolean(ctx, '+', 0xba, 0xbe));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, '+', 0xba, 0xbe));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, '+', 0xba, 0xbe));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 0xba - 0xbe" << std::endl;
    std::cout << "exp:    1111111111111100" << std::endl;
    out = compose(test_calculator_boolean(ctx, '-', 0xba, 0xbe));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, '-', 0xba, 0xbe));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, '-', 0xba, 0xbe));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 0xba * 0xbe" << std::endl;
    std::cout << "exp:    1000101000001100" << std::endl;
    out = compose(test_calculator_boolean(ctx, '*', 0xba, 0xbe));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, '*', 0xba, 0xbe));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, '*', 0xba, 0xbe));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 0xffff + 0xffff" << std::endl;
    std::cout << "exp:    1111111111111110" << std::endl;
    out = compose(test_calculator_boolean(ctx, '+', 0xffff, 0xffff));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, '+', 0xffff, 0xffff));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, '+', 0xffff, 0xffff));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 0xffff - 0xffff" << std::endl;
    std::cout << "exp:    0000000000000000" << std::endl;
    out = compose(test_calculator_boolean(ctx, '-', 0xffff, 0xffff));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, '-', 0xffff, 0xffff));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, '-', 0xffff, 0xffff));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 0xffff * 0xffff" << std::endl;
    std::cout << "exp:    0000000000000001" << std::endl;
    out = compose(test_calculator_boolean(ctx, '*', 0xffff, 0xffff));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3(ctx, '*', 0xffff, 0xffff));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_calculator_lut3fa(ctx, '*', 0xffff, 0xffff));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    /* sqrt tests */
    std::cout << "[+] Testing sqrt" << std::endl;
    std::cout << "[>] 25" << std::endl;
    std::cout << "exp:    0000000000000101" << std::endl;
    out = compose(test_sqrt_boolean(ctx, 25));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_sqrt_lut3(ctx, 25));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_sqrt_lut3fa(ctx, 25));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 35" << std::endl;
    std::cout << "exp:    0000000000000101" << std::endl;
    out = compose(test_sqrt_boolean(ctx, 35));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_sqrt_lut3(ctx, 35));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_sqrt_lut3fa(ctx, 35));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 22500" << std::endl;
    std::cout << "exp:    0000000010010110" << std::endl;
    out = compose(test_sqrt_boolean(ctx, 22500));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_sqrt_lut3(ctx, 22500));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_sqrt_lut3fa(ctx, 22500));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    std::cout << "[>] 22800" << std::endl;
    std::cout << "exp:    0000000010010110" << std::endl;
    out = compose(test_sqrt_boolean(ctx, 22800));
    std::cout << "bool:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_sqrt_lut3(ctx, 22800));
    std::cout << "lut3:   " << std::bitset<16>(out) << std::endl;
    out = compose(test_sqrt_lut3fa(ctx, 22800));
    std::cout << "lut3fa: " << std::bitset<16>(out) << std::endl;

    return 0;
}
